
shakyou.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000020c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b570  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a42  00000000  00000000  0002b64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a1a  00000000  00000000  0002ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024060  00000000  00000000  0002f862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e200  00000000  00000000  000538c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caab4  00000000  00000000  00061ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fa8  00000000  00000000  0012c578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00130520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005520 	.word	0x08005520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005520 	.word	0x08005520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f023 0210 	bic.w	r2, r3, #16
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d101      	bne.n	80005ca <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d101      	bne.n	80005f0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	330c      	adds	r3, #12
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	330c      	adds	r3, #12
 800062a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	78fa      	ldrb	r2, [r7, #3]
 8000630:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	691a      	ldr	r2, [r3, #16]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4013      	ands	r3, r2
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	619a      	str	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	041a      	lsls	r2, r3, #16
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	619a      	str	r2, [r3, #24]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4013      	ands	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4013      	ands	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40023800 	.word	0x40023800

08000704 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	; 0x40
 8000708:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fdb8 	bl	8004288 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800072c:	f7ff ffd2 	bl	80006d4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ffb7 	bl	80006a4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000736:	2004      	movs	r0, #4
 8000738:	f7ff ffb4 	bl	80006a4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ffb1 	bl	80006a4 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000742:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000746:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000758:	2305      	movs	r3, #5
 800075a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4841      	ldr	r0, [pc, #260]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000762:	f002 fb8c 	bl	8002e7e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800076a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800076e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000782:	2318      	movs	r3, #24
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	4834      	ldr	r0, [pc, #208]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800079a:	f002 fd40 	bl	800321e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800079e:	2100      	movs	r1, #0
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 80007a2:	f7ff fef3 	bl	800058c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4831      	ldr	r0, [pc, #196]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80007ac:	f7ff ff6a 	bl	8000684 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	482c      	ldr	r0, [pc, #176]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007b6:	f7ff ff65 	bl	8000684 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 80007c0:	f7ff ff60 	bl	8000684 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007e0:	f002 fb4d 	bl	8002e7e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80007e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	481c      	ldr	r0, [pc, #112]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000800:	f002 fb3d 	bl	8002e7e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4815      	ldr	r0, [pc, #84]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000820:	f002 fb2d 	bl	8002e7e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000828:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000838:	f002 fb21 	bl	8002e7e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800083e:	f7ff fe95 	bl	800056c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000848:	f7ff ff0e 	bl	8000668 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000852:	f7ff ff09 	bl	8000668 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800085c:	f7ff ff04 	bl	8000668 <LL_GPIO_SetOutputPin>
}
 8000860:	bf00      	nop
 8000862:	3740      	adds	r7, #64	; 0x40
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020400 	.word	0x40020400
 800086c:	40003800 	.word	0x40003800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <SPI2_SendByte>:
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
	return (1); //Something went wrong
}

unsigned char SPI2_SendByte(unsigned char data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8000882:	bf00      	nop
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <SPI2_SendByte+0x40>)
 8000886:	f7ff fea7 	bl	80005d8 <LL_SPI_IsActiveFlag_TXE>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4619      	mov	r1, r3
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <SPI2_SendByte+0x40>)
 8000896:	f7ff fec0 	bl	800061a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800089a:	bf00      	nop
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <SPI2_SendByte+0x40>)
 800089e:	f7ff fe88 	bl	80005b2 <LL_SPI_IsActiveFlag_RXNE>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f9      	beq.n	800089c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <SPI2_SendByte+0x40>)
 80008aa:	f7ff fea8 	bl	80005fe <LL_SPI_ReceiveData8>
 80008ae:	4603      	mov	r3, r0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40003800 	.word	0x40003800

080008bc <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	2005      	movs	r0, #5
 80008ce:	f000 f805 	bl	80008dc <BNO080_setFeatureCommand>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 80008ec:	22fd      	movs	r2, #253	; 0xfd
 80008ee:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 800090e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000918:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	0c1b      	lsrs	r3, r3, #16
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000922:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	0e1b      	lsrs	r3, r3, #24
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 800092c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000936:	2200      	movs	r2, #0
 8000938:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000942:	2200      	movs	r2, #0
 8000944:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 800094c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000956:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 8000960:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0e1b      	lsrs	r3, r3, #24
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <BNO080_setFeatureCommand+0xa0>)
 800096a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800096c:	2111      	movs	r1, #17
 800096e:	2002      	movs	r0, #2
 8000970:	f000 f82a 	bl	80009c8 <BNO080_sendPacket>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000084 	.word	0x20000084

08000980 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e00c      	b.n	80009a6 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <BNO080_waitForSPI+0x40>)
 8000992:	f7ff fe54 	bl	800063e <LL_GPIO_IsInputPinSet>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 800099c:	2301      	movs	r3, #1
 800099e:	e00a      	b.n	80009b6 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d1ee      	bne.n	800098c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <BNO080_waitForSPI+0x44>)
 80009b0:	f003 fb8a 	bl	80040c8 <puts>
	return (0);
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020800 	.word	0x40020800
 80009c4:	080055d0 	.word	0x080055d0

080009c8 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	3304      	adds	r3, #4
 80009dc:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80009de:	f7ff ffcf 	bl	8000980 <BNO080_waitForSPI>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80009e8:	2300      	movs	r3, #0
 80009ea:	e032      	b.n	8000a52 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <BNO080_sendPacket+0x94>)
 80009f2:	f7ff fe47 	bl	8000684 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff3d 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	121b      	asrs	r3, r3, #8
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff37 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff33 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <BNO080_sendPacket+0x98>)
 8000a16:	5cd2      	ldrb	r2, [r2, r3]
 8000a18:	1c51      	adds	r1, r2, #1
 8000a1a:	b2c8      	uxtb	r0, r1
 8000a1c:	4910      	ldr	r1, [pc, #64]	; (8000a60 <BNO080_sendPacket+0x98>)
 8000a1e:	54c8      	strb	r0, [r1, r3]
 8000a20:	4610      	mov	r0, r2
 8000a22:	f7ff ff29 	bl	8000878 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e008      	b.n	8000a3e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <BNO080_sendPacket+0x9c>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff20 	bl	8000878 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	7bfa      	ldrb	r2, [r7, #15]
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3f2      	bcc.n	8000a2c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <BNO080_sendPacket+0x94>)
 8000a4c:	f7ff fe0c 	bl	8000668 <LL_GPIO_SetOutputPin>

	return (1);
 8000a50:	2301      	movs	r3, #1
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	20000104 	.word	0x20000104
 8000a64:	20000084 	.word	0x20000084

08000a68 <LL_SPI_Enable>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LL_SPI_SetStandard>:
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f023 0210 	bic.w	r2, r3, #16
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <LL_GPIO_SetOutputPin>:
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	619a      	str	r2, [r3, #24]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <LL_GPIO_ResetOutputPin>:
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	041a      	lsls	r2, r3, #16
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_AHB1_GRP1_EnableClock>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40023800 	.word	0x40023800

08000b18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40023800 	.word	0x40023800

08000b48 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b090      	sub	sp, #64	; 0x40
 8000b4c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	2228      	movs	r2, #40	; 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fb96 	bl	8004288 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000b6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b70:	f7ff ffd2 	bl	8000b18 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ffb7 	bl	8000ae8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f7ff ffb4 	bl	8000ae8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000b80:	23e0      	movs	r3, #224	; 0xe0
 8000b82:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b84:	2302      	movs	r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000b94:	2305      	movs	r3, #5
 8000b96:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4825      	ldr	r0, [pc, #148]	; (8000c34 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8000b9e:	f002 f96e 	bl	8002e7e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ba6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000baa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000bca:	230a      	movs	r3, #10
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000bd6:	f002 fb22 	bl	800321e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4816      	ldr	r0, [pc, #88]	; (8000c38 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000bde:	f7ff ff53 	bl	8000a88 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8000be2:	2110      	movs	r1, #16
 8000be4:	4815      	ldr	r0, [pc, #84]	; (8000c3c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000be6:	f7ff ff70 	bl	8000aca <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8000bea:	2310      	movs	r3, #16
 8000bec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000c04:	f002 f93b 	bl	8002e7e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000c1a:	f002 f930 	bl	8002e7e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000c20:	f7ff ff22 	bl	8000a68 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8000c24:	2110      	movs	r1, #16
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000c28:	f7ff ff41 	bl	8000aae <LL_GPIO_SetOutputPin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3740      	adds	r7, #64	; 0x40
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40013000 	.word	0x40013000
 8000c3c:	40020800 	.word	0x40020800

08000c40 <LL_SPI_Enable>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_SPI_SetStandard>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f023 0210 	bic.w	r2, r3, #16
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_SPI_IsActiveFlag_RXNE>:
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_SPI_IsActiveFlag_TXE>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d101      	bne.n	8000cc4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_SPI_ReceiveData8>:
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	330c      	adds	r3, #12
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <LL_SPI_TransmitData8>:
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	78fa      	ldrb	r2, [r7, #3]
 8000d04:	701a      	strb	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_GPIO_IsInputPinSet>:
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4013      	ands	r3, r2
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_GPIO_SetOutputPin>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	619a      	str	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_GPIO_ResetOutputPin>:
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <LL_AHB1_GRP1_EnableClock>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023800 	.word	0x40023800

08000da8 <LL_APB1_GRP1_EnableClock>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b090      	sub	sp, #64	; 0x40
 8000ddc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fa4e 	bl	8004288 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000dfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e00:	f7ff ffd2 	bl	8000da8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ffb7 	bl	8000d78 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000e0a:	2338      	movs	r3, #56	; 0x38
 8000e0c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8000e28:	f002 f829 	bl	8002e7e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e30:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e34:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000e54:	230a      	movs	r3, #10
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8000e60:	f002 f9dd 	bl	800321e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8000e68:	f7ff fefa 	bl	8000c60 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8000e70:	f7ff ff72 	bl	8000d58 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8000e74:	2340      	movs	r3, #64	; 0x40
 8000e76:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8000e8e:	f001 fff6 	bl	8002e7e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8000ea4:	f001 ffeb 	bl	8002e7e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8000eaa:	f7ff fec9 	bl	8000c40 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8000eb2:	f7ff ff43 	bl	8000d3c <LL_GPIO_SetOutputPin>
}
 8000eb6:	bf00      	nop
 8000eb8:	3740      	adds	r7, #64	; 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40003c00 	.word	0x40003c00

08000ec8 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8000ed2:	bf00      	nop
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <SPI3_SendByte+0x40>)
 8000ed6:	f7ff fee9 	bl	8000cac <LL_SPI_IsActiveFlag_TXE>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f9      	beq.n	8000ed4 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <SPI3_SendByte+0x40>)
 8000ee6:	f7ff ff02 	bl	8000cee <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8000eea:	bf00      	nop
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <SPI3_SendByte+0x40>)
 8000eee:	f7ff feca 	bl	8000c86 <LL_SPI_IsActiveFlag_RXNE>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f9      	beq.n	8000eec <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <SPI3_SendByte+0x40>)
 8000efa:	f7ff feea 	bl	8000cd2 <LL_SPI_ReceiveData8>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40003c00 	.word	0x40003c00

08000f0c <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <LPS22HH_Readbyte+0x3c>)
 8000f1a:	f7ff ff1d 	bl	8000d58 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffce 	bl	8000ec8 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff ffcb 	bl	8000ec8 <SPI3_SendByte>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <LPS22HH_Readbyte+0x3c>)
 8000f3a:	f7ff feff 	bl	8000d3c <LL_GPIO_SetOutputPin>
	
	return val;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020400 	.word	0x40020400

08000f4c <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	603a      	str	r2, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <LPS22HH_Readbytes+0x58>)
 8000f64:	f7ff fef8 	bl	8000d58 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ffa9 	bl	8000ec8 <SPI3_SendByte>
	while(i < len)
 8000f76:	e009      	b.n	8000f8c <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60fa      	str	r2, [r7, #12]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	18d4      	adds	r4, r2, r3
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ffa0 	bl	8000ec8 <SPI3_SendByte>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3f1      	bcc.n	8000f78 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <LPS22HH_Readbytes+0x58>)
 8000f98:	f7ff fed0 	bl	8000d3c <LL_GPIO_SetOutputPin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LPS22HH_Writebyte+0x40>)
 8000fbc:	f7ff fecc 	bl	8000d58 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff7d 	bl	8000ec8 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff79 	bl	8000ec8 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <LPS22HH_Writebyte+0x40>)
 8000fda:	f7ff feaf 	bl	8000d3c <LL_GPIO_SetOutputPin>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020400 	.word	0x40020400

08000fec <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8000ff6:	f7ff feef 	bl	8000dd8 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8000ffa:	4841      	ldr	r0, [pc, #260]	; (8001100 <LPS22HH_Initialization+0x114>)
 8000ffc:	f002 fffe 	bl	8003ffc <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001000:	200f      	movs	r0, #15
 8001002:	f7ff ff83 	bl	8000f0c <LPS22HH_Readbyte>
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2bb3      	cmp	r3, #179	; 0xb3
 800100e:	d105      	bne.n	800101c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4619      	mov	r1, r3
 8001014:	483b      	ldr	r0, [pc, #236]	; (8001104 <LPS22HH_Initialization+0x118>)
 8001016:	f002 fff1 	bl	8003ffc <iprintf>
 800101a:	e012      	b.n	8001042 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2bb3      	cmp	r3, #179	; 0xb3
 8001020:	d00f      	beq.n	8001042 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001022:	200f      	movs	r0, #15
 8001024:	f7ff ff72 	bl	8000f0c <LPS22HH_Readbyte>
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2bb3      	cmp	r3, #179	; 0xb3
 8001030:	d007      	beq.n	8001042 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	22b3      	movs	r2, #179	; 0xb3
 8001036:	4619      	mov	r1, r3
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <LPS22HH_Initialization+0x11c>)
 800103a:	f002 ffdf 	bl	8003ffc <iprintf>
			return 1; //ERROR
 800103e:	2301      	movs	r3, #1
 8001040:	e059      	b.n	80010f6 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001042:	2104      	movs	r1, #4
 8001044:	2011      	movs	r0, #17
 8001046:	f7ff ffaf 	bl	8000fa8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 800104a:	2011      	movs	r0, #17
 800104c:	f7ff ff5e 	bl	8000f0c <LPS22HH_Readbyte>
 8001050:	4603      	mov	r3, r0
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f7      	bne.n	800104a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800105a:	2010      	movs	r0, #16
 800105c:	f7ff ff56 	bl	8000f0c <LPS22HH_Readbyte>
 8001060:	4603      	mov	r3, r0
 8001062:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	4619      	mov	r1, r3
 8001070:	2010      	movs	r0, #16
 8001072:	f7ff ff99 	bl	8000fa8 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800107a:	2010      	movs	r0, #16
 800107c:	f7ff ff46 	bl	8000f0c <LPS22HH_Readbyte>
 8001080:	4603      	mov	r3, r0
 8001082:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff ff41 	bl	8000f0c <LPS22HH_Readbyte>
 800108a:	4603      	mov	r3, r0
 800108c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	f043 030c 	orr.w	r3, r3, #12
 8001094:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	4619      	mov	r1, r3
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff ff84 	bl	8000fa8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80010a0:	2010      	movs	r0, #16
 80010a2:	f7ff ff33 	bl	8000f0c <LPS22HH_Readbyte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	4619      	mov	r1, r3
 80010b6:	2010      	movs	r0, #16
 80010b8:	f7ff ff76 	bl	8000fa8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80010bc:	2011      	movs	r0, #17
 80010be:	f7ff ff25 	bl	8000f0c <LPS22HH_Readbyte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	4619      	mov	r1, r3
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff ff68 	bl	8000fa8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80010d8:	2012      	movs	r0, #18
 80010da:	f7ff ff17 	bl	8000f0c <LPS22HH_Readbyte>
 80010de:	4603      	mov	r3, r0
 80010e0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff ff5a 	bl	8000fa8 <LPS22HH_Writebyte>
	
	return 0; //OK
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	080055e4 	.word	0x080055e4
 8001104:	080055f8 	.word	0x080055f8
 8001108:	0800561c 	.word	0x0800561c

0800110c <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <LPS22HH_DataReady+0x14>)
 8001114:	f7ff fdfd 	bl	8000d12 <LL_GPIO_IsInputPinSet>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020400 	.word	0x40020400

08001124 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	2103      	movs	r1, #3
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f7ff ff0b 	bl	8000f4c <LPS22HH_Readbytes>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	2102      	movs	r1, #2
 800114a:	202b      	movs	r0, #43	; 0x2b
 800114c:	f7ff fefe 	bl	8000f4c <LPS22HH_Readbytes>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001162:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8001166:	edd7 7a01 	vldr	s15, [r7, #4]
 800116a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011b0 <getAltitude2+0x58>
 800116e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001172:	eddf 0a10 	vldr	s1, [pc, #64]	; 80011b4 <getAltitude2+0x5c>
 8001176:	eeb0 0a47 	vmov.f32	s0, s14
 800117a:	f003 fe0f 	bl	8004d9c <powf>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001186:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118a:	edd7 7a00 	vldr	s15, [r7]
 800118e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80011b8 <getAltitude2+0x60>
 8001192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011bc <getAltitude2+0x64>
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	447d5000 	.word	0x447d5000
 80011b4:	3e42c9b7 	.word	0x3e42c9b7
 80011b8:	43889333 	.word	0x43889333
 80011bc:	3bd4fdf4 	.word	0x3bd4fdf4

080011c0 <LL_GPIO_ResetOutputPin>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <LL_AHB1_GRP1_EnableClock>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40023800 	.word	0x40023800

08001210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001226:	2080      	movs	r0, #128	; 0x80
 8001228:	f7ff ffda 	bl	80011e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800122c:	2004      	movs	r0, #4
 800122e:	f7ff ffd7 	bl	80011e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff ffd4 	bl	80011e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff ffd1 	bl	80011e0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SPI1_20602_CS_Pin
 800123e:	f240 2117 	movw	r1, #535	; 0x217
 8001242:	482c      	ldr	r0, [pc, #176]	; (80012f4 <MX_GPIO_Init+0xe4>)
 8001244:	f7ff ffbc 	bl	80011c0 <LL_GPIO_ResetOutputPin>
                          |BNO080_RESET_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BNO080_CS_Pin|LPS22_CS_Pin);
 8001248:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <MX_GPIO_Init+0xe8>)
 800124e:	f7ff ffb7 	bl	80011c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BNO080_WAKE_GPIO_Port, BNO080_WAKE_Pin);
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	4829      	ldr	r0, [pc, #164]	; (80012fc <MX_GPIO_Init+0xec>)
 8001258:	f7ff ffb2 	bl	80011c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SPI1_20602_CS_Pin
 800125c:	f240 2317 	movw	r3, #535	; 0x217
 8001260:	603b      	str	r3, [r7, #0]
                          |BNO080_RESET_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001262:	2301      	movs	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	481f      	ldr	r0, [pc, #124]	; (80012f4 <MX_GPIO_Init+0xe4>)
 8001278:	f001 fe01 	bl	8002e7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ICM20602_Interrupt_Pin|BNO080_Interrupt_Pin;
 800127c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001280:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_GPIO_Init+0xe4>)
 8001290:	f001 fdf5 	bl	8002e7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BNO080_CS_Pin|LPS22_CS_Pin;
 8001294:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001298:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MX_GPIO_Init+0xe8>)
 80012b0:	f001 fde5 	bl	8002e7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BNO080_WAKE_Pin;
 80012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ba:	2301      	movs	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BNO080_WAKE_GPIO_Port, &GPIO_InitStruct);
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xec>)
 80012d0:	f001 fdd5 	bl	8002e7e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LPS22_Interrupt_Pin;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LPS22_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_GPIO_Init+0xe8>)
 80012e6:	f001 fdca 	bl	8002e7e <LL_GPIO_Init>

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020000 	.word	0x40020000

08001300 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	43db      	mvns	r3, r3
 8001354:	401a      	ands	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	621a      	str	r2, [r3, #32]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001366:	b480      	push	{r7}
 8001368:	b089      	sub	sp, #36	; 0x24
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	330c      	adds	r3, #12
 8001372:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	e853 3f00 	ldrex	r3, [r3]
 800137a:	60bb      	str	r3, [r7, #8]
   return(result);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	330c      	adds	r3, #12
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	61ba      	str	r2, [r7, #24]
 800138c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800138e:	6979      	ldr	r1, [r7, #20]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	e841 2300 	strex	r3, r2, [r1]
 8001396:	613b      	str	r3, [r7, #16]
   return(result);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e7      	bne.n	800136e <LL_USART_EnableIT_RXNE+0x8>
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3724      	adds	r7, #36	; 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f000 fe80 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f88a 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f7ff ff2a 	bl	8001210 <MX_GPIO_Init>
  MX_TIM3_Init();
 80013bc:	f000 fc9e 	bl	8001cfc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80013c0:	f000 fdee 	bl	8001fa0 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80013c4:	f000 f99e 	bl	8001704 <MX_SPI2_Init>
  MX_SPI1_Init();
 80013c8:	f000 f94a 	bl	8001660 <MX_SPI1_Init>
  MX_SPI3_Init();
 80013cc:	f000 f9ee 	bl	80017ac <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80013d0:	4836      	ldr	r0, [pc, #216]	; (80014ac <main+0x100>)
 80013d2:	f7ff ff95 	bl	8001300 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80013d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013da:	4834      	ldr	r0, [pc, #208]	; (80014ac <main+0x100>)
 80013dc:	f7ff ffa0 	bl	8001320 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // 2kHz
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <main+0x100>)
 80013e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80013e8:	2064      	movs	r0, #100	; 0x64
 80013ea:	f000 fed5 	bl	8002198 <HAL_Delay>
  TIM3->PSC = 1500; // 3kHz
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <main+0x100>)
 80013f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80013f6:	2064      	movs	r0, #100	; 0x64
 80013f8:	f000 fece 	bl	8002198 <HAL_Delay>
  TIM3->PSC = 1000; // 4kHz
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <main+0x100>)
 80013fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f000 fec7 	bl	8002198 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800140a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140e:	4827      	ldr	r0, [pc, #156]	; (80014ac <main+0x100>)
 8001410:	f7ff ff97 	bl	8001342 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8001414:	4826      	ldr	r0, [pc, #152]	; (80014b0 <main+0x104>)
 8001416:	f7ff ffa6 	bl	8001366 <LL_USART_EnableIT_RXNE>

  BNO080_GPIO_SPI_Initialization();  // SPI2 Init
 800141a:	f7ff f973 	bl	8000704 <BNO080_GPIO_SPI_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 800141e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001422:	f7ff fa4b 	bl	80008bc <BNO080_enableRotationVector>

  ICM20602_GPIO_SPI_Initialization();
 8001426:	f7ff fb8f 	bl	8000b48 <ICM20602_GPIO_SPI_Initialization>

  LPS22HH_Initialization();
 800142a:	f7ff fddf 	bl	8000fec <LPS22HH_Initialization>
//
//		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
//		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
//		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
//	  }
	  if(LPS22HH_DataReady())
 800142e:	f7ff fe6d 	bl	800110c <LPS22HH_DataReady>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0fa      	beq.n	800142e <main+0x82>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <main+0x108>)
 800143a:	f7ff fe73 	bl	8001124 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800143e:	481e      	ldr	r0, [pc, #120]	; (80014b8 <main+0x10c>)
 8001440:	f7ff fe7d 	bl	800113e <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f,LPS22HH.temperature_raw/100.f);
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <main+0x108>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80014bc <main+0x110>
 8001454:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <main+0x108>)
 800145a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80014c0 <main+0x114>
 800146a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800146e:	eef0 0a66 	vmov.f32	s1, s13
 8001472:	eeb0 0a47 	vmov.f32	s0, s14
 8001476:	f7ff fe6f 	bl	8001158 <getAltitude2>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <main+0x108>)
 8001480:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <main+0x108>)
 8001486:	edd3 7a03 	vldr	s15, [r3, #12]
 800148a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014c4 <main+0x118>
 800148e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <main+0x108>)
 8001494:	edd3 7a02 	vldr	s15, [r3, #8]
 8001498:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80014c8 <main+0x11c>
 800149c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <main+0x108>)
 80014a6:	edc3 7a03 	vstr	s15, [r3, #12]
	  if(LPS22HH_DataReady())
 80014aa:	e7c0      	b.n	800142e <main+0x82>
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40011400 	.word	0x40011400
 80014b4:	2000010c 	.word	0x2000010c
 80014b8:	20000110 	.word	0x20000110
 80014bc:	45800000 	.word	0x45800000
 80014c0:	42c80000 	.word	0x42c80000
 80014c4:	3f666666 	.word	0x3f666666
 80014c8:	3dccccd0 	.word	0x3dccccd0

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fed4 	bl	8004288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <SystemClock_Config+0xcc>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <SystemClock_Config+0xd0>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001540:	23a8      	movs	r3, #168	; 0xa8
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001548:	2304      	movs	r3, #4
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f000 ff2b 	bl	80023ac <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800155c:	f000 f820 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2105      	movs	r1, #5
 800157e:	4618      	mov	r0, r3
 8001580:	f001 f98c 	bl	800289c <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158a:	f000 f809 	bl	80015a0 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	; 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>

080015aa <LL_SPI_SetStandard>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 0210 	bic.w	r2, r3, #16
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_AHB1_GRP1_EnableClock>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4013      	ands	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40023800 	.word	0x40023800

08001600 <LL_APB1_GRP1_EnableClock>:
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <LL_APB1_GRP1_EnableClock+0x2c>)
 800160a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <LL_APB1_GRP1_EnableClock+0x2c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023800 	.word	0x40023800

08001630 <LL_APB2_GRP1_EnableClock>:
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <LL_APB2_GRP1_EnableClock+0x2c>)
 800163a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <LL_APB2_GRP1_EnableClock+0x2c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40023800 	.word	0x40023800

08001660 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b090      	sub	sp, #64	; 0x40
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	2228      	movs	r2, #40	; 0x28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fe0a 	bl	8004288 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001684:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001688:	f7ff ffd2 	bl	8001630 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ff9f 	bl	80015d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|SPI1_20602_MISO_Pin|SPI1_20602_MOSI_Pin;
 8001692:	23e0      	movs	r3, #224	; 0xe0
 8001694:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001696:	2302      	movs	r3, #2
 8001698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80016a6:	2305      	movs	r3, #5
 80016a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4813      	ldr	r0, [pc, #76]	; (80016fc <MX_SPI1_Init+0x9c>)
 80016b0:	f001 fbe5 	bl	8002e7e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80016b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016bc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80016ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80016d4:	2300      	movs	r3, #0
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80016dc:	230a      	movs	r3, #10
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_SPI1_Init+0xa0>)
 80016e8:	f001 fd99 	bl	800321e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_SPI1_Init+0xa0>)
 80016f0:	f7ff ff5b 	bl	80015aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3740      	adds	r7, #64	; 0x40
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40020000 	.word	0x40020000
 8001700:	40013000 	.word	0x40013000

08001704 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b090      	sub	sp, #64	; 0x40
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2228      	movs	r2, #40	; 0x28
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fdb8 	bl	8004288 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800172c:	f7ff ff68 	bl	8001600 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001730:	2002      	movs	r0, #2
 8001732:	f7ff ff4d 	bl	80015d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|SPI_BNO080_MISO_Pin|SPI2_BNO080_MOSI_Pin;
 8001736:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800173a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800173c:	2302      	movs	r3, #2
 800173e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800174c:	2305      	movs	r3, #5
 800174e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_SPI2_Init+0xa0>)
 8001756:	f001 fb92 	bl	8002e7e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800175e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001762:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001776:	2300      	movs	r3, #0
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001782:	230a      	movs	r3, #10
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4619      	mov	r1, r3
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_SPI2_Init+0xa4>)
 800178e:	f001 fd46 	bl	800321e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001792:	2100      	movs	r1, #0
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI2_Init+0xa4>)
 8001796:	f7ff ff08 	bl	80015aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	; 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40003800 	.word	0x40003800

080017ac <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	2228      	movs	r2, #40	; 0x28
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fd64 	bl	8004288 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80017d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017d4:	f7ff ff14 	bl	8001600 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff fef9 	bl	80015d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|SPI3_LPS22_MISO_Pin|SPI3_LPS22_MOSI_Pin;
 80017de:	2338      	movs	r3, #56	; 0x38
 80017e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017e2:	2302      	movs	r3, #2
 80017e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017f2:	2306      	movs	r3, #6
 80017f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <MX_SPI3_Init+0x9c>)
 80017fc:	f001 fb3f 	bl	8002e7e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001804:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001808:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800180e:	2302      	movs	r3, #2
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800181c:	2308      	movs	r3, #8
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001828:	230a      	movs	r3, #10
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_SPI3_Init+0xa0>)
 8001834:	f001 fcf3 	bl	800321e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001838:	2100      	movs	r1, #0
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_SPI3_Init+0xa0>)
 800183c:	f7ff feb5 	bl	80015aa <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3740      	adds	r7, #64	; 0x40
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020400 	.word	0x40020400
 800184c:	40003c00 	.word	0x40003c00

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <LL_USART_IsActiveFlag_RXNE>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_USART_ClearFlag_RXNE>:
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f06f 0220 	mvn.w	r2, #32
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 fc06 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <USART6_IRQHandler+0x30>)
 8001956:	f7ff ffa3 	bl	80018a0 <LL_USART_IsActiveFlag_RXNE>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <USART6_IRQHandler+0x30>)
 8001962:	f7ff ffb0 	bl	80018c6 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <USART6_IRQHandler+0x30>)
 8001968:	f7ff ffbb 	bl	80018e2 <LL_USART_ReceiveData8>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <USART6_IRQHandler+0x34>)
 8001972:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <USART6_IRQHandler+0x38>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40011400 	.word	0x40011400
 8001984:	2000011c 	.word	0x2000011c
 8001988:	2000011d 	.word	0x2000011d

0800198c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	4601      	mov	r1, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <_read+0x12>
  }

  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e009      	b.n	80019ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf1      	blt.n	80019d8 <_write+0x12>
  }
  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_close>:

int _close(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a26:	605a      	str	r2, [r3, #4]
  return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_isatty>:

int _isatty(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f002 fc44 	bl	8004324 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000120 	.word	0x20000120
 8001ad0:	20000278 	.word	0x20000278

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <LL_TIM_DisableARRPreload>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d01c      	beq.n	8001b62 <LL_TIM_OC_DisableFast+0x4a>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d017      	beq.n	8001b5e <LL_TIM_OC_DisableFast+0x46>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d012      	beq.n	8001b5a <LL_TIM_OC_DisableFast+0x42>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d00d      	beq.n	8001b56 <LL_TIM_OC_DisableFast+0x3e>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d007      	beq.n	8001b52 <LL_TIM_OC_DisableFast+0x3a>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d101      	bne.n	8001b4e <LL_TIM_OC_DisableFast+0x36>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e00a      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e008      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LL_TIM_OC_DisableFast+0x84>)
 8001b70:	5cd3      	ldrb	r3, [r2, r3]
 8001b72:	440b      	add	r3, r1
 8001b74:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <LL_TIM_OC_DisableFast+0x88>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	4619      	mov	r1, r3
 8001b82:	2304      	movs	r3, #4
 8001b84:	408b      	lsls	r3, r1
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	601a      	str	r2, [r3, #0]

}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	08005660 	.word	0x08005660
 8001ba0:	08005668 	.word	0x08005668

08001ba4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d01c      	beq.n	8001bee <LL_TIM_OC_EnablePreload+0x4a>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d017      	beq.n	8001bea <LL_TIM_OC_EnablePreload+0x46>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d012      	beq.n	8001be6 <LL_TIM_OC_EnablePreload+0x42>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d00d      	beq.n	8001be2 <LL_TIM_OC_EnablePreload+0x3e>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d007      	beq.n	8001bde <LL_TIM_OC_EnablePreload+0x3a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd4:	d101      	bne.n	8001bda <LL_TIM_OC_EnablePreload+0x36>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e00a      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e008      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e006      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e004      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_TIM_OC_EnablePreload+0x4c>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LL_TIM_OC_EnablePreload+0x80>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	440b      	add	r3, r1
 8001c00:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <LL_TIM_OC_EnablePreload+0x84>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2308      	movs	r3, #8
 8001c10:	408b      	lsls	r3, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	08005660 	.word	0x08005660
 8001c28:	08005668 	.word	0x08005668

08001c2c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3e:	f023 0307 	bic.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_AHB1_GRP1_EnableClock>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40023800 	.word	0x40023800

08001ccc <LL_APB1_GRP1_EnableClock>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023800 	.word	0x40023800

08001cfc <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	2220      	movs	r2, #32
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fab4 	bl	8004288 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff ffcb 	bl	8001ccc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001d36:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8001d40:	2314      	movs	r3, #20
 8001d42:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001d48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4822      	ldr	r0, [pc, #136]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d50:	f001 fb2a 	bl	80033a8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001d54:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d56:	f7ff fecf 	bl	8001af8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d5e:	f7ff ff65 	bl	8001c2c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d66:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d68:	f7ff ff1c 	bl	8001ba4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8a:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d8c:	f001 fba6 	bl	80034dc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d96:	f7ff febf 	bl	8001b18 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001d9e:	f7ff ff5a 	bl	8001c56 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_TIM3_Init+0xdc>)
 8001da4:	f7ff ff6a 	bl	8001c7c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff ff77 	bl	8001c9c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001dae:	2302      	movs	r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001db2:	2302      	movs	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_TIM3_Init+0xe0>)
 8001dcc:	f001 f857 	bl	8002e7e <LL_GPIO_Init>

}
 8001dd0:	bf00      	nop
 8001dd2:	3750      	adds	r7, #80	; 0x50
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40020400 	.word	0x40020400

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_USART_Enable>:
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_USART_ConfigAsyncMode>:
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <LL_AHB1_GRP1_EnableClock>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40023800 	.word	0x40023800

08001f70 <LL_APB2_GRP1_EnableClock>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	; 0x38
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001fca:	2020      	movs	r0, #32
 8001fcc:	f7ff ffd0 	bl	8001f70 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001fd0:	2004      	movs	r0, #4
 8001fd2:	f7ff ffb5 	bl	8001f40 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001fea:	2308      	movs	r3, #8
 8001fec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4819      	ldr	r0, [pc, #100]	; (8002058 <MX_USART6_UART_Init+0xb8>)
 8001ff4:	f000 ff43 	bl	8002e7e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ff8:	f7ff fef2 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff42 	bl	8001e8c <NVIC_EncodePriority>
 8002008:	4603      	mov	r3, r0
 800200a:	4619      	mov	r1, r3
 800200c:	2047      	movs	r0, #71	; 0x47
 800200e:	f7ff ff13 	bl	8001e38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002012:	2047      	movs	r0, #71	; 0x47
 8002014:	f7ff fef2 	bl	8001dfc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002018:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800201c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800202a:	230c      	movs	r3, #12
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_USART6_UART_Init+0xbc>)
 800203e:	f001 fe9b 	bl	8003d78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <MX_USART6_UART_Init+0xbc>)
 8002044:	f7ff ff65 	bl	8001f12 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_USART6_UART_Init+0xbc>)
 800204a:	f7ff ff52 	bl	8001ef2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	3738      	adds	r7, #56	; 0x38
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020800 	.word	0x40020800
 800205c:	40011400 	.word	0x40011400

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800207c:	4c0b      	ldr	r4, [pc, #44]	; (80020ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208a:	f7ff fd23 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f002 f94f 	bl	8004330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7ff f98b 	bl	80013ac <main>
  bx  lr    
 8002096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020a4:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 80020a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80020ac:	20000274 	.word	0x20000274

080020b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_Init+0x40>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_Init+0x40>)
 80020ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x40>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f931 	bl	8002344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fbb2 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f93b 	bl	8002392 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f911 	bl	800235a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000000 	.word	0x20000000
 8002150:	20000008 	.word	0x20000008
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	20000124 	.word	0x20000124

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000124 	.word	0x20000124

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000008 	.word	0x20000008

080021e0 <__NVIC_SetPriorityGrouping>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_SetPriority>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d301      	bcc.n	8002316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002312:	2301      	movs	r3, #1
 8002314:	e00f      	b.n	8002336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <SysTick_Config+0x40>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231e:	210f      	movs	r1, #15
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f7ff ff8e 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x40>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x40>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff47 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff ff5c 	bl	8002228 <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff8e 	bl	8002298 <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5d 	bl	8002244 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffb0 	bl	8002300 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e267      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d075      	beq.n	80024b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ca:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d00c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ee:	d10b      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d05b      	beq.n	80024b4 <HAL_RCC_OscConfig+0x108>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d157      	bne.n	80024b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e242      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x74>
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a75      	ldr	r2, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e01d      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b70      	ldr	r3, [pc, #448]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6f      	ldr	r2, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6c      	ldr	r2, [pc, #432]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xb0>
 8002444:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a68      	ldr	r2, [pc, #416]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fe8c 	bl	8002180 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fe88 	bl	8002180 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e207      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xc0>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fe78 	bl	8002180 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fe74 	bl	8002180 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1f3      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b51      	ldr	r3, [pc, #324]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0xe8>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d063      	beq.n	800258a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1c7      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4937      	ldr	r1, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e03a      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_OscConfig+0x244>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7ff fe2d 	bl	8002180 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7ff fe29 	bl	8002180 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1a8      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x244>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff fe0c 	bl	8002180 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256c:	f7ff fe08 	bl	8002180 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e187      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d036      	beq.n	8002604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x248>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7ff fdec 	bl	8002180 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff fde8 	bl	8002180 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e167      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_OscConfig+0x240>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x200>
 80025ca:	e01b      	b.n	8002604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x248>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7ff fdd5 	bl	8002180 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	e00e      	b.n	80025f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7ff fdd1 	bl	8002180 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d907      	bls.n	80025f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e150      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	42470000 	.word	0x42470000
 80025f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ea      	bne.n	80025da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8097 	beq.w	8002740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4b81      	ldr	r3, [pc, #516]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a7c      	ldr	r2, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x470>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b7a      	ldr	r3, [pc, #488]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b77      	ldr	r3, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x474>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	4b74      	ldr	r3, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x474>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a73      	ldr	r2, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x474>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7ff fd91 	bl	8002180 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7ff fd8d 	bl	8002180 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e10c      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_OscConfig+0x474>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x2ea>
 8002688:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a63      	ldr	r2, [pc, #396]	; (800281c <HAL_RCC_OscConfig+0x470>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x324>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x30c>
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5e      	ldr	r2, [pc, #376]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a5b      	ldr	r2, [pc, #364]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x324>
 80026b8:	4b58      	ldr	r3, [pc, #352]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	4b55      	ldr	r3, [pc, #340]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a54      	ldr	r2, [pc, #336]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff fd52 	bl	8002180 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7ff fd4e 	bl	8002180 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0cb      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	4b49      	ldr	r3, [pc, #292]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ee      	beq.n	80026e0 <HAL_RCC_OscConfig+0x334>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff fd3c 	bl	8002180 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7ff fd38 	bl	8002180 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0b5      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ee      	bne.n	800270c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a38      	ldr	r2, [pc, #224]	; (800281c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a1 	beq.w	800288c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x470>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d05c      	beq.n	8002810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d141      	bne.n	80027e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_OscConfig+0x478>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fd0c 	bl	8002180 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff fd08 	bl	8002180 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e087      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	019b      	lsls	r3, r3, #6
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	3b01      	subs	r3, #1
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	491b      	ldr	r1, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCC_OscConfig+0x478>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff fce1 	bl	8002180 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7ff fcdd 	bl	8002180 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e05c      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_OscConfig+0x470>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x416>
 80027e0:	e054      	b.n	800288c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fcca 	bl	8002180 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7ff fcc6 	bl	8002180 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e045      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
 800280e:	e03d      	b.n	800288c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e038      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
 8002824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x4ec>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d028      	beq.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d121      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11a      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800285e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0cc      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d90c      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d044      	beq.n	80029bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d119      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002956:	2b03      	cmp	r3, #3
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e067      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4934      	ldr	r1, [pc, #208]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800298c:	f7ff fbf8 	bl	8002180 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff fbf4 	bl	8002180 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e04f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20c      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	490a      	ldr	r1, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb58 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08005648 	.word	0x08005648
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b094      	sub	sp, #80	; 0x50
 8002a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	647b      	str	r3, [r7, #68]	; 0x44
 8002a74:	2300      	movs	r3, #0
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a78:	2300      	movs	r3, #0
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a80:	4b79      	ldr	r3, [pc, #484]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	f200 80e1 	bhi.w	8002c54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9a:	e0db      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002aa0:	e0db      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa2:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa6:	e0d8      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	0159      	lsls	r1, r3, #5
 8002ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aec:	0150      	lsls	r0, r2, #5
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4621      	mov	r1, r4
 8002af4:	1a51      	subs	r1, r2, r1
 8002af6:	6139      	str	r1, [r7, #16]
 8002af8:	4629      	mov	r1, r5
 8002afa:	eb63 0301 	sbc.w	r3, r3, r1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	018b      	lsls	r3, r1, #6
 8002b10:	4651      	mov	r1, sl
 8002b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b16:	4651      	mov	r1, sl
 8002b18:	018a      	lsls	r2, r1, #6
 8002b1a:	4651      	mov	r1, sl
 8002b1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b20:	4659      	mov	r1, fp
 8002b22:	eb63 0901 	sbc.w	r9, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3a:	4690      	mov	r8, r2
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb18 0303 	adds.w	r3, r8, r3
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	462b      	mov	r3, r5
 8002b48:	eb49 0303 	adc.w	r3, r9, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	024b      	lsls	r3, r1, #9
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b64:	4621      	mov	r1, r4
 8002b66:	024a      	lsls	r2, r1, #9
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6e:	2200      	movs	r2, #0
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b78:	f7fd fb7a 	bl	8000270 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b84:	e058      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4611      	mov	r1, r2
 8002b92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	0159      	lsls	r1, r3, #5
 8002bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb2:	0150      	lsls	r0, r2, #5
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4641      	mov	r1, r8
 8002bba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bdc:	eb63 050b 	sbc.w	r5, r3, fp
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	00eb      	lsls	r3, r5, #3
 8002bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	18e3      	adds	r3, r4, r3
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb45 0303 	adc.w	r3, r5, r3
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c22:	2200      	movs	r2, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	61fa      	str	r2, [r7, #28]
 8002c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2c:	f7fd fb20 	bl	8000270 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3750      	adds	r7, #80	; 0x50
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <LL_GPIO_SetPinMode>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	613b      	str	r3, [r7, #16]
  return result;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	61bb      	str	r3, [r7, #24]
  return result;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_GPIO_SetPinOutputType>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_GPIO_SetPinSpeed>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b089      	sub	sp, #36	; 0x24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	613b      	str	r3, [r7, #16]
  return result;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2103      	movs	r1, #3
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	401a      	ands	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_GPIO_SetPinPull>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	613b      	str	r3, [r7, #16]
  return result;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2103      	movs	r1, #3
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	60da      	str	r2, [r3, #12]
}
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_GPIO_SetAFPin_0_7>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b089      	sub	sp, #36	; 0x24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	613b      	str	r3, [r7, #16]
  return result;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	210f      	movs	r1, #15
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]
}
 8002e10:	bf00      	nop
 8002e12:	3724      	adds	r7, #36	; 0x24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_GPIO_SetAFPin_8_15>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	613b      	str	r3, [r7, #16]
  return result;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	210f      	movs	r1, #15
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b088      	sub	sp, #32
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	613b      	str	r3, [r7, #16]
  return result;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ea8:	e050      	b.n	8002f4c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d042      	beq.n	8002f46 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d003      	beq.n	8002ed0 <LL_GPIO_Init+0x52>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d10d      	bne.n	8002eec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff12 	bl	8002d02 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	69b9      	ldr	r1, [r7, #24]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fef3 	bl	8002cd2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff33 	bl	8002d60 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d11a      	bne.n	8002f38 <LL_GPIO_Init+0xba>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
  return result;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d807      	bhi.n	8002f2a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff4b 	bl	8002dbe <LL_GPIO_SetAFPin_0_7>
 8002f28:	e006      	b.n	8002f38 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff72 	bl	8002e1c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fe97 	bl	8002c74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1a7      	bne.n	8002eaa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <LL_RCC_GetSysClkSource+0x18>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <LL_RCC_GetAHBPrescaler+0x18>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800

08002f9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <LL_RCC_PLL_GetMainSource+0x18>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <LL_RCC_PLL_GetN+0x18>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40023800 	.word	0x40023800

0800300c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <LL_RCC_PLL_GetP+0x18>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <LL_RCC_PLL_GetDivider+0x18>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800304c:	f000 f820 	bl	8003090 <RCC_GetSystemClockFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f840 	bl	80030e0 <RCC_GetHCLKClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f84e 	bl	800310c <RCC_GetPCLK1ClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f85a 	bl	8003134 <RCC_GetPCLK2ClockFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800309a:	f7ff ff63 	bl	8002f64 <LL_RCC_GetSysClkSource>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d00c      	beq.n	80030be <RCC_GetSystemClockFreq+0x2e>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d80f      	bhi.n	80030c8 <RCC_GetSystemClockFreq+0x38>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <RCC_GetSystemClockFreq+0x22>
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d003      	beq.n	80030b8 <RCC_GetSystemClockFreq+0x28>
 80030b0:	e00a      	b.n	80030c8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <RCC_GetSystemClockFreq+0x48>)
 80030b4:	607b      	str	r3, [r7, #4]
      break;
 80030b6:	e00a      	b.n	80030ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <RCC_GetSystemClockFreq+0x4c>)
 80030ba:	607b      	str	r3, [r7, #4]
      break;
 80030bc:	e007      	b.n	80030ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80030be:	2008      	movs	r0, #8
 80030c0:	f000 f84c 	bl	800315c <RCC_PLL_GetFreqDomain_SYS>
 80030c4:	6078      	str	r0, [r7, #4]
      break;
 80030c6:	e002      	b.n	80030ce <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <RCC_GetSystemClockFreq+0x48>)
 80030ca:	607b      	str	r3, [r7, #4]
      break;
 80030cc:	bf00      	nop
  }

  return frequency;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80030e8:	f7ff ff4a 	bl	8002f80 <LL_RCC_GetAHBPrescaler>
 80030ec:	4603      	mov	r3, r0
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <RCC_GetHCLKClockFreq+0x28>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	40d3      	lsrs	r3, r2
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08005648 	.word	0x08005648

0800310c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003114:	f7ff ff42 	bl	8002f9c <LL_RCC_GetAPB1Prescaler>
 8003118:	4603      	mov	r3, r0
 800311a:	0a9b      	lsrs	r3, r3, #10
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <RCC_GetPCLK1ClockFreq+0x24>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	40d3      	lsrs	r3, r2
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08005658 	.word	0x08005658

08003134 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800313c:	f7ff ff3c 	bl	8002fb8 <LL_RCC_GetAPB2Prescaler>
 8003140:	4603      	mov	r3, r0
 8003142:	0b5b      	lsrs	r3, r3, #13
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <RCC_GetPCLK2ClockFreq+0x24>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	40d3      	lsrs	r3, r2
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	08005658 	.word	0x08005658

0800315c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003170:	f7ff ff30 	bl	8002fd4 <LL_RCC_PLL_GetMainSource>
 8003174:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003182:	d003      	beq.n	800318c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003184:	e005      	b.n	8003192 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003188:	617b      	str	r3, [r7, #20]
      break;
 800318a:	e005      	b.n	8003198 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800318e:	617b      	str	r3, [r7, #20]
      break;
 8003190:	e002      	b.n	8003198 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003194:	617b      	str	r3, [r7, #20]
      break;
 8003196:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d113      	bne.n	80031c6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800319e:	f7ff ff43 	bl	8003028 <LL_RCC_PLL_GetDivider>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fbb3 f4f2 	udiv	r4, r3, r2
 80031aa:	f7ff ff21 	bl	8002ff0 <LL_RCC_PLL_GetN>
 80031ae:	4603      	mov	r3, r0
 80031b0:	fb03 f404 	mul.w	r4, r3, r4
 80031b4:	f7ff ff2a 	bl	800300c <LL_RCC_PLL_GetP>
 80031b8:	4603      	mov	r3, r0
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	3301      	adds	r3, #1
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80031c4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80031c6:	693b      	ldr	r3, [r7, #16]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <LL_SPI_IsEnabled>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d101      	bne.n	80031f0 <LL_SPI_IsEnabled+0x18>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <LL_SPI_IsEnabled+0x1a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_SPI_SetCRCPolynomial>:
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ffd3 	bl	80031d8 <LL_SPI_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d139      	bne.n	80032ac <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003240:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	6811      	ldr	r1, [r2, #0]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	6852      	ldr	r2, [r2, #4]
 800324c:	4311      	orrs	r1, r2
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	4311      	orrs	r1, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	68d2      	ldr	r2, [r2, #12]
 8003258:	4311      	orrs	r1, r2
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6912      	ldr	r2, [r2, #16]
 800325e:	4311      	orrs	r1, r2
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	6952      	ldr	r2, [r2, #20]
 8003264:	4311      	orrs	r1, r2
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	6992      	ldr	r2, [r2, #24]
 800326a:	4311      	orrs	r1, r2
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	69d2      	ldr	r2, [r2, #28]
 8003270:	4311      	orrs	r1, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6a12      	ldr	r2, [r2, #32]
 8003276:	430a      	orrs	r2, r1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f023 0204 	bic.w	r2, r3, #4
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329a:	d105      	bne.n	80032a8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffab 	bl	80031fe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	61da      	str	r2, [r3, #28]
  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <LL_TIM_SetPrescaler>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_TIM_SetAutoReload>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_TIM_SetRepetitionCounter>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_TIM_OC_SetCompareCH1>:
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_TIM_OC_SetCompareCH2>:
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_TIM_OC_SetCompareCH3>:
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_TIM_OC_SetCompareCH4>:
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <LL_TIM_Init+0x108>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <LL_TIM_Init+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d00f      	beq.n	80033e8 <LL_TIM_Init+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <LL_TIM_Init+0x10c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <LL_TIM_Init+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a39      	ldr	r2, [pc, #228]	; (80034b8 <LL_TIM_Init+0x110>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <LL_TIM_Init+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a38      	ldr	r2, [pc, #224]	; (80034bc <LL_TIM_Init+0x114>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <LL_TIM_Init+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a37      	ldr	r2, [pc, #220]	; (80034c0 <LL_TIM_Init+0x118>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <LL_TIM_Init+0x108>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02b      	beq.n	8003456 <LL_TIM_Init+0xae>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d027      	beq.n	8003456 <LL_TIM_Init+0xae>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <LL_TIM_Init+0x10c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d023      	beq.n	8003456 <LL_TIM_Init+0xae>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <LL_TIM_Init+0x110>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01f      	beq.n	8003456 <LL_TIM_Init+0xae>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a28      	ldr	r2, [pc, #160]	; (80034bc <LL_TIM_Init+0x114>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01b      	beq.n	8003456 <LL_TIM_Init+0xae>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <LL_TIM_Init+0x118>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d017      	beq.n	8003456 <LL_TIM_Init+0xae>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <LL_TIM_Init+0x11c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <LL_TIM_Init+0xae>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <LL_TIM_Init+0x120>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00f      	beq.n	8003456 <LL_TIM_Init+0xae>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <LL_TIM_Init+0x124>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00b      	beq.n	8003456 <LL_TIM_Init+0xae>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <LL_TIM_Init+0x128>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <LL_TIM_Init+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <LL_TIM_Init+0x12c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <LL_TIM_Init+0xae>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a21      	ldr	r2, [pc, #132]	; (80034d8 <LL_TIM_Init+0x130>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d106      	bne.n	8003464 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff34 	bl	80032de <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff20 	bl	80032c2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <LL_TIM_Init+0x108>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <LL_TIM_Init+0xea>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <LL_TIM_Init+0x118>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d105      	bne.n	800349e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff2e 	bl	80032fa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff71 	bl	8003386 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40010400 	.word	0x40010400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800
 80034d0:	40001800 	.word	0x40001800
 80034d4:	40001c00 	.word	0x40001c00
 80034d8:	40002000 	.word	0x40002000

080034dc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	d027      	beq.n	8003544 <LL_TIM_OC_Init+0x68>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d82a      	bhi.n	8003552 <LL_TIM_OC_Init+0x76>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d018      	beq.n	8003536 <LL_TIM_OC_Init+0x5a>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d822      	bhi.n	8003552 <LL_TIM_OC_Init+0x76>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <LL_TIM_OC_Init+0x3e>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d007      	beq.n	8003528 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003518:	e01b      	b.n	8003552 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f81f 	bl	8003560 <OC1Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	e015      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f884 	bl	8003638 <OC2Config>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]
      break;
 8003534:	e00e      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8ed 	bl	8003718 <OC3Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]
      break;
 8003542:	e007      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f956 	bl	80037f8 <OC4Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]
      break;
 8003550:	e000      	b.n	8003554 <LL_TIM_OC_Init+0x78>
      break;
 8003552:	bf00      	nop
  }

  return result;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0202 	bic.w	r2, r3, #2
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <OC1Config+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <OC1Config+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <OC1Config+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11e      	bne.n	8003608 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0208 	bic.w	r2, r3, #8
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0204 	bic.w	r2, r3, #4
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe7b 	bl	8003316 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0220 	bic.w	r2, r3, #32
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <OC2Config+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <OC2Config+0x70>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <OC2Config+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11f      	bne.n	80036e8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fe19 	bl	8003332 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <OC3Config+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <OC3Config+0x6e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <OC3Config+0xdc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d11f      	bne.n	80037c6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fdb8 	bl	800334e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <OC4Config+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <OC4Config+0x70>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <OC4Config+0xac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d107      	bne.n	8003878 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fd6d 	bl	800336a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400

080038a8 <LL_USART_IsEnabled>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_USART_SetStopBitsLength>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_USART_SetHWFlowCtrl>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	615a      	str	r2, [r3, #20]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_USART_SetBaudRate>:
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b0c0      	sub	sp, #256	; 0x100
 8003922:	af00      	add	r7, sp, #0
 8003924:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003928:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800392c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003930:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	f040 810c 	bne.w	8003b58 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003940:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800394a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800394e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	1891      	adds	r1, r2, r2
 8003958:	6639      	str	r1, [r7, #96]	; 0x60
 800395a:	415b      	adcs	r3, r3
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
 800395e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003962:	4621      	mov	r1, r4
 8003964:	eb12 0801 	adds.w	r8, r2, r1
 8003968:	4629      	mov	r1, r5
 800396a:	eb43 0901 	adc.w	r9, r3, r1
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800397e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003982:	4690      	mov	r8, r2
 8003984:	4699      	mov	r9, r3
 8003986:	4623      	mov	r3, r4
 8003988:	eb18 0303 	adds.w	r3, r8, r3
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003990:	462b      	mov	r3, r5
 8003992:	eb49 0303 	adc.w	r3, r9, r3
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800399a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800399e:	2200      	movs	r2, #0
 80039a0:	469a      	mov	sl, r3
 80039a2:	4693      	mov	fp, r2
 80039a4:	eb1a 030a 	adds.w	r3, sl, sl
 80039a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039aa:	eb4b 030b 	adc.w	r3, fp, fp
 80039ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039b8:	f7fc fc5a 	bl	8000270 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <LL_USART_SetBaudRate+0x238>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	b29c      	uxth	r4, r3
 80039ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039dc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	6539      	str	r1, [r7, #80]	; 0x50
 80039e8:	415b      	adcs	r3, r3
 80039ea:	657b      	str	r3, [r7, #84]	; 0x54
 80039ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a3a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003a3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a42:	460b      	mov	r3, r1
 8003a44:	18db      	adds	r3, r3, r3
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
 8003a48:	4613      	mov	r3, r2
 8003a4a:	eb42 0303 	adc.w	r3, r2, r3
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a54:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003a58:	f7fc fc0a 	bl	8000270 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4611      	mov	r1, r2
 8003a62:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <LL_USART_SetBaudRate+0x238>)
 8003a64:	fba3 2301 	umull	r2, r3, r3, r1
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2264      	movs	r2, #100	; 0x64
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	1acb      	subs	r3, r1, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <LL_USART_SetBaudRate+0x238>)
 8003a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4423      	add	r3, r4
 8003a8e:	b29c      	uxth	r4, r3
 8003a90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a9a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a9e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003aa2:	4642      	mov	r2, r8
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	1891      	adds	r1, r2, r2
 8003aa8:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	1851      	adds	r1, r2, r1
 8003ab6:	6339      	str	r1, [r7, #48]	; 0x30
 8003ab8:	4649      	mov	r1, r9
 8003aba:	414b      	adcs	r3, r1
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aca:	4659      	mov	r1, fp
 8003acc:	00cb      	lsls	r3, r1, #3
 8003ace:	4651      	mov	r1, sl
 8003ad0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	00ca      	lsls	r2, r1, #3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	4642      	mov	r2, r8
 8003ae0:	189b      	adds	r3, r3, r2
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	460a      	mov	r2, r1
 8003aea:	eb42 0303 	adc.w	r3, r2, r3
 8003aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003af2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003afc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b04:	460b      	mov	r3, r1
 8003b06:	18db      	adds	r3, r3, r3
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b16:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003b1a:	f7fc fba9 	bl	8000270 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <LL_USART_SetBaudRate+0x238>)
 8003b24:	fba3 1302 	umull	r1, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	2164      	movs	r1, #100	; 0x64
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3332      	adds	r3, #50	; 0x32
 8003b36:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <LL_USART_SetBaudRate+0x238>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4423      	add	r3, r4
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b50:	609a      	str	r2, [r3, #8]
}
 8003b52:	e108      	b.n	8003d66 <LL_USART_SetBaudRate+0x44a>
 8003b54:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b62:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b66:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003b6a:	4642      	mov	r2, r8
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	1891      	adds	r1, r2, r2
 8003b70:	6239      	str	r1, [r7, #32]
 8003b72:	415b      	adcs	r3, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	1854      	adds	r4, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0501 	adc.w	r5, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	eb45 0303 	adc.w	r3, r5, r3
 8003ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4621      	mov	r1, r4
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4621      	mov	r1, r4
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003bd6:	f7fc fb4b 	bl	8000270 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <LL_USART_SetBaudRate+0x458>)
 8003be0:	fba3 2302 	umull	r2, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003bfe:	4642      	mov	r2, r8
 8003c00:	464b      	mov	r3, r9
 8003c02:	1891      	adds	r1, r2, r2
 8003c04:	61b9      	str	r1, [r7, #24]
 8003c06:	415b      	adcs	r3, r3
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0e:	4641      	mov	r1, r8
 8003c10:	1851      	adds	r1, r2, r1
 8003c12:	6139      	str	r1, [r7, #16]
 8003c14:	4649      	mov	r1, r9
 8003c16:	414b      	adcs	r3, r1
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c26:	4659      	mov	r1, fp
 8003c28:	00cb      	lsls	r3, r1, #3
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c30:	4651      	mov	r1, sl
 8003c32:	00ca      	lsls	r2, r1, #3
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	189b      	adds	r3, r3, r2
 8003c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c42:	464b      	mov	r3, r9
 8003c44:	460a      	mov	r2, r1
 8003c46:	eb42 0303 	adc.w	r3, r2, r3
 8003c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003c68:	4649      	mov	r1, r9
 8003c6a:	008b      	lsls	r3, r1, #2
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c72:	4641      	mov	r1, r8
 8003c74:	008a      	lsls	r2, r1, #2
 8003c76:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003c7a:	f7fc faf9 	bl	8000270 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <LL_USART_SetBaudRate+0x458>)
 8003c86:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2264      	movs	r2, #100	; 0x64
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	1acb      	subs	r3, r1, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a36      	ldr	r2, [pc, #216]	; (8003d74 <LL_USART_SetBaudRate+0x458>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4423      	add	r3, r4
 8003caa:	b29c      	uxth	r4, r3
 8003cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cb6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cba:	4642      	mov	r2, r8
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	1891      	adds	r1, r2, r2
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	415b      	adcs	r3, r3
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cca:	4641      	mov	r1, r8
 8003ccc:	1851      	adds	r1, r2, r1
 8003cce:	6039      	str	r1, [r7, #0]
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	414b      	adcs	r3, r1
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	00cb      	lsls	r3, r1, #3
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cec:	4651      	mov	r1, sl
 8003cee:	00ca      	lsls	r2, r1, #3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4642      	mov	r2, r8
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	460a      	mov	r2, r1
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	677b      	str	r3, [r7, #116]	; 0x74
 8003d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	008b      	lsls	r3, r1, #2
 8003d20:	4641      	mov	r1, r8
 8003d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d26:	4641      	mov	r1, r8
 8003d28:	008a      	lsls	r2, r1, #2
 8003d2a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d2e:	f7fc fa9f 	bl	8000270 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <LL_USART_SetBaudRate+0x458>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	2164      	movs	r1, #100	; 0x64
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <LL_USART_SetBaudRate+0x458>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4423      	add	r3, r4
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	609a      	str	r2, [r3, #8]
}
 8003d66:	bf00      	nop
 8003d68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	51eb851f 	.word	0x51eb851f

08003d78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fd8c 	bl	80038a8 <LL_USART_IsEnabled>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15e      	bne.n	8003e54 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d9e:	f023 030c 	bic.w	r3, r3, #12
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	6851      	ldr	r1, [r2, #4]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6912      	ldr	r2, [r2, #16]
 8003db0:	4311      	orrs	r1, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6992      	ldr	r2, [r2, #24]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fd83 	bl	80038d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fd90 	bl	80038f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f932 	bl	8003044 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <LL_USART_Init+0xe8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d102      	bne.n	8003dee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e021      	b.n	8003e32 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <LL_USART_Init+0xec>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d102      	bne.n	8003dfc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e01a      	b.n	8003e32 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <LL_USART_Init+0xf0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d102      	bne.n	8003e0a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e013      	b.n	8003e32 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <LL_USART_Init+0xf4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d102      	bne.n	8003e18 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e00c      	b.n	8003e32 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <LL_USART_Init+0xf8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d102      	bne.n	8003e26 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e005      	b.n	8003e32 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <LL_USART_Init+0xfc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003e40:	2300      	movs	r3, #0
 8003e42:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fd64 	bl	800391c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40004800 	.word	0x40004800
 8003e6c:	40011400 	.word	0x40011400
 8003e70:	40004c00 	.word	0x40004c00
 8003e74:	40005000 	.word	0x40005000

08003e78 <std>:
 8003e78:	2300      	movs	r3, #0
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e86:	6083      	str	r3, [r0, #8]
 8003e88:	8181      	strh	r1, [r0, #12]
 8003e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e8c:	81c2      	strh	r2, [r0, #14]
 8003e8e:	6183      	str	r3, [r0, #24]
 8003e90:	4619      	mov	r1, r3
 8003e92:	2208      	movs	r2, #8
 8003e94:	305c      	adds	r0, #92	; 0x5c
 8003e96:	f000 f9f7 	bl	8004288 <memset>
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <std+0x58>)
 8003e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <std+0x5c>)
 8003ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <std+0x60>)
 8003ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <std+0x64>)
 8003ea8:	6323      	str	r3, [r4, #48]	; 0x30
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <std+0x68>)
 8003eac:	6224      	str	r4, [r4, #32]
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d006      	beq.n	8003ec0 <std+0x48>
 8003eb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003eb6:	4294      	cmp	r4, r2
 8003eb8:	d002      	beq.n	8003ec0 <std+0x48>
 8003eba:	33d0      	adds	r3, #208	; 0xd0
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d105      	bne.n	8003ecc <std+0x54>
 8003ec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec8:	f000 ba56 	b.w	8004378 <__retarget_lock_init_recursive>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	080040d9 	.word	0x080040d9
 8003ed4:	080040fb 	.word	0x080040fb
 8003ed8:	08004133 	.word	0x08004133
 8003edc:	08004157 	.word	0x08004157
 8003ee0:	20000128 	.word	0x20000128

08003ee4 <stdio_exit_handler>:
 8003ee4:	4a02      	ldr	r2, [pc, #8]	; (8003ef0 <stdio_exit_handler+0xc>)
 8003ee6:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <stdio_exit_handler+0x10>)
 8003ee8:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <stdio_exit_handler+0x14>)
 8003eea:	f000 b869 	b.w	8003fc0 <_fwalk_sglue>
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c
 8003ef4:	08004c25 	.word	0x08004c25
 8003ef8:	20000018 	.word	0x20000018

08003efc <cleanup_stdio>:
 8003efc:	6841      	ldr	r1, [r0, #4]
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <cleanup_stdio+0x34>)
 8003f00:	4299      	cmp	r1, r3
 8003f02:	b510      	push	{r4, lr}
 8003f04:	4604      	mov	r4, r0
 8003f06:	d001      	beq.n	8003f0c <cleanup_stdio+0x10>
 8003f08:	f000 fe8c 	bl	8004c24 <_fflush_r>
 8003f0c:	68a1      	ldr	r1, [r4, #8]
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <cleanup_stdio+0x38>)
 8003f10:	4299      	cmp	r1, r3
 8003f12:	d002      	beq.n	8003f1a <cleanup_stdio+0x1e>
 8003f14:	4620      	mov	r0, r4
 8003f16:	f000 fe85 	bl	8004c24 <_fflush_r>
 8003f1a:	68e1      	ldr	r1, [r4, #12]
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <cleanup_stdio+0x3c>)
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	d004      	beq.n	8003f2c <cleanup_stdio+0x30>
 8003f22:	4620      	mov	r0, r4
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f000 be7c 	b.w	8004c24 <_fflush_r>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000128 	.word	0x20000128
 8003f34:	20000190 	.word	0x20000190
 8003f38:	200001f8 	.word	0x200001f8

08003f3c <global_stdio_init.part.0>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <global_stdio_init.part.0+0x30>)
 8003f40:	4c0b      	ldr	r4, [pc, #44]	; (8003f70 <global_stdio_init.part.0+0x34>)
 8003f42:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <global_stdio_init.part.0+0x38>)
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4620      	mov	r0, r4
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	f7ff ff94 	bl	8003e78 <std>
 8003f50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f54:	2201      	movs	r2, #1
 8003f56:	2109      	movs	r1, #9
 8003f58:	f7ff ff8e 	bl	8003e78 <std>
 8003f5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f60:	2202      	movs	r2, #2
 8003f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f66:	2112      	movs	r1, #18
 8003f68:	f7ff bf86 	b.w	8003e78 <std>
 8003f6c:	20000260 	.word	0x20000260
 8003f70:	20000128 	.word	0x20000128
 8003f74:	08003ee5 	.word	0x08003ee5

08003f78 <__sfp_lock_acquire>:
 8003f78:	4801      	ldr	r0, [pc, #4]	; (8003f80 <__sfp_lock_acquire+0x8>)
 8003f7a:	f000 b9fe 	b.w	800437a <__retarget_lock_acquire_recursive>
 8003f7e:	bf00      	nop
 8003f80:	20000269 	.word	0x20000269

08003f84 <__sfp_lock_release>:
 8003f84:	4801      	ldr	r0, [pc, #4]	; (8003f8c <__sfp_lock_release+0x8>)
 8003f86:	f000 b9f9 	b.w	800437c <__retarget_lock_release_recursive>
 8003f8a:	bf00      	nop
 8003f8c:	20000269 	.word	0x20000269

08003f90 <__sinit>:
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4604      	mov	r4, r0
 8003f94:	f7ff fff0 	bl	8003f78 <__sfp_lock_acquire>
 8003f98:	6a23      	ldr	r3, [r4, #32]
 8003f9a:	b11b      	cbz	r3, 8003fa4 <__sinit+0x14>
 8003f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa0:	f7ff bff0 	b.w	8003f84 <__sfp_lock_release>
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <__sinit+0x28>)
 8003fa6:	6223      	str	r3, [r4, #32]
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <__sinit+0x2c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f5      	bne.n	8003f9c <__sinit+0xc>
 8003fb0:	f7ff ffc4 	bl	8003f3c <global_stdio_init.part.0>
 8003fb4:	e7f2      	b.n	8003f9c <__sinit+0xc>
 8003fb6:	bf00      	nop
 8003fb8:	08003efd 	.word	0x08003efd
 8003fbc:	20000260 	.word	0x20000260

08003fc0 <_fwalk_sglue>:
 8003fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	4688      	mov	r8, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	2600      	movs	r6, #0
 8003fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003fd4:	d505      	bpl.n	8003fe2 <_fwalk_sglue+0x22>
 8003fd6:	6824      	ldr	r4, [r4, #0]
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	d1f7      	bne.n	8003fcc <_fwalk_sglue+0xc>
 8003fdc:	4630      	mov	r0, r6
 8003fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d907      	bls.n	8003ff8 <_fwalk_sglue+0x38>
 8003fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fec:	3301      	adds	r3, #1
 8003fee:	d003      	beq.n	8003ff8 <_fwalk_sglue+0x38>
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c0      	blx	r8
 8003ff6:	4306      	orrs	r6, r0
 8003ff8:	3568      	adds	r5, #104	; 0x68
 8003ffa:	e7e9      	b.n	8003fd0 <_fwalk_sglue+0x10>

08003ffc <iprintf>:
 8003ffc:	b40f      	push	{r0, r1, r2, r3}
 8003ffe:	b507      	push	{r0, r1, r2, lr}
 8004000:	4906      	ldr	r1, [pc, #24]	; (800401c <iprintf+0x20>)
 8004002:	ab04      	add	r3, sp, #16
 8004004:	6808      	ldr	r0, [r1, #0]
 8004006:	f853 2b04 	ldr.w	r2, [r3], #4
 800400a:	6881      	ldr	r1, [r0, #8]
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	f000 fad9 	bl	80045c4 <_vfiprintf_r>
 8004012:	b003      	add	sp, #12
 8004014:	f85d eb04 	ldr.w	lr, [sp], #4
 8004018:	b004      	add	sp, #16
 800401a:	4770      	bx	lr
 800401c:	20000064 	.word	0x20000064

08004020 <_puts_r>:
 8004020:	6a03      	ldr	r3, [r0, #32]
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	6884      	ldr	r4, [r0, #8]
 8004026:	4605      	mov	r5, r0
 8004028:	460e      	mov	r6, r1
 800402a:	b90b      	cbnz	r3, 8004030 <_puts_r+0x10>
 800402c:	f7ff ffb0 	bl	8003f90 <__sinit>
 8004030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d405      	bmi.n	8004042 <_puts_r+0x22>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	0598      	lsls	r0, r3, #22
 800403a:	d402      	bmi.n	8004042 <_puts_r+0x22>
 800403c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800403e:	f000 f99c 	bl	800437a <__retarget_lock_acquire_recursive>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	0719      	lsls	r1, r3, #28
 8004046:	d513      	bpl.n	8004070 <_puts_r+0x50>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	b18b      	cbz	r3, 8004070 <_puts_r+0x50>
 800404c:	3e01      	subs	r6, #1
 800404e:	68a3      	ldr	r3, [r4, #8]
 8004050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004054:	3b01      	subs	r3, #1
 8004056:	60a3      	str	r3, [r4, #8]
 8004058:	b9e9      	cbnz	r1, 8004096 <_puts_r+0x76>
 800405a:	2b00      	cmp	r3, #0
 800405c:	da2e      	bge.n	80040bc <_puts_r+0x9c>
 800405e:	4622      	mov	r2, r4
 8004060:	210a      	movs	r1, #10
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f87b 	bl	800415e <__swbuf_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d007      	beq.n	800407c <_puts_r+0x5c>
 800406c:	250a      	movs	r5, #10
 800406e:	e007      	b.n	8004080 <_puts_r+0x60>
 8004070:	4621      	mov	r1, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f8b0 	bl	80041d8 <__swsetup_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	d0e7      	beq.n	800404c <_puts_r+0x2c>
 800407c:	f04f 35ff 	mov.w	r5, #4294967295
 8004080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004082:	07da      	lsls	r2, r3, #31
 8004084:	d405      	bmi.n	8004092 <_puts_r+0x72>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	059b      	lsls	r3, r3, #22
 800408a:	d402      	bmi.n	8004092 <_puts_r+0x72>
 800408c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800408e:	f000 f975 	bl	800437c <__retarget_lock_release_recursive>
 8004092:	4628      	mov	r0, r5
 8004094:	bd70      	pop	{r4, r5, r6, pc}
 8004096:	2b00      	cmp	r3, #0
 8004098:	da04      	bge.n	80040a4 <_puts_r+0x84>
 800409a:	69a2      	ldr	r2, [r4, #24]
 800409c:	429a      	cmp	r2, r3
 800409e:	dc06      	bgt.n	80040ae <_puts_r+0x8e>
 80040a0:	290a      	cmp	r1, #10
 80040a2:	d004      	beq.n	80040ae <_puts_r+0x8e>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	6022      	str	r2, [r4, #0]
 80040aa:	7019      	strb	r1, [r3, #0]
 80040ac:	e7cf      	b.n	800404e <_puts_r+0x2e>
 80040ae:	4622      	mov	r2, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 f854 	bl	800415e <__swbuf_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	d1c9      	bne.n	800404e <_puts_r+0x2e>
 80040ba:	e7df      	b.n	800407c <_puts_r+0x5c>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	250a      	movs	r5, #10
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	701d      	strb	r5, [r3, #0]
 80040c6:	e7db      	b.n	8004080 <_puts_r+0x60>

080040c8 <puts>:
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <puts+0xc>)
 80040ca:	4601      	mov	r1, r0
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	f7ff bfa7 	b.w	8004020 <_puts_r>
 80040d2:	bf00      	nop
 80040d4:	20000064 	.word	0x20000064

080040d8 <__sread>:
 80040d8:	b510      	push	{r4, lr}
 80040da:	460c      	mov	r4, r1
 80040dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e0:	f000 f8fc 	bl	80042dc <_read_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	bfab      	itete	ge
 80040e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040ea:	89a3      	ldrhlt	r3, [r4, #12]
 80040ec:	181b      	addge	r3, r3, r0
 80040ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040f2:	bfac      	ite	ge
 80040f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80040f6:	81a3      	strhlt	r3, [r4, #12]
 80040f8:	bd10      	pop	{r4, pc}

080040fa <__swrite>:
 80040fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fe:	461f      	mov	r7, r3
 8004100:	898b      	ldrh	r3, [r1, #12]
 8004102:	05db      	lsls	r3, r3, #23
 8004104:	4605      	mov	r5, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4616      	mov	r6, r2
 800410a:	d505      	bpl.n	8004118 <__swrite+0x1e>
 800410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	f000 f8d0 	bl	80042b8 <_lseek_r>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	4632      	mov	r2, r6
 8004126:	463b      	mov	r3, r7
 8004128:	4628      	mov	r0, r5
 800412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	f000 b8e7 	b.w	8004300 <_write_r>

08004132 <__sseek>:
 8004132:	b510      	push	{r4, lr}
 8004134:	460c      	mov	r4, r1
 8004136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413a:	f000 f8bd 	bl	80042b8 <_lseek_r>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	bf15      	itete	ne
 8004144:	6560      	strne	r0, [r4, #84]	; 0x54
 8004146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800414a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800414e:	81a3      	strheq	r3, [r4, #12]
 8004150:	bf18      	it	ne
 8004152:	81a3      	strhne	r3, [r4, #12]
 8004154:	bd10      	pop	{r4, pc}

08004156 <__sclose>:
 8004156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415a:	f000 b89d 	b.w	8004298 <_close_r>

0800415e <__swbuf_r>:
 800415e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004160:	460e      	mov	r6, r1
 8004162:	4614      	mov	r4, r2
 8004164:	4605      	mov	r5, r0
 8004166:	b118      	cbz	r0, 8004170 <__swbuf_r+0x12>
 8004168:	6a03      	ldr	r3, [r0, #32]
 800416a:	b90b      	cbnz	r3, 8004170 <__swbuf_r+0x12>
 800416c:	f7ff ff10 	bl	8003f90 <__sinit>
 8004170:	69a3      	ldr	r3, [r4, #24]
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	071a      	lsls	r2, r3, #28
 8004178:	d525      	bpl.n	80041c6 <__swbuf_r+0x68>
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	b31b      	cbz	r3, 80041c6 <__swbuf_r+0x68>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	1a98      	subs	r0, r3, r2
 8004184:	6963      	ldr	r3, [r4, #20]
 8004186:	b2f6      	uxtb	r6, r6
 8004188:	4283      	cmp	r3, r0
 800418a:	4637      	mov	r7, r6
 800418c:	dc04      	bgt.n	8004198 <__swbuf_r+0x3a>
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f000 fd47 	bl	8004c24 <_fflush_r>
 8004196:	b9e0      	cbnz	r0, 80041d2 <__swbuf_r+0x74>
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	3b01      	subs	r3, #1
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	6022      	str	r2, [r4, #0]
 80041a4:	701e      	strb	r6, [r3, #0]
 80041a6:	6962      	ldr	r2, [r4, #20]
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d004      	beq.n	80041b8 <__swbuf_r+0x5a>
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	07db      	lsls	r3, r3, #31
 80041b2:	d506      	bpl.n	80041c2 <__swbuf_r+0x64>
 80041b4:	2e0a      	cmp	r6, #10
 80041b6:	d104      	bne.n	80041c2 <__swbuf_r+0x64>
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 fd32 	bl	8004c24 <_fflush_r>
 80041c0:	b938      	cbnz	r0, 80041d2 <__swbuf_r+0x74>
 80041c2:	4638      	mov	r0, r7
 80041c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c6:	4621      	mov	r1, r4
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f805 	bl	80041d8 <__swsetup_r>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0d5      	beq.n	800417e <__swbuf_r+0x20>
 80041d2:	f04f 37ff 	mov.w	r7, #4294967295
 80041d6:	e7f4      	b.n	80041c2 <__swbuf_r+0x64>

080041d8 <__swsetup_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <__swsetup_r+0xac>)
 80041dc:	4605      	mov	r5, r0
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	460c      	mov	r4, r1
 80041e2:	b118      	cbz	r0, 80041ec <__swsetup_r+0x14>
 80041e4:	6a03      	ldr	r3, [r0, #32]
 80041e6:	b90b      	cbnz	r3, 80041ec <__swsetup_r+0x14>
 80041e8:	f7ff fed2 	bl	8003f90 <__sinit>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041f2:	0718      	lsls	r0, r3, #28
 80041f4:	d422      	bmi.n	800423c <__swsetup_r+0x64>
 80041f6:	06d9      	lsls	r1, r3, #27
 80041f8:	d407      	bmi.n	800420a <__swsetup_r+0x32>
 80041fa:	2309      	movs	r3, #9
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	e034      	b.n	8004274 <__swsetup_r+0x9c>
 800420a:	0758      	lsls	r0, r3, #29
 800420c:	d512      	bpl.n	8004234 <__swsetup_r+0x5c>
 800420e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004210:	b141      	cbz	r1, 8004224 <__swsetup_r+0x4c>
 8004212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004216:	4299      	cmp	r1, r3
 8004218:	d002      	beq.n	8004220 <__swsetup_r+0x48>
 800421a:	4628      	mov	r0, r5
 800421c:	f000 f8b0 	bl	8004380 <_free_r>
 8004220:	2300      	movs	r3, #0
 8004222:	6363      	str	r3, [r4, #52]	; 0x34
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	2300      	movs	r3, #0
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	b94b      	cbnz	r3, 8004254 <__swsetup_r+0x7c>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d003      	beq.n	8004254 <__swsetup_r+0x7c>
 800424c:	4621      	mov	r1, r4
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fd36 	bl	8004cc0 <__smakebuf_r>
 8004254:	89a0      	ldrh	r0, [r4, #12]
 8004256:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800425a:	f010 0301 	ands.w	r3, r0, #1
 800425e:	d00a      	beq.n	8004276 <__swsetup_r+0x9e>
 8004260:	2300      	movs	r3, #0
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	6963      	ldr	r3, [r4, #20]
 8004266:	425b      	negs	r3, r3
 8004268:	61a3      	str	r3, [r4, #24]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b943      	cbnz	r3, 8004280 <__swsetup_r+0xa8>
 800426e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004272:	d1c4      	bne.n	80041fe <__swsetup_r+0x26>
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	0781      	lsls	r1, r0, #30
 8004278:	bf58      	it	pl
 800427a:	6963      	ldrpl	r3, [r4, #20]
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	e7f4      	b.n	800426a <__swsetup_r+0x92>
 8004280:	2000      	movs	r0, #0
 8004282:	e7f7      	b.n	8004274 <__swsetup_r+0x9c>
 8004284:	20000064 	.word	0x20000064

08004288 <memset>:
 8004288:	4402      	add	r2, r0
 800428a:	4603      	mov	r3, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	d100      	bne.n	8004292 <memset+0xa>
 8004290:	4770      	bx	lr
 8004292:	f803 1b01 	strb.w	r1, [r3], #1
 8004296:	e7f9      	b.n	800428c <memset+0x4>

08004298 <_close_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4d06      	ldr	r5, [pc, #24]	; (80042b4 <_close_r+0x1c>)
 800429c:	2300      	movs	r3, #0
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	602b      	str	r3, [r5, #0]
 80042a4:	f7fd fbab 	bl	80019fe <_close>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_close_r+0x1a>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_close_r+0x1a>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000264 	.word	0x20000264

080042b8 <_lseek_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d07      	ldr	r5, [pc, #28]	; (80042d8 <_lseek_r+0x20>)
 80042bc:	4604      	mov	r4, r0
 80042be:	4608      	mov	r0, r1
 80042c0:	4611      	mov	r1, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	602a      	str	r2, [r5, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fd fbc0 	bl	8001a4c <_lseek>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_lseek_r+0x1e>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_lseek_r+0x1e>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000264 	.word	0x20000264

080042dc <_read_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d07      	ldr	r5, [pc, #28]	; (80042fc <_read_r+0x20>)
 80042e0:	4604      	mov	r4, r0
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	602a      	str	r2, [r5, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fd fb4e 	bl	800198c <_read>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_read_r+0x1e>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_read_r+0x1e>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000264 	.word	0x20000264

08004300 <_write_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4d07      	ldr	r5, [pc, #28]	; (8004320 <_write_r+0x20>)
 8004304:	4604      	mov	r4, r0
 8004306:	4608      	mov	r0, r1
 8004308:	4611      	mov	r1, r2
 800430a:	2200      	movs	r2, #0
 800430c:	602a      	str	r2, [r5, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	f7fd fb59 	bl	80019c6 <_write>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d102      	bne.n	800431e <_write_r+0x1e>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	b103      	cbz	r3, 800431e <_write_r+0x1e>
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	20000264 	.word	0x20000264

08004324 <__errno>:
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <__errno+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000064 	.word	0x20000064

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4d0d      	ldr	r5, [pc, #52]	; (8004368 <__libc_init_array+0x38>)
 8004334:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	2600      	movs	r6, #0
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	4d0b      	ldr	r5, [pc, #44]	; (8004370 <__libc_init_array+0x40>)
 8004342:	4c0c      	ldr	r4, [pc, #48]	; (8004374 <__libc_init_array+0x44>)
 8004344:	f001 f8ec 	bl	8005520 <_init>
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	2600      	movs	r6, #0
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f855 3b04 	ldr.w	r3, [r5], #4
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	080056c4 	.word	0x080056c4
 800436c:	080056c4 	.word	0x080056c4
 8004370:	080056c4 	.word	0x080056c4
 8004374:	080056c8 	.word	0x080056c8

08004378 <__retarget_lock_init_recursive>:
 8004378:	4770      	bx	lr

0800437a <__retarget_lock_acquire_recursive>:
 800437a:	4770      	bx	lr

0800437c <__retarget_lock_release_recursive>:
 800437c:	4770      	bx	lr
	...

08004380 <_free_r>:
 8004380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004382:	2900      	cmp	r1, #0
 8004384:	d044      	beq.n	8004410 <_free_r+0x90>
 8004386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800438a:	9001      	str	r0, [sp, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f1a1 0404 	sub.w	r4, r1, #4
 8004392:	bfb8      	it	lt
 8004394:	18e4      	addlt	r4, r4, r3
 8004396:	f000 f8df 	bl	8004558 <__malloc_lock>
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <_free_r+0x94>)
 800439c:	9801      	ldr	r0, [sp, #4]
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	b933      	cbnz	r3, 80043b0 <_free_r+0x30>
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	6014      	str	r4, [r2, #0]
 80043a6:	b003      	add	sp, #12
 80043a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043ac:	f000 b8da 	b.w	8004564 <__malloc_unlock>
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d908      	bls.n	80043c6 <_free_r+0x46>
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	1961      	adds	r1, r4, r5
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf01      	itttt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	1949      	addeq	r1, r1, r5
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	e7ed      	b.n	80043a2 <_free_r+0x22>
 80043c6:	461a      	mov	r2, r3
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b10b      	cbz	r3, 80043d0 <_free_r+0x50>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d9fa      	bls.n	80043c6 <_free_r+0x46>
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	1855      	adds	r5, r2, r1
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d10b      	bne.n	80043f0 <_free_r+0x70>
 80043d8:	6824      	ldr	r4, [r4, #0]
 80043da:	4421      	add	r1, r4
 80043dc:	1854      	adds	r4, r2, r1
 80043de:	42a3      	cmp	r3, r4
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	d1e0      	bne.n	80043a6 <_free_r+0x26>
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	6053      	str	r3, [r2, #4]
 80043ea:	440c      	add	r4, r1
 80043ec:	6014      	str	r4, [r2, #0]
 80043ee:	e7da      	b.n	80043a6 <_free_r+0x26>
 80043f0:	d902      	bls.n	80043f8 <_free_r+0x78>
 80043f2:	230c      	movs	r3, #12
 80043f4:	6003      	str	r3, [r0, #0]
 80043f6:	e7d6      	b.n	80043a6 <_free_r+0x26>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf04      	itt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	bf04      	itt	eq
 8004408:	1949      	addeq	r1, r1, r5
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6054      	str	r4, [r2, #4]
 800440e:	e7ca      	b.n	80043a6 <_free_r+0x26>
 8004410:	b003      	add	sp, #12
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	2000026c 	.word	0x2000026c

08004418 <sbrk_aligned>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4e0e      	ldr	r6, [pc, #56]	; (8004454 <sbrk_aligned+0x3c>)
 800441c:	460c      	mov	r4, r1
 800441e:	6831      	ldr	r1, [r6, #0]
 8004420:	4605      	mov	r5, r0
 8004422:	b911      	cbnz	r1, 800442a <sbrk_aligned+0x12>
 8004424:	f000 fcaa 	bl	8004d7c <_sbrk_r>
 8004428:	6030      	str	r0, [r6, #0]
 800442a:	4621      	mov	r1, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f000 fca5 	bl	8004d7c <_sbrk_r>
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	d00a      	beq.n	800444c <sbrk_aligned+0x34>
 8004436:	1cc4      	adds	r4, r0, #3
 8004438:	f024 0403 	bic.w	r4, r4, #3
 800443c:	42a0      	cmp	r0, r4
 800443e:	d007      	beq.n	8004450 <sbrk_aligned+0x38>
 8004440:	1a21      	subs	r1, r4, r0
 8004442:	4628      	mov	r0, r5
 8004444:	f000 fc9a 	bl	8004d7c <_sbrk_r>
 8004448:	3001      	adds	r0, #1
 800444a:	d101      	bne.n	8004450 <sbrk_aligned+0x38>
 800444c:	f04f 34ff 	mov.w	r4, #4294967295
 8004450:	4620      	mov	r0, r4
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	20000270 	.word	0x20000270

08004458 <_malloc_r>:
 8004458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800445c:	1ccd      	adds	r5, r1, #3
 800445e:	f025 0503 	bic.w	r5, r5, #3
 8004462:	3508      	adds	r5, #8
 8004464:	2d0c      	cmp	r5, #12
 8004466:	bf38      	it	cc
 8004468:	250c      	movcc	r5, #12
 800446a:	2d00      	cmp	r5, #0
 800446c:	4607      	mov	r7, r0
 800446e:	db01      	blt.n	8004474 <_malloc_r+0x1c>
 8004470:	42a9      	cmp	r1, r5
 8004472:	d905      	bls.n	8004480 <_malloc_r+0x28>
 8004474:	230c      	movs	r3, #12
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	2600      	movs	r6, #0
 800447a:	4630      	mov	r0, r6
 800447c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004554 <_malloc_r+0xfc>
 8004484:	f000 f868 	bl	8004558 <__malloc_lock>
 8004488:	f8d8 3000 	ldr.w	r3, [r8]
 800448c:	461c      	mov	r4, r3
 800448e:	bb5c      	cbnz	r4, 80044e8 <_malloc_r+0x90>
 8004490:	4629      	mov	r1, r5
 8004492:	4638      	mov	r0, r7
 8004494:	f7ff ffc0 	bl	8004418 <sbrk_aligned>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	4604      	mov	r4, r0
 800449c:	d155      	bne.n	800454a <_malloc_r+0xf2>
 800449e:	f8d8 4000 	ldr.w	r4, [r8]
 80044a2:	4626      	mov	r6, r4
 80044a4:	2e00      	cmp	r6, #0
 80044a6:	d145      	bne.n	8004534 <_malloc_r+0xdc>
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	d048      	beq.n	800453e <_malloc_r+0xe6>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	4631      	mov	r1, r6
 80044b0:	4638      	mov	r0, r7
 80044b2:	eb04 0903 	add.w	r9, r4, r3
 80044b6:	f000 fc61 	bl	8004d7c <_sbrk_r>
 80044ba:	4581      	cmp	r9, r0
 80044bc:	d13f      	bne.n	800453e <_malloc_r+0xe6>
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	1a6d      	subs	r5, r5, r1
 80044c2:	4629      	mov	r1, r5
 80044c4:	4638      	mov	r0, r7
 80044c6:	f7ff ffa7 	bl	8004418 <sbrk_aligned>
 80044ca:	3001      	adds	r0, #1
 80044cc:	d037      	beq.n	800453e <_malloc_r+0xe6>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	442b      	add	r3, r5
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	f8d8 3000 	ldr.w	r3, [r8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d038      	beq.n	800454e <_malloc_r+0xf6>
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	42a2      	cmp	r2, r4
 80044e0:	d12b      	bne.n	800453a <_malloc_r+0xe2>
 80044e2:	2200      	movs	r2, #0
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	e00f      	b.n	8004508 <_malloc_r+0xb0>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	1b52      	subs	r2, r2, r5
 80044ec:	d41f      	bmi.n	800452e <_malloc_r+0xd6>
 80044ee:	2a0b      	cmp	r2, #11
 80044f0:	d917      	bls.n	8004522 <_malloc_r+0xca>
 80044f2:	1961      	adds	r1, r4, r5
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	6025      	str	r5, [r4, #0]
 80044f8:	bf18      	it	ne
 80044fa:	6059      	strne	r1, [r3, #4]
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	bf08      	it	eq
 8004500:	f8c8 1000 	streq.w	r1, [r8]
 8004504:	5162      	str	r2, [r4, r5]
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	4638      	mov	r0, r7
 800450a:	f104 060b 	add.w	r6, r4, #11
 800450e:	f000 f829 	bl	8004564 <__malloc_unlock>
 8004512:	f026 0607 	bic.w	r6, r6, #7
 8004516:	1d23      	adds	r3, r4, #4
 8004518:	1af2      	subs	r2, r6, r3
 800451a:	d0ae      	beq.n	800447a <_malloc_r+0x22>
 800451c:	1b9b      	subs	r3, r3, r6
 800451e:	50a3      	str	r3, [r4, r2]
 8004520:	e7ab      	b.n	800447a <_malloc_r+0x22>
 8004522:	42a3      	cmp	r3, r4
 8004524:	6862      	ldr	r2, [r4, #4]
 8004526:	d1dd      	bne.n	80044e4 <_malloc_r+0x8c>
 8004528:	f8c8 2000 	str.w	r2, [r8]
 800452c:	e7ec      	b.n	8004508 <_malloc_r+0xb0>
 800452e:	4623      	mov	r3, r4
 8004530:	6864      	ldr	r4, [r4, #4]
 8004532:	e7ac      	b.n	800448e <_malloc_r+0x36>
 8004534:	4634      	mov	r4, r6
 8004536:	6876      	ldr	r6, [r6, #4]
 8004538:	e7b4      	b.n	80044a4 <_malloc_r+0x4c>
 800453a:	4613      	mov	r3, r2
 800453c:	e7cc      	b.n	80044d8 <_malloc_r+0x80>
 800453e:	230c      	movs	r3, #12
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4638      	mov	r0, r7
 8004544:	f000 f80e 	bl	8004564 <__malloc_unlock>
 8004548:	e797      	b.n	800447a <_malloc_r+0x22>
 800454a:	6025      	str	r5, [r4, #0]
 800454c:	e7dc      	b.n	8004508 <_malloc_r+0xb0>
 800454e:	605b      	str	r3, [r3, #4]
 8004550:	deff      	udf	#255	; 0xff
 8004552:	bf00      	nop
 8004554:	2000026c 	.word	0x2000026c

08004558 <__malloc_lock>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__malloc_lock+0x8>)
 800455a:	f7ff bf0e 	b.w	800437a <__retarget_lock_acquire_recursive>
 800455e:	bf00      	nop
 8004560:	20000268 	.word	0x20000268

08004564 <__malloc_unlock>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__malloc_unlock+0x8>)
 8004566:	f7ff bf09 	b.w	800437c <__retarget_lock_release_recursive>
 800456a:	bf00      	nop
 800456c:	20000268 	.word	0x20000268

08004570 <__sfputc_r>:
 8004570:	6893      	ldr	r3, [r2, #8]
 8004572:	3b01      	subs	r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	b410      	push	{r4}
 8004578:	6093      	str	r3, [r2, #8]
 800457a:	da08      	bge.n	800458e <__sfputc_r+0x1e>
 800457c:	6994      	ldr	r4, [r2, #24]
 800457e:	42a3      	cmp	r3, r4
 8004580:	db01      	blt.n	8004586 <__sfputc_r+0x16>
 8004582:	290a      	cmp	r1, #10
 8004584:	d103      	bne.n	800458e <__sfputc_r+0x1e>
 8004586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800458a:	f7ff bde8 	b.w	800415e <__swbuf_r>
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	1c58      	adds	r0, r3, #1
 8004592:	6010      	str	r0, [r2, #0]
 8004594:	7019      	strb	r1, [r3, #0]
 8004596:	4608      	mov	r0, r1
 8004598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800459c:	4770      	bx	lr

0800459e <__sfputs_r>:
 800459e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a0:	4606      	mov	r6, r0
 80045a2:	460f      	mov	r7, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	18d5      	adds	r5, r2, r3
 80045a8:	42ac      	cmp	r4, r5
 80045aa:	d101      	bne.n	80045b0 <__sfputs_r+0x12>
 80045ac:	2000      	movs	r0, #0
 80045ae:	e007      	b.n	80045c0 <__sfputs_r+0x22>
 80045b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b4:	463a      	mov	r2, r7
 80045b6:	4630      	mov	r0, r6
 80045b8:	f7ff ffda 	bl	8004570 <__sfputc_r>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d1f3      	bne.n	80045a8 <__sfputs_r+0xa>
 80045c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045c4 <_vfiprintf_r>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	460d      	mov	r5, r1
 80045ca:	b09d      	sub	sp, #116	; 0x74
 80045cc:	4614      	mov	r4, r2
 80045ce:	4698      	mov	r8, r3
 80045d0:	4606      	mov	r6, r0
 80045d2:	b118      	cbz	r0, 80045dc <_vfiprintf_r+0x18>
 80045d4:	6a03      	ldr	r3, [r0, #32]
 80045d6:	b90b      	cbnz	r3, 80045dc <_vfiprintf_r+0x18>
 80045d8:	f7ff fcda 	bl	8003f90 <__sinit>
 80045dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045de:	07d9      	lsls	r1, r3, #31
 80045e0:	d405      	bmi.n	80045ee <_vfiprintf_r+0x2a>
 80045e2:	89ab      	ldrh	r3, [r5, #12]
 80045e4:	059a      	lsls	r2, r3, #22
 80045e6:	d402      	bmi.n	80045ee <_vfiprintf_r+0x2a>
 80045e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ea:	f7ff fec6 	bl	800437a <__retarget_lock_acquire_recursive>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	071b      	lsls	r3, r3, #28
 80045f2:	d501      	bpl.n	80045f8 <_vfiprintf_r+0x34>
 80045f4:	692b      	ldr	r3, [r5, #16]
 80045f6:	b99b      	cbnz	r3, 8004620 <_vfiprintf_r+0x5c>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7ff fdec 	bl	80041d8 <__swsetup_r>
 8004600:	b170      	cbz	r0, 8004620 <_vfiprintf_r+0x5c>
 8004602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004604:	07dc      	lsls	r4, r3, #31
 8004606:	d504      	bpl.n	8004612 <_vfiprintf_r+0x4e>
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	b01d      	add	sp, #116	; 0x74
 800460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	0598      	lsls	r0, r3, #22
 8004616:	d4f7      	bmi.n	8004608 <_vfiprintf_r+0x44>
 8004618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461a:	f7ff feaf 	bl	800437c <__retarget_lock_release_recursive>
 800461e:	e7f3      	b.n	8004608 <_vfiprintf_r+0x44>
 8004620:	2300      	movs	r3, #0
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
 8004624:	2320      	movs	r3, #32
 8004626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800462a:	f8cd 800c 	str.w	r8, [sp, #12]
 800462e:	2330      	movs	r3, #48	; 0x30
 8004630:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047e4 <_vfiprintf_r+0x220>
 8004634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004638:	f04f 0901 	mov.w	r9, #1
 800463c:	4623      	mov	r3, r4
 800463e:	469a      	mov	sl, r3
 8004640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004644:	b10a      	cbz	r2, 800464a <_vfiprintf_r+0x86>
 8004646:	2a25      	cmp	r2, #37	; 0x25
 8004648:	d1f9      	bne.n	800463e <_vfiprintf_r+0x7a>
 800464a:	ebba 0b04 	subs.w	fp, sl, r4
 800464e:	d00b      	beq.n	8004668 <_vfiprintf_r+0xa4>
 8004650:	465b      	mov	r3, fp
 8004652:	4622      	mov	r2, r4
 8004654:	4629      	mov	r1, r5
 8004656:	4630      	mov	r0, r6
 8004658:	f7ff ffa1 	bl	800459e <__sfputs_r>
 800465c:	3001      	adds	r0, #1
 800465e:	f000 80a9 	beq.w	80047b4 <_vfiprintf_r+0x1f0>
 8004662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004664:	445a      	add	r2, fp
 8004666:	9209      	str	r2, [sp, #36]	; 0x24
 8004668:	f89a 3000 	ldrb.w	r3, [sl]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a1 	beq.w	80047b4 <_vfiprintf_r+0x1f0>
 8004672:	2300      	movs	r3, #0
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800467c:	f10a 0a01 	add.w	sl, sl, #1
 8004680:	9304      	str	r3, [sp, #16]
 8004682:	9307      	str	r3, [sp, #28]
 8004684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004688:	931a      	str	r3, [sp, #104]	; 0x68
 800468a:	4654      	mov	r4, sl
 800468c:	2205      	movs	r2, #5
 800468e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004692:	4854      	ldr	r0, [pc, #336]	; (80047e4 <_vfiprintf_r+0x220>)
 8004694:	f7fb fd9c 	bl	80001d0 <memchr>
 8004698:	9a04      	ldr	r2, [sp, #16]
 800469a:	b9d8      	cbnz	r0, 80046d4 <_vfiprintf_r+0x110>
 800469c:	06d1      	lsls	r1, r2, #27
 800469e:	bf44      	itt	mi
 80046a0:	2320      	movmi	r3, #32
 80046a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a6:	0713      	lsls	r3, r2, #28
 80046a8:	bf44      	itt	mi
 80046aa:	232b      	movmi	r3, #43	; 0x2b
 80046ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b0:	f89a 3000 	ldrb.w	r3, [sl]
 80046b4:	2b2a      	cmp	r3, #42	; 0x2a
 80046b6:	d015      	beq.n	80046e4 <_vfiprintf_r+0x120>
 80046b8:	9a07      	ldr	r2, [sp, #28]
 80046ba:	4654      	mov	r4, sl
 80046bc:	2000      	movs	r0, #0
 80046be:	f04f 0c0a 	mov.w	ip, #10
 80046c2:	4621      	mov	r1, r4
 80046c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c8:	3b30      	subs	r3, #48	; 0x30
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	d94d      	bls.n	800476a <_vfiprintf_r+0x1a6>
 80046ce:	b1b0      	cbz	r0, 80046fe <_vfiprintf_r+0x13a>
 80046d0:	9207      	str	r2, [sp, #28]
 80046d2:	e014      	b.n	80046fe <_vfiprintf_r+0x13a>
 80046d4:	eba0 0308 	sub.w	r3, r0, r8
 80046d8:	fa09 f303 	lsl.w	r3, r9, r3
 80046dc:	4313      	orrs	r3, r2
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	46a2      	mov	sl, r4
 80046e2:	e7d2      	b.n	800468a <_vfiprintf_r+0xc6>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	1d19      	adds	r1, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	9103      	str	r1, [sp, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bfbb      	ittet	lt
 80046f0:	425b      	neglt	r3, r3
 80046f2:	f042 0202 	orrlt.w	r2, r2, #2
 80046f6:	9307      	strge	r3, [sp, #28]
 80046f8:	9307      	strlt	r3, [sp, #28]
 80046fa:	bfb8      	it	lt
 80046fc:	9204      	strlt	r2, [sp, #16]
 80046fe:	7823      	ldrb	r3, [r4, #0]
 8004700:	2b2e      	cmp	r3, #46	; 0x2e
 8004702:	d10c      	bne.n	800471e <_vfiprintf_r+0x15a>
 8004704:	7863      	ldrb	r3, [r4, #1]
 8004706:	2b2a      	cmp	r3, #42	; 0x2a
 8004708:	d134      	bne.n	8004774 <_vfiprintf_r+0x1b0>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9203      	str	r2, [sp, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfb8      	it	lt
 8004716:	f04f 33ff 	movlt.w	r3, #4294967295
 800471a:	3402      	adds	r4, #2
 800471c:	9305      	str	r3, [sp, #20]
 800471e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80047f4 <_vfiprintf_r+0x230>
 8004722:	7821      	ldrb	r1, [r4, #0]
 8004724:	2203      	movs	r2, #3
 8004726:	4650      	mov	r0, sl
 8004728:	f7fb fd52 	bl	80001d0 <memchr>
 800472c:	b138      	cbz	r0, 800473e <_vfiprintf_r+0x17a>
 800472e:	9b04      	ldr	r3, [sp, #16]
 8004730:	eba0 000a 	sub.w	r0, r0, sl
 8004734:	2240      	movs	r2, #64	; 0x40
 8004736:	4082      	lsls	r2, r0
 8004738:	4313      	orrs	r3, r2
 800473a:	3401      	adds	r4, #1
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004742:	4829      	ldr	r0, [pc, #164]	; (80047e8 <_vfiprintf_r+0x224>)
 8004744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004748:	2206      	movs	r2, #6
 800474a:	f7fb fd41 	bl	80001d0 <memchr>
 800474e:	2800      	cmp	r0, #0
 8004750:	d03f      	beq.n	80047d2 <_vfiprintf_r+0x20e>
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <_vfiprintf_r+0x228>)
 8004754:	bb1b      	cbnz	r3, 800479e <_vfiprintf_r+0x1da>
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	3307      	adds	r3, #7
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	3308      	adds	r3, #8
 8004760:	9303      	str	r3, [sp, #12]
 8004762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004764:	443b      	add	r3, r7
 8004766:	9309      	str	r3, [sp, #36]	; 0x24
 8004768:	e768      	b.n	800463c <_vfiprintf_r+0x78>
 800476a:	fb0c 3202 	mla	r2, ip, r2, r3
 800476e:	460c      	mov	r4, r1
 8004770:	2001      	movs	r0, #1
 8004772:	e7a6      	b.n	80046c2 <_vfiprintf_r+0xfe>
 8004774:	2300      	movs	r3, #0
 8004776:	3401      	adds	r4, #1
 8004778:	9305      	str	r3, [sp, #20]
 800477a:	4619      	mov	r1, r3
 800477c:	f04f 0c0a 	mov.w	ip, #10
 8004780:	4620      	mov	r0, r4
 8004782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004786:	3a30      	subs	r2, #48	; 0x30
 8004788:	2a09      	cmp	r2, #9
 800478a:	d903      	bls.n	8004794 <_vfiprintf_r+0x1d0>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0c6      	beq.n	800471e <_vfiprintf_r+0x15a>
 8004790:	9105      	str	r1, [sp, #20]
 8004792:	e7c4      	b.n	800471e <_vfiprintf_r+0x15a>
 8004794:	fb0c 2101 	mla	r1, ip, r1, r2
 8004798:	4604      	mov	r4, r0
 800479a:	2301      	movs	r3, #1
 800479c:	e7f0      	b.n	8004780 <_vfiprintf_r+0x1bc>
 800479e:	ab03      	add	r3, sp, #12
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	462a      	mov	r2, r5
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <_vfiprintf_r+0x22c>)
 80047a6:	a904      	add	r1, sp, #16
 80047a8:	4630      	mov	r0, r6
 80047aa:	f3af 8000 	nop.w
 80047ae:	4607      	mov	r7, r0
 80047b0:	1c78      	adds	r0, r7, #1
 80047b2:	d1d6      	bne.n	8004762 <_vfiprintf_r+0x19e>
 80047b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047b6:	07d9      	lsls	r1, r3, #31
 80047b8:	d405      	bmi.n	80047c6 <_vfiprintf_r+0x202>
 80047ba:	89ab      	ldrh	r3, [r5, #12]
 80047bc:	059a      	lsls	r2, r3, #22
 80047be:	d402      	bmi.n	80047c6 <_vfiprintf_r+0x202>
 80047c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047c2:	f7ff fddb 	bl	800437c <__retarget_lock_release_recursive>
 80047c6:	89ab      	ldrh	r3, [r5, #12]
 80047c8:	065b      	lsls	r3, r3, #25
 80047ca:	f53f af1d 	bmi.w	8004608 <_vfiprintf_r+0x44>
 80047ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047d0:	e71c      	b.n	800460c <_vfiprintf_r+0x48>
 80047d2:	ab03      	add	r3, sp, #12
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	462a      	mov	r2, r5
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <_vfiprintf_r+0x22c>)
 80047da:	a904      	add	r1, sp, #16
 80047dc:	4630      	mov	r0, r6
 80047de:	f000 f879 	bl	80048d4 <_printf_i>
 80047e2:	e7e4      	b.n	80047ae <_vfiprintf_r+0x1ea>
 80047e4:	0800566f 	.word	0x0800566f
 80047e8:	08005679 	.word	0x08005679
 80047ec:	00000000 	.word	0x00000000
 80047f0:	0800459f 	.word	0x0800459f
 80047f4:	08005675 	.word	0x08005675

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4616      	mov	r6, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004808:	4293      	cmp	r3, r2
 800480a:	bfb8      	it	lt
 800480c:	4613      	movlt	r3, r2
 800480e:	6033      	str	r3, [r6, #0]
 8004810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004814:	4607      	mov	r7, r0
 8004816:	460c      	mov	r4, r1
 8004818:	b10a      	cbz	r2, 800481e <_printf_common+0x26>
 800481a:	3301      	adds	r3, #1
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	0699      	lsls	r1, r3, #26
 8004822:	bf42      	ittt	mi
 8004824:	6833      	ldrmi	r3, [r6, #0]
 8004826:	3302      	addmi	r3, #2
 8004828:	6033      	strmi	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d106      	bne.n	8004840 <_printf_common+0x48>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	42ab      	cmp	r3, r5
 800483e:	dc26      	bgt.n	800488e <_printf_common+0x96>
 8004840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004844:	1e13      	subs	r3, r2, #0
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	2301      	movne	r3, #1
 800484c:	0692      	lsls	r2, r2, #26
 800484e:	d42b      	bmi.n	80048a8 <_printf_common+0xb0>
 8004850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004854:	4649      	mov	r1, r9
 8004856:	4638      	mov	r0, r7
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d01e      	beq.n	800489c <_printf_common+0xa4>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	6922      	ldr	r2, [r4, #16]
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf02      	ittt	eq
 800486a:	68e5      	ldreq	r5, [r4, #12]
 800486c:	6833      	ldreq	r3, [r6, #0]
 800486e:	1aed      	subeq	r5, r5, r3
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	bf0c      	ite	eq
 8004874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004878:	2500      	movne	r5, #0
 800487a:	4293      	cmp	r3, r2
 800487c:	bfc4      	itt	gt
 800487e:	1a9b      	subgt	r3, r3, r2
 8004880:	18ed      	addgt	r5, r5, r3
 8004882:	2600      	movs	r6, #0
 8004884:	341a      	adds	r4, #26
 8004886:	42b5      	cmp	r5, r6
 8004888:	d11a      	bne.n	80048c0 <_printf_common+0xc8>
 800488a:	2000      	movs	r0, #0
 800488c:	e008      	b.n	80048a0 <_printf_common+0xa8>
 800488e:	2301      	movs	r3, #1
 8004890:	4652      	mov	r2, sl
 8004892:	4649      	mov	r1, r9
 8004894:	4638      	mov	r0, r7
 8004896:	47c0      	blx	r8
 8004898:	3001      	adds	r0, #1
 800489a:	d103      	bne.n	80048a4 <_printf_common+0xac>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	3501      	adds	r5, #1
 80048a6:	e7c6      	b.n	8004836 <_printf_common+0x3e>
 80048a8:	18e1      	adds	r1, r4, r3
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	2030      	movs	r0, #48	; 0x30
 80048ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b2:	4422      	add	r2, r4
 80048b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048bc:	3302      	adds	r3, #2
 80048be:	e7c7      	b.n	8004850 <_printf_common+0x58>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4622      	mov	r2, r4
 80048c4:	4649      	mov	r1, r9
 80048c6:	4638      	mov	r0, r7
 80048c8:	47c0      	blx	r8
 80048ca:	3001      	adds	r0, #1
 80048cc:	d0e6      	beq.n	800489c <_printf_common+0xa4>
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7d9      	b.n	8004886 <_printf_common+0x8e>
	...

080048d4 <_printf_i>:
 80048d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	7e0f      	ldrb	r7, [r1, #24]
 80048da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048dc:	2f78      	cmp	r7, #120	; 0x78
 80048de:	4691      	mov	r9, r2
 80048e0:	4680      	mov	r8, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	469a      	mov	sl, r3
 80048e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ea:	d807      	bhi.n	80048fc <_printf_i+0x28>
 80048ec:	2f62      	cmp	r7, #98	; 0x62
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x32>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	f000 80d4 	beq.w	8004a9e <_printf_i+0x1ca>
 80048f6:	2f58      	cmp	r7, #88	; 0x58
 80048f8:	f000 80c0 	beq.w	8004a7c <_printf_i+0x1a8>
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004904:	e03a      	b.n	800497c <_printf_i+0xa8>
 8004906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490a:	2b15      	cmp	r3, #21
 800490c:	d8f6      	bhi.n	80048fc <_printf_i+0x28>
 800490e:	a101      	add	r1, pc, #4	; (adr r1, 8004914 <_printf_i+0x40>)
 8004910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004914:	0800496d 	.word	0x0800496d
 8004918:	08004981 	.word	0x08004981
 800491c:	080048fd 	.word	0x080048fd
 8004920:	080048fd 	.word	0x080048fd
 8004924:	080048fd 	.word	0x080048fd
 8004928:	080048fd 	.word	0x080048fd
 800492c:	08004981 	.word	0x08004981
 8004930:	080048fd 	.word	0x080048fd
 8004934:	080048fd 	.word	0x080048fd
 8004938:	080048fd 	.word	0x080048fd
 800493c:	080048fd 	.word	0x080048fd
 8004940:	08004a85 	.word	0x08004a85
 8004944:	080049ad 	.word	0x080049ad
 8004948:	08004a3f 	.word	0x08004a3f
 800494c:	080048fd 	.word	0x080048fd
 8004950:	080048fd 	.word	0x080048fd
 8004954:	08004aa7 	.word	0x08004aa7
 8004958:	080048fd 	.word	0x080048fd
 800495c:	080049ad 	.word	0x080049ad
 8004960:	080048fd 	.word	0x080048fd
 8004964:	080048fd 	.word	0x080048fd
 8004968:	08004a47 	.word	0x08004a47
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	602a      	str	r2, [r5, #0]
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800497c:	2301      	movs	r3, #1
 800497e:	e09f      	b.n	8004ac0 <_printf_i+0x1ec>
 8004980:	6820      	ldr	r0, [r4, #0]
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	0607      	lsls	r7, r0, #24
 8004986:	f103 0104 	add.w	r1, r3, #4
 800498a:	6029      	str	r1, [r5, #0]
 800498c:	d501      	bpl.n	8004992 <_printf_i+0xbe>
 800498e:	681e      	ldr	r6, [r3, #0]
 8004990:	e003      	b.n	800499a <_printf_i+0xc6>
 8004992:	0646      	lsls	r6, r0, #25
 8004994:	d5fb      	bpl.n	800498e <_printf_i+0xba>
 8004996:	f9b3 6000 	ldrsh.w	r6, [r3]
 800499a:	2e00      	cmp	r6, #0
 800499c:	da03      	bge.n	80049a6 <_printf_i+0xd2>
 800499e:	232d      	movs	r3, #45	; 0x2d
 80049a0:	4276      	negs	r6, r6
 80049a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a6:	485a      	ldr	r0, [pc, #360]	; (8004b10 <_printf_i+0x23c>)
 80049a8:	230a      	movs	r3, #10
 80049aa:	e012      	b.n	80049d2 <_printf_i+0xfe>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	6820      	ldr	r0, [r4, #0]
 80049b0:	1d19      	adds	r1, r3, #4
 80049b2:	6029      	str	r1, [r5, #0]
 80049b4:	0605      	lsls	r5, r0, #24
 80049b6:	d501      	bpl.n	80049bc <_printf_i+0xe8>
 80049b8:	681e      	ldr	r6, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <_printf_i+0xee>
 80049bc:	0641      	lsls	r1, r0, #25
 80049be:	d5fb      	bpl.n	80049b8 <_printf_i+0xe4>
 80049c0:	881e      	ldrh	r6, [r3, #0]
 80049c2:	4853      	ldr	r0, [pc, #332]	; (8004b10 <_printf_i+0x23c>)
 80049c4:	2f6f      	cmp	r7, #111	; 0x6f
 80049c6:	bf0c      	ite	eq
 80049c8:	2308      	moveq	r3, #8
 80049ca:	230a      	movne	r3, #10
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d2:	6865      	ldr	r5, [r4, #4]
 80049d4:	60a5      	str	r5, [r4, #8]
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	bfa2      	ittt	ge
 80049da:	6821      	ldrge	r1, [r4, #0]
 80049dc:	f021 0104 	bicge.w	r1, r1, #4
 80049e0:	6021      	strge	r1, [r4, #0]
 80049e2:	b90e      	cbnz	r6, 80049e8 <_printf_i+0x114>
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	d04b      	beq.n	8004a80 <_printf_i+0x1ac>
 80049e8:	4615      	mov	r5, r2
 80049ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ee:	fb03 6711 	mls	r7, r3, r1, r6
 80049f2:	5dc7      	ldrb	r7, [r0, r7]
 80049f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049f8:	4637      	mov	r7, r6
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	460e      	mov	r6, r1
 80049fe:	d9f4      	bls.n	80049ea <_printf_i+0x116>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10b      	bne.n	8004a1c <_printf_i+0x148>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07de      	lsls	r6, r3, #31
 8004a08:	d508      	bpl.n	8004a1c <_printf_i+0x148>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	bfde      	ittt	le
 8004a12:	2330      	movle	r3, #48	; 0x30
 8004a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a1c:	1b52      	subs	r2, r2, r5
 8004a1e:	6122      	str	r2, [r4, #16]
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	464b      	mov	r3, r9
 8004a26:	aa03      	add	r2, sp, #12
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fee4 	bl	80047f8 <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d14a      	bne.n	8004aca <_printf_i+0x1f6>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f043 0320 	orr.w	r3, r3, #32
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	4833      	ldr	r0, [pc, #204]	; (8004b14 <_printf_i+0x240>)
 8004a48:	2778      	movs	r7, #120	; 0x78
 8004a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6829      	ldr	r1, [r5, #0]
 8004a52:	061f      	lsls	r7, r3, #24
 8004a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a58:	d402      	bmi.n	8004a60 <_printf_i+0x18c>
 8004a5a:	065f      	lsls	r7, r3, #25
 8004a5c:	bf48      	it	mi
 8004a5e:	b2b6      	uxthmi	r6, r6
 8004a60:	07df      	lsls	r7, r3, #31
 8004a62:	bf48      	it	mi
 8004a64:	f043 0320 	orrmi.w	r3, r3, #32
 8004a68:	6029      	str	r1, [r5, #0]
 8004a6a:	bf48      	it	mi
 8004a6c:	6023      	strmi	r3, [r4, #0]
 8004a6e:	b91e      	cbnz	r6, 8004a78 <_printf_i+0x1a4>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	f023 0320 	bic.w	r3, r3, #32
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	2310      	movs	r3, #16
 8004a7a:	e7a7      	b.n	80049cc <_printf_i+0xf8>
 8004a7c:	4824      	ldr	r0, [pc, #144]	; (8004b10 <_printf_i+0x23c>)
 8004a7e:	e7e4      	b.n	8004a4a <_printf_i+0x176>
 8004a80:	4615      	mov	r5, r2
 8004a82:	e7bd      	b.n	8004a00 <_printf_i+0x12c>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6826      	ldr	r6, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6028      	str	r0, [r5, #0]
 8004a8e:	0635      	lsls	r5, r6, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1c4>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1ca>
 8004a98:	0670      	lsls	r0, r6, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1c0>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4615      	mov	r5, r2
 8004aa4:	e7bc      	b.n	8004a20 <_printf_i+0x14c>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f7fb fb8c 	bl	80001d0 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1ea>
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac8:	e7aa      	b.n	8004a20 <_printf_i+0x14c>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	462a      	mov	r2, r5
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ad      	beq.n	8004a34 <_printf_i+0x160>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x232>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a6      	b.n	8004a38 <_printf_i+0x164>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09d      	beq.n	8004a34 <_printf_i+0x160>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x216>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x20a>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x226>
 8004b0e:	bf00      	nop
 8004b10:	08005680 	.word	0x08005680
 8004b14:	08005691 	.word	0x08005691

08004b18 <__sflush_r>:
 8004b18:	898a      	ldrh	r2, [r1, #12]
 8004b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1e:	4605      	mov	r5, r0
 8004b20:	0710      	lsls	r0, r2, #28
 8004b22:	460c      	mov	r4, r1
 8004b24:	d458      	bmi.n	8004bd8 <__sflush_r+0xc0>
 8004b26:	684b      	ldr	r3, [r1, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dc05      	bgt.n	8004b38 <__sflush_r+0x20>
 8004b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dc02      	bgt.n	8004b38 <__sflush_r+0x20>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d0f9      	beq.n	8004b32 <__sflush_r+0x1a>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b44:	682f      	ldr	r7, [r5, #0]
 8004b46:	6a21      	ldr	r1, [r4, #32]
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	d032      	beq.n	8004bb2 <__sflush_r+0x9a>
 8004b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	075a      	lsls	r2, r3, #29
 8004b52:	d505      	bpl.n	8004b60 <__sflush_r+0x48>
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	1ac0      	subs	r0, r0, r3
 8004b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b5a:	b10b      	cbz	r3, 8004b60 <__sflush_r+0x48>
 8004b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b5e:	1ac0      	subs	r0, r0, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	4602      	mov	r2, r0
 8004b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b66:	6a21      	ldr	r1, [r4, #32]
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b0      	blx	r6
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	d106      	bne.n	8004b80 <__sflush_r+0x68>
 8004b72:	6829      	ldr	r1, [r5, #0]
 8004b74:	291d      	cmp	r1, #29
 8004b76:	d82b      	bhi.n	8004bd0 <__sflush_r+0xb8>
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <__sflush_r+0x108>)
 8004b7a:	410a      	asrs	r2, r1
 8004b7c:	07d6      	lsls	r6, r2, #31
 8004b7e:	d427      	bmi.n	8004bd0 <__sflush_r+0xb8>
 8004b80:	2200      	movs	r2, #0
 8004b82:	6062      	str	r2, [r4, #4]
 8004b84:	04d9      	lsls	r1, r3, #19
 8004b86:	6922      	ldr	r2, [r4, #16]
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	d504      	bpl.n	8004b96 <__sflush_r+0x7e>
 8004b8c:	1c42      	adds	r2, r0, #1
 8004b8e:	d101      	bne.n	8004b94 <__sflush_r+0x7c>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b903      	cbnz	r3, 8004b96 <__sflush_r+0x7e>
 8004b94:	6560      	str	r0, [r4, #84]	; 0x54
 8004b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b98:	602f      	str	r7, [r5, #0]
 8004b9a:	2900      	cmp	r1, #0
 8004b9c:	d0c9      	beq.n	8004b32 <__sflush_r+0x1a>
 8004b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba2:	4299      	cmp	r1, r3
 8004ba4:	d002      	beq.n	8004bac <__sflush_r+0x94>
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7ff fbea 	bl	8004380 <_free_r>
 8004bac:	2000      	movs	r0, #0
 8004bae:	6360      	str	r0, [r4, #52]	; 0x34
 8004bb0:	e7c0      	b.n	8004b34 <__sflush_r+0x1c>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b0      	blx	r6
 8004bb8:	1c41      	adds	r1, r0, #1
 8004bba:	d1c8      	bne.n	8004b4e <__sflush_r+0x36>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0c5      	beq.n	8004b4e <__sflush_r+0x36>
 8004bc2:	2b1d      	cmp	r3, #29
 8004bc4:	d001      	beq.n	8004bca <__sflush_r+0xb2>
 8004bc6:	2b16      	cmp	r3, #22
 8004bc8:	d101      	bne.n	8004bce <__sflush_r+0xb6>
 8004bca:	602f      	str	r7, [r5, #0]
 8004bcc:	e7b1      	b.n	8004b32 <__sflush_r+0x1a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	e7ad      	b.n	8004b34 <__sflush_r+0x1c>
 8004bd8:	690f      	ldr	r7, [r1, #16]
 8004bda:	2f00      	cmp	r7, #0
 8004bdc:	d0a9      	beq.n	8004b32 <__sflush_r+0x1a>
 8004bde:	0793      	lsls	r3, r2, #30
 8004be0:	680e      	ldr	r6, [r1, #0]
 8004be2:	bf08      	it	eq
 8004be4:	694b      	ldreq	r3, [r1, #20]
 8004be6:	600f      	str	r7, [r1, #0]
 8004be8:	bf18      	it	ne
 8004bea:	2300      	movne	r3, #0
 8004bec:	eba6 0807 	sub.w	r8, r6, r7
 8004bf0:	608b      	str	r3, [r1, #8]
 8004bf2:	f1b8 0f00 	cmp.w	r8, #0
 8004bf6:	dd9c      	ble.n	8004b32 <__sflush_r+0x1a>
 8004bf8:	6a21      	ldr	r1, [r4, #32]
 8004bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	463a      	mov	r2, r7
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b0      	blx	r6
 8004c04:	2800      	cmp	r0, #0
 8004c06:	dc06      	bgt.n	8004c16 <__sflush_r+0xfe>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e78e      	b.n	8004b34 <__sflush_r+0x1c>
 8004c16:	4407      	add	r7, r0
 8004c18:	eba8 0800 	sub.w	r8, r8, r0
 8004c1c:	e7e9      	b.n	8004bf2 <__sflush_r+0xda>
 8004c1e:	bf00      	nop
 8004c20:	dfbffffe 	.word	0xdfbffffe

08004c24 <_fflush_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	690b      	ldr	r3, [r1, #16]
 8004c28:	4605      	mov	r5, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b913      	cbnz	r3, 8004c34 <_fflush_r+0x10>
 8004c2e:	2500      	movs	r5, #0
 8004c30:	4628      	mov	r0, r5
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	b118      	cbz	r0, 8004c3e <_fflush_r+0x1a>
 8004c36:	6a03      	ldr	r3, [r0, #32]
 8004c38:	b90b      	cbnz	r3, 8004c3e <_fflush_r+0x1a>
 8004c3a:	f7ff f9a9 	bl	8003f90 <__sinit>
 8004c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f3      	beq.n	8004c2e <_fflush_r+0xa>
 8004c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c48:	07d0      	lsls	r0, r2, #31
 8004c4a:	d404      	bmi.n	8004c56 <_fflush_r+0x32>
 8004c4c:	0599      	lsls	r1, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <_fflush_r+0x32>
 8004c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c52:	f7ff fb92 	bl	800437a <__retarget_lock_acquire_recursive>
 8004c56:	4628      	mov	r0, r5
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f7ff ff5d 	bl	8004b18 <__sflush_r>
 8004c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c60:	07da      	lsls	r2, r3, #31
 8004c62:	4605      	mov	r5, r0
 8004c64:	d4e4      	bmi.n	8004c30 <_fflush_r+0xc>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	059b      	lsls	r3, r3, #22
 8004c6a:	d4e1      	bmi.n	8004c30 <_fflush_r+0xc>
 8004c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c6e:	f7ff fb85 	bl	800437c <__retarget_lock_release_recursive>
 8004c72:	e7dd      	b.n	8004c30 <_fflush_r+0xc>

08004c74 <__swhatbuf_r>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	460c      	mov	r4, r1
 8004c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	b096      	sub	sp, #88	; 0x58
 8004c80:	4615      	mov	r5, r2
 8004c82:	461e      	mov	r6, r3
 8004c84:	da0d      	bge.n	8004ca2 <__swhatbuf_r+0x2e>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c96:	2340      	movne	r3, #64	; 0x40
 8004c98:	2000      	movs	r0, #0
 8004c9a:	6031      	str	r1, [r6, #0]
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	b016      	add	sp, #88	; 0x58
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	466a      	mov	r2, sp
 8004ca4:	f000 f848 	bl	8004d38 <_fstat_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	dbec      	blt.n	8004c86 <__swhatbuf_r+0x12>
 8004cac:	9901      	ldr	r1, [sp, #4]
 8004cae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004cb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004cb6:	4259      	negs	r1, r3
 8004cb8:	4159      	adcs	r1, r3
 8004cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cbe:	e7eb      	b.n	8004c98 <__swhatbuf_r+0x24>

08004cc0 <__smakebuf_r>:
 8004cc0:	898b      	ldrh	r3, [r1, #12]
 8004cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cc4:	079d      	lsls	r5, r3, #30
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	d507      	bpl.n	8004cdc <__smakebuf_r+0x1c>
 8004ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	6163      	str	r3, [r4, #20]
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	ab01      	add	r3, sp, #4
 8004cde:	466a      	mov	r2, sp
 8004ce0:	f7ff ffc8 	bl	8004c74 <__swhatbuf_r>
 8004ce4:	9900      	ldr	r1, [sp, #0]
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f7ff fbb5 	bl	8004458 <_malloc_r>
 8004cee:	b948      	cbnz	r0, 8004d04 <__smakebuf_r+0x44>
 8004cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf4:	059a      	lsls	r2, r3, #22
 8004cf6:	d4ef      	bmi.n	8004cd8 <__smakebuf_r+0x18>
 8004cf8:	f023 0303 	bic.w	r3, r3, #3
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	e7e3      	b.n	8004ccc <__smakebuf_r+0xc>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	6020      	str	r0, [r4, #0]
 8004d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0c:	81a3      	strh	r3, [r4, #12]
 8004d0e:	9b00      	ldr	r3, [sp, #0]
 8004d10:	6163      	str	r3, [r4, #20]
 8004d12:	9b01      	ldr	r3, [sp, #4]
 8004d14:	6120      	str	r0, [r4, #16]
 8004d16:	b15b      	cbz	r3, 8004d30 <__smakebuf_r+0x70>
 8004d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f000 f81d 	bl	8004d5c <_isatty_r>
 8004d22:	b128      	cbz	r0, 8004d30 <__smakebuf_r+0x70>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	431d      	orrs	r5, r3
 8004d34:	81a5      	strh	r5, [r4, #12]
 8004d36:	e7cf      	b.n	8004cd8 <__smakebuf_r+0x18>

08004d38 <_fstat_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d07      	ldr	r5, [pc, #28]	; (8004d58 <_fstat_r+0x20>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	602b      	str	r3, [r5, #0]
 8004d46:	f7fc fe66 	bl	8001a16 <_fstat>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	d102      	bne.n	8004d54 <_fstat_r+0x1c>
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	b103      	cbz	r3, 8004d54 <_fstat_r+0x1c>
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	bd38      	pop	{r3, r4, r5, pc}
 8004d56:	bf00      	nop
 8004d58:	20000264 	.word	0x20000264

08004d5c <_isatty_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_isatty_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fc fe65 	bl	8001a36 <_isatty>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_isatty_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_isatty_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000264 	.word	0x20000264

08004d7c <_sbrk_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d06      	ldr	r5, [pc, #24]	; (8004d98 <_sbrk_r+0x1c>)
 8004d80:	2300      	movs	r3, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	f7fc fe6e 	bl	8001a68 <_sbrk>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_sbrk_r+0x1a>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_sbrk_r+0x1a>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20000264 	.word	0x20000264

08004d9c <powf>:
 8004d9c:	b508      	push	{r3, lr}
 8004d9e:	ed2d 8b04 	vpush	{d8-d9}
 8004da2:	eeb0 8a60 	vmov.f32	s16, s1
 8004da6:	eeb0 9a40 	vmov.f32	s18, s0
 8004daa:	f000 f863 	bl	8004e74 <__ieee754_powf>
 8004dae:	eeb4 8a48 	vcmp.f32	s16, s16
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	eef0 8a40 	vmov.f32	s17, s0
 8004dba:	d63e      	bvs.n	8004e3a <powf+0x9e>
 8004dbc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d112      	bne.n	8004dec <powf+0x50>
 8004dc6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d039      	beq.n	8004e44 <powf+0xa8>
 8004dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8004dd4:	f000 f840 	bl	8004e58 <finitef>
 8004dd8:	b378      	cbz	r0, 8004e3a <powf+0x9e>
 8004dda:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d52a      	bpl.n	8004e3a <powf+0x9e>
 8004de4:	f7ff fa9e 	bl	8004324 <__errno>
 8004de8:	2322      	movs	r3, #34	; 0x22
 8004dea:	e014      	b.n	8004e16 <powf+0x7a>
 8004dec:	f000 f834 	bl	8004e58 <finitef>
 8004df0:	b998      	cbnz	r0, 8004e1a <powf+0x7e>
 8004df2:	eeb0 0a49 	vmov.f32	s0, s18
 8004df6:	f000 f82f 	bl	8004e58 <finitef>
 8004dfa:	b170      	cbz	r0, 8004e1a <powf+0x7e>
 8004dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8004e00:	f000 f82a 	bl	8004e58 <finitef>
 8004e04:	b148      	cbz	r0, 8004e1a <powf+0x7e>
 8004e06:	eef4 8a68 	vcmp.f32	s17, s17
 8004e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0e:	d7e9      	bvc.n	8004de4 <powf+0x48>
 8004e10:	f7ff fa88 	bl	8004324 <__errno>
 8004e14:	2321      	movs	r3, #33	; 0x21
 8004e16:	6003      	str	r3, [r0, #0]
 8004e18:	e00f      	b.n	8004e3a <powf+0x9e>
 8004e1a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	d10a      	bne.n	8004e3a <powf+0x9e>
 8004e24:	eeb0 0a49 	vmov.f32	s0, s18
 8004e28:	f000 f816 	bl	8004e58 <finitef>
 8004e2c:	b128      	cbz	r0, 8004e3a <powf+0x9e>
 8004e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8004e32:	f000 f811 	bl	8004e58 <finitef>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d1d4      	bne.n	8004de4 <powf+0x48>
 8004e3a:	eeb0 0a68 	vmov.f32	s0, s17
 8004e3e:	ecbd 8b04 	vpop	{d8-d9}
 8004e42:	bd08      	pop	{r3, pc}
 8004e44:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004e48:	e7f7      	b.n	8004e3a <powf+0x9e>

08004e4a <fabsf>:
 8004e4a:	ee10 3a10 	vmov	r3, s0
 8004e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	ee00 3a10 	vmov	s0, r3
 8004e56:	4770      	bx	lr

08004e58 <finitef>:
 8004e58:	b082      	sub	sp, #8
 8004e5a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004e5e:	9801      	ldr	r0, [sp, #4]
 8004e60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e64:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004e68:	bfac      	ite	ge
 8004e6a:	2000      	movge	r0, #0
 8004e6c:	2001      	movlt	r0, #1
 8004e6e:	b002      	add	sp, #8
 8004e70:	4770      	bx	lr
	...

08004e74 <__ieee754_powf>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	ee10 4a90 	vmov	r4, s1
 8004e7c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8004e80:	ed2d 8b02 	vpush	{d8}
 8004e84:	ee10 7a10 	vmov	r7, s0
 8004e88:	eeb0 8a40 	vmov.f32	s16, s0
 8004e8c:	eef0 8a60 	vmov.f32	s17, s1
 8004e90:	d10c      	bne.n	8004eac <__ieee754_powf+0x38>
 8004e92:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8004e96:	007f      	lsls	r7, r7, #1
 8004e98:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8004e9c:	f240 8292 	bls.w	80053c4 <__ieee754_powf+0x550>
 8004ea0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8004ea4:	ecbd 8b02 	vpop	{d8}
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eac:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8004eb0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004eb4:	dcf4      	bgt.n	8004ea0 <__ieee754_powf+0x2c>
 8004eb6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8004eba:	dd08      	ble.n	8004ece <__ieee754_powf+0x5a>
 8004ebc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004ec0:	d1ee      	bne.n	8004ea0 <__ieee754_powf+0x2c>
 8004ec2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8004ec6:	0064      	lsls	r4, r4, #1
 8004ec8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8004ecc:	e7e6      	b.n	8004e9c <__ieee754_powf+0x28>
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	da20      	bge.n	8004f14 <__ieee754_powf+0xa0>
 8004ed2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8004ed6:	da2d      	bge.n	8004f34 <__ieee754_powf+0xc0>
 8004ed8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8004edc:	f2c0 827b 	blt.w	80053d6 <__ieee754_powf+0x562>
 8004ee0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8004ee4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004ee8:	fa48 f603 	asr.w	r6, r8, r3
 8004eec:	fa06 f303 	lsl.w	r3, r6, r3
 8004ef0:	4543      	cmp	r3, r8
 8004ef2:	f040 8270 	bne.w	80053d6 <__ieee754_powf+0x562>
 8004ef6:	f006 0601 	and.w	r6, r6, #1
 8004efa:	f1c6 0602 	rsb	r6, r6, #2
 8004efe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8004f02:	d11f      	bne.n	8004f44 <__ieee754_powf+0xd0>
 8004f04:	2c00      	cmp	r4, #0
 8004f06:	f280 8263 	bge.w	80053d0 <__ieee754_powf+0x55c>
 8004f0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004f0e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004f12:	e7c7      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004f14:	2600      	movs	r6, #0
 8004f16:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8004f1a:	d1f0      	bne.n	8004efe <__ieee754_powf+0x8a>
 8004f1c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8004f20:	f000 8250 	beq.w	80053c4 <__ieee754_powf+0x550>
 8004f24:	dd08      	ble.n	8004f38 <__ieee754_powf+0xc4>
 8004f26:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800522c <__ieee754_powf+0x3b8>
 8004f2a:	2c00      	cmp	r4, #0
 8004f2c:	bfa8      	it	ge
 8004f2e:	eeb0 0a68 	vmovge.f32	s0, s17
 8004f32:	e7b7      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004f34:	2602      	movs	r6, #2
 8004f36:	e7ee      	b.n	8004f16 <__ieee754_powf+0xa2>
 8004f38:	2c00      	cmp	r4, #0
 8004f3a:	f280 8246 	bge.w	80053ca <__ieee754_powf+0x556>
 8004f3e:	eeb1 0a68 	vneg.f32	s0, s17
 8004f42:	e7af      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004f44:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8004f48:	d102      	bne.n	8004f50 <__ieee754_powf+0xdc>
 8004f4a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004f4e:	e7a9      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004f50:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004f54:	eeb0 0a48 	vmov.f32	s0, s16
 8004f58:	d107      	bne.n	8004f6a <__ieee754_powf+0xf6>
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	db05      	blt.n	8004f6a <__ieee754_powf+0xf6>
 8004f5e:	ecbd 8b02 	vpop	{d8}
 8004f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f66:	f000 bad7 	b.w	8005518 <__ieee754_sqrtf>
 8004f6a:	f7ff ff6e 	bl	8004e4a <fabsf>
 8004f6e:	b125      	cbz	r5, 8004f7a <__ieee754_powf+0x106>
 8004f70:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8004f74:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004f78:	d115      	bne.n	8004fa6 <__ieee754_powf+0x132>
 8004f7a:	2c00      	cmp	r4, #0
 8004f7c:	bfbc      	itt	lt
 8004f7e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004f82:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	da8c      	bge.n	8004ea4 <__ieee754_powf+0x30>
 8004f8a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8004f8e:	4335      	orrs	r5, r6
 8004f90:	d104      	bne.n	8004f9c <__ieee754_powf+0x128>
 8004f92:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004f96:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004f9a:	e783      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004f9c:	2e01      	cmp	r6, #1
 8004f9e:	d181      	bne.n	8004ea4 <__ieee754_powf+0x30>
 8004fa0:	eeb1 0a40 	vneg.f32	s0, s0
 8004fa4:	e77e      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004fa6:	0ff8      	lsrs	r0, r7, #31
 8004fa8:	3801      	subs	r0, #1
 8004faa:	ea56 0300 	orrs.w	r3, r6, r0
 8004fae:	d104      	bne.n	8004fba <__ieee754_powf+0x146>
 8004fb0:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004fb4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004fb8:	e774      	b.n	8004ea4 <__ieee754_powf+0x30>
 8004fba:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8004fbe:	dd73      	ble.n	80050a8 <__ieee754_powf+0x234>
 8004fc0:	4b9b      	ldr	r3, [pc, #620]	; (8005230 <__ieee754_powf+0x3bc>)
 8004fc2:	429d      	cmp	r5, r3
 8004fc4:	dc08      	bgt.n	8004fd8 <__ieee754_powf+0x164>
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	da0b      	bge.n	8004fe2 <__ieee754_powf+0x16e>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	ecbd 8b02 	vpop	{d8}
 8004fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd4:	f000 ba9a 	b.w	800550c <__math_oflowf>
 8004fd8:	4b96      	ldr	r3, [pc, #600]	; (8005234 <__ieee754_powf+0x3c0>)
 8004fda:	429d      	cmp	r5, r3
 8004fdc:	dd08      	ble.n	8004ff0 <__ieee754_powf+0x17c>
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	dcf3      	bgt.n	8004fca <__ieee754_powf+0x156>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	ecbd 8b02 	vpop	{d8}
 8004fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fec:	f000 ba88 	b.w	8005500 <__math_uflowf>
 8004ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ff4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ff8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8005238 <__ieee754_powf+0x3c4>
 8004ffc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005000:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005004:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005008:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800500c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005014:	eddf 7a89 	vldr	s15, [pc, #548]	; 800523c <__ieee754_powf+0x3c8>
 8005018:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800501c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8005240 <__ieee754_powf+0x3cc>
 8005020:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005024:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8005244 <__ieee754_powf+0x3d0>
 8005028:	eef0 6a67 	vmov.f32	s13, s15
 800502c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005030:	ee16 3a90 	vmov	r3, s13
 8005034:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	ee06 3a90 	vmov	s13, r3
 8005040:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005044:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005048:	3e01      	subs	r6, #1
 800504a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800504e:	4306      	orrs	r6, r0
 8005050:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005054:	f024 040f 	bic.w	r4, r4, #15
 8005058:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800505c:	bf08      	it	eq
 800505e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8005062:	ee07 4a10 	vmov	s14, r4
 8005066:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800506a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005076:	ee07 4a10 	vmov	s14, r4
 800507a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800507e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005082:	ee17 1a10 	vmov	r1, s14
 8005086:	2900      	cmp	r1, #0
 8005088:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800508c:	f340 817c 	ble.w	8005388 <__ieee754_powf+0x514>
 8005090:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005094:	f340 80f8 	ble.w	8005288 <__ieee754_powf+0x414>
 8005098:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	bf4c      	ite	mi
 80050a2:	2001      	movmi	r0, #1
 80050a4:	2000      	movpl	r0, #0
 80050a6:	e791      	b.n	8004fcc <__ieee754_powf+0x158>
 80050a8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80050ac:	bf01      	itttt	eq
 80050ae:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8005248 <__ieee754_powf+0x3d4>
 80050b2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80050b6:	f06f 0317 	mvneq.w	r3, #23
 80050ba:	ee17 5a90 	vmoveq	r5, s15
 80050be:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80050c2:	bf18      	it	ne
 80050c4:	2300      	movne	r3, #0
 80050c6:	3a7f      	subs	r2, #127	; 0x7f
 80050c8:	441a      	add	r2, r3
 80050ca:	4b60      	ldr	r3, [pc, #384]	; (800524c <__ieee754_powf+0x3d8>)
 80050cc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80050d0:	429d      	cmp	r5, r3
 80050d2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80050d6:	dd06      	ble.n	80050e6 <__ieee754_powf+0x272>
 80050d8:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <__ieee754_powf+0x3dc>)
 80050da:	429d      	cmp	r5, r3
 80050dc:	f340 80a4 	ble.w	8005228 <__ieee754_powf+0x3b4>
 80050e0:	3201      	adds	r2, #1
 80050e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80050e6:	2500      	movs	r5, #0
 80050e8:	4b5a      	ldr	r3, [pc, #360]	; (8005254 <__ieee754_powf+0x3e0>)
 80050ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80050ee:	ee07 1a10 	vmov	s14, r1
 80050f2:	edd3 5a00 	vldr	s11, [r3]
 80050f6:	4b58      	ldr	r3, [pc, #352]	; (8005258 <__ieee754_powf+0x3e4>)
 80050f8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80050fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005100:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005104:	1049      	asrs	r1, r1, #1
 8005106:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800510a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800510e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8005112:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005116:	ee07 1a90 	vmov	s15, r1
 800511a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800511e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8005122:	ee15 7a10 	vmov	r7, s10
 8005126:	401f      	ands	r7, r3
 8005128:	ee06 7a90 	vmov	s13, r7
 800512c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005130:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005134:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005138:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800513c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800525c <__ieee754_powf+0x3e8>
 8005140:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005260 <__ieee754_powf+0x3ec>
 8005144:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005148:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005264 <__ieee754_powf+0x3f0>
 800514c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005150:	eddf 5a39 	vldr	s11, [pc, #228]	; 8005238 <__ieee754_powf+0x3c4>
 8005154:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005158:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005268 <__ieee754_powf+0x3f4>
 800515c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005160:	eddf 5a42 	vldr	s11, [pc, #264]	; 800526c <__ieee754_powf+0x3f8>
 8005164:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005168:	eee7 5a27 	vfma.f32	s11, s14, s15
 800516c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8005170:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8005174:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005178:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800517c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8005180:	eef0 5a67 	vmov.f32	s11, s15
 8005184:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8005188:	ee75 5a87 	vadd.f32	s11, s11, s14
 800518c:	ee15 1a90 	vmov	r1, s11
 8005190:	4019      	ands	r1, r3
 8005192:	ee05 1a90 	vmov	s11, r1
 8005196:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800519a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800519e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80051a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80051aa:	eeb0 6a67 	vmov.f32	s12, s15
 80051ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80051b2:	ee16 1a10 	vmov	r1, s12
 80051b6:	4019      	ands	r1, r3
 80051b8:	ee07 1a10 	vmov	s14, r1
 80051bc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80051c0:	ee06 1a10 	vmov	s12, r1
 80051c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051c8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005270 <__ieee754_powf+0x3fc>
 80051cc:	4929      	ldr	r1, [pc, #164]	; (8005274 <__ieee754_powf+0x400>)
 80051ce:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8005278 <__ieee754_powf+0x404>
 80051d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800527c <__ieee754_powf+0x408>
 80051da:	eee6 7a07 	vfma.f32	s15, s12, s14
 80051de:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80051e2:	ed91 7a00 	vldr	s14, [r1]
 80051e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ea:	ee07 2a10 	vmov	s14, r2
 80051ee:	eef0 6a67 	vmov.f32	s13, s15
 80051f2:	4a23      	ldr	r2, [pc, #140]	; (8005280 <__ieee754_powf+0x40c>)
 80051f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80051f8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80051fc:	ed92 5a00 	vldr	s10, [r2]
 8005200:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005204:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005208:	ee76 6a87 	vadd.f32	s13, s13, s14
 800520c:	ee16 2a90 	vmov	r2, s13
 8005210:	4013      	ands	r3, r2
 8005212:	ee06 3a90 	vmov	s13, r3
 8005216:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800521a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800521e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8005222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005226:	e70f      	b.n	8005048 <__ieee754_powf+0x1d4>
 8005228:	2501      	movs	r5, #1
 800522a:	e75d      	b.n	80050e8 <__ieee754_powf+0x274>
 800522c:	00000000 	.word	0x00000000
 8005230:	3f7ffff3 	.word	0x3f7ffff3
 8005234:	3f800007 	.word	0x3f800007
 8005238:	3eaaaaab 	.word	0x3eaaaaab
 800523c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005240:	36eca570 	.word	0x36eca570
 8005244:	3fb8aa00 	.word	0x3fb8aa00
 8005248:	4b800000 	.word	0x4b800000
 800524c:	001cc471 	.word	0x001cc471
 8005250:	005db3d6 	.word	0x005db3d6
 8005254:	080056a4 	.word	0x080056a4
 8005258:	fffff000 	.word	0xfffff000
 800525c:	3e6c3255 	.word	0x3e6c3255
 8005260:	3e53f142 	.word	0x3e53f142
 8005264:	3e8ba305 	.word	0x3e8ba305
 8005268:	3edb6db7 	.word	0x3edb6db7
 800526c:	3f19999a 	.word	0x3f19999a
 8005270:	3f76384f 	.word	0x3f76384f
 8005274:	080056b4 	.word	0x080056b4
 8005278:	3f763800 	.word	0x3f763800
 800527c:	369dc3a0 	.word	0x369dc3a0
 8005280:	080056ac 	.word	0x080056ac
 8005284:	3338aa3c 	.word	0x3338aa3c
 8005288:	f040 8093 	bne.w	80053b2 <__ieee754_powf+0x53e>
 800528c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005284 <__ieee754_powf+0x410>
 8005290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005294:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005298:	eef4 6ac7 	vcmpe.f32	s13, s14
 800529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a0:	f73f aefa 	bgt.w	8005098 <__ieee754_powf+0x224>
 80052a4:	15db      	asrs	r3, r3, #23
 80052a6:	3b7e      	subs	r3, #126	; 0x7e
 80052a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80052ac:	4118      	asrs	r0, r3
 80052ae:	4408      	add	r0, r1
 80052b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80052b4:	4a49      	ldr	r2, [pc, #292]	; (80053dc <__ieee754_powf+0x568>)
 80052b6:	3b7f      	subs	r3, #127	; 0x7f
 80052b8:	411a      	asrs	r2, r3
 80052ba:	4002      	ands	r2, r0
 80052bc:	ee07 2a10 	vmov	s14, r2
 80052c0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80052c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80052c8:	f1c3 0317 	rsb	r3, r3, #23
 80052cc:	4118      	asrs	r0, r3
 80052ce:	2900      	cmp	r1, #0
 80052d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052d4:	bfb8      	it	lt
 80052d6:	4240      	neglt	r0, r0
 80052d8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80052dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80053e0 <__ieee754_powf+0x56c>
 80052e0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80053e4 <__ieee754_powf+0x570>
 80052e4:	ee17 3a10 	vmov	r3, s14
 80052e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052ec:	f023 030f 	bic.w	r3, r3, #15
 80052f0:	ee07 3a10 	vmov	s14, r3
 80052f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80052fc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005300:	eddf 7a39 	vldr	s15, [pc, #228]	; 80053e8 <__ieee754_powf+0x574>
 8005304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005308:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800530c:	eef0 6a67 	vmov.f32	s13, s15
 8005310:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005314:	eef0 5a66 	vmov.f32	s11, s13
 8005318:	eee7 5a46 	vfms.f32	s11, s14, s12
 800531c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005320:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005324:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80053ec <__ieee754_powf+0x578>
 8005328:	eddf 5a31 	vldr	s11, [pc, #196]	; 80053f0 <__ieee754_powf+0x57c>
 800532c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005330:	eddf 5a30 	vldr	s11, [pc, #192]	; 80053f4 <__ieee754_powf+0x580>
 8005334:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005338:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80053f8 <__ieee754_powf+0x584>
 800533c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005340:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053fc <__ieee754_powf+0x588>
 8005344:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005348:	eeb0 6a66 	vmov.f32	s12, s13
 800534c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8005350:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005354:	ee66 5a86 	vmul.f32	s11, s13, s12
 8005358:	ee36 6a47 	vsub.f32	s12, s12, s14
 800535c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8005360:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8005364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800536c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005370:	ee10 3a10 	vmov	r3, s0
 8005374:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800537c:	da1f      	bge.n	80053be <__ieee754_powf+0x54a>
 800537e:	f000 f843 	bl	8005408 <scalbnf>
 8005382:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005386:	e58d      	b.n	8004ea4 <__ieee754_powf+0x30>
 8005388:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <__ieee754_powf+0x58c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	dd07      	ble.n	800539e <__ieee754_powf+0x52a>
 800538e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	bf4c      	ite	mi
 8005398:	2001      	movmi	r0, #1
 800539a:	2000      	movpl	r0, #0
 800539c:	e622      	b.n	8004fe4 <__ieee754_powf+0x170>
 800539e:	d108      	bne.n	80053b2 <__ieee754_powf+0x53e>
 80053a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053a4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	f6ff af7a 	blt.w	80052a4 <__ieee754_powf+0x430>
 80053b0:	e7ed      	b.n	800538e <__ieee754_powf+0x51a>
 80053b2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80053b6:	f73f af75 	bgt.w	80052a4 <__ieee754_powf+0x430>
 80053ba:	2000      	movs	r0, #0
 80053bc:	e78c      	b.n	80052d8 <__ieee754_powf+0x464>
 80053be:	ee00 3a10 	vmov	s0, r3
 80053c2:	e7de      	b.n	8005382 <__ieee754_powf+0x50e>
 80053c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053c8:	e56c      	b.n	8004ea4 <__ieee754_powf+0x30>
 80053ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005404 <__ieee754_powf+0x590>
 80053ce:	e569      	b.n	8004ea4 <__ieee754_powf+0x30>
 80053d0:	eeb0 0a48 	vmov.f32	s0, s16
 80053d4:	e566      	b.n	8004ea4 <__ieee754_powf+0x30>
 80053d6:	2600      	movs	r6, #0
 80053d8:	e591      	b.n	8004efe <__ieee754_powf+0x8a>
 80053da:	bf00      	nop
 80053dc:	ff800000 	.word	0xff800000
 80053e0:	3f317218 	.word	0x3f317218
 80053e4:	3f317200 	.word	0x3f317200
 80053e8:	35bfbe8c 	.word	0x35bfbe8c
 80053ec:	b5ddea0e 	.word	0xb5ddea0e
 80053f0:	3331bb4c 	.word	0x3331bb4c
 80053f4:	388ab355 	.word	0x388ab355
 80053f8:	bb360b61 	.word	0xbb360b61
 80053fc:	3e2aaaab 	.word	0x3e2aaaab
 8005400:	43160000 	.word	0x43160000
 8005404:	00000000 	.word	0x00000000

08005408 <scalbnf>:
 8005408:	ee10 3a10 	vmov	r3, s0
 800540c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005410:	d02b      	beq.n	800546a <scalbnf+0x62>
 8005412:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005416:	d302      	bcc.n	800541e <scalbnf+0x16>
 8005418:	ee30 0a00 	vadd.f32	s0, s0, s0
 800541c:	4770      	bx	lr
 800541e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005422:	d123      	bne.n	800546c <scalbnf+0x64>
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <scalbnf+0xb0>)
 8005426:	eddf 7a25 	vldr	s15, [pc, #148]	; 80054bc <scalbnf+0xb4>
 800542a:	4298      	cmp	r0, r3
 800542c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005430:	db17      	blt.n	8005462 <scalbnf+0x5a>
 8005432:	ee10 3a10 	vmov	r3, s0
 8005436:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800543a:	3a19      	subs	r2, #25
 800543c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005440:	4288      	cmp	r0, r1
 8005442:	dd15      	ble.n	8005470 <scalbnf+0x68>
 8005444:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80054c0 <scalbnf+0xb8>
 8005448:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80054c4 <scalbnf+0xbc>
 800544c:	ee10 3a10 	vmov	r3, s0
 8005450:	eeb0 7a67 	vmov.f32	s14, s15
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfb8      	it	lt
 8005458:	eef0 7a66 	vmovlt.f32	s15, s13
 800545c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005460:	4770      	bx	lr
 8005462:	eddf 7a19 	vldr	s15, [pc, #100]	; 80054c8 <scalbnf+0xc0>
 8005466:	ee27 0a80 	vmul.f32	s0, s15, s0
 800546a:	4770      	bx	lr
 800546c:	0dd2      	lsrs	r2, r2, #23
 800546e:	e7e5      	b.n	800543c <scalbnf+0x34>
 8005470:	4410      	add	r0, r2
 8005472:	28fe      	cmp	r0, #254	; 0xfe
 8005474:	dce6      	bgt.n	8005444 <scalbnf+0x3c>
 8005476:	2800      	cmp	r0, #0
 8005478:	dd06      	ble.n	8005488 <scalbnf+0x80>
 800547a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800547e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005482:	ee00 3a10 	vmov	s0, r3
 8005486:	4770      	bx	lr
 8005488:	f110 0f16 	cmn.w	r0, #22
 800548c:	da09      	bge.n	80054a2 <scalbnf+0x9a>
 800548e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80054c8 <scalbnf+0xc0>
 8005492:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80054cc <scalbnf+0xc4>
 8005496:	ee10 3a10 	vmov	r3, s0
 800549a:	eeb0 7a67 	vmov.f32	s14, s15
 800549e:	2b00      	cmp	r3, #0
 80054a0:	e7d9      	b.n	8005456 <scalbnf+0x4e>
 80054a2:	3019      	adds	r0, #25
 80054a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80054ac:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80054d0 <scalbnf+0xc8>
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	e7d7      	b.n	8005466 <scalbnf+0x5e>
 80054b6:	bf00      	nop
 80054b8:	ffff3cb0 	.word	0xffff3cb0
 80054bc:	4c000000 	.word	0x4c000000
 80054c0:	7149f2ca 	.word	0x7149f2ca
 80054c4:	f149f2ca 	.word	0xf149f2ca
 80054c8:	0da24260 	.word	0x0da24260
 80054cc:	8da24260 	.word	0x8da24260
 80054d0:	33000000 	.word	0x33000000

080054d4 <with_errnof>:
 80054d4:	b513      	push	{r0, r1, r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80054dc:	f7fe ff22 	bl	8004324 <__errno>
 80054e0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80054e4:	6004      	str	r4, [r0, #0]
 80054e6:	b002      	add	sp, #8
 80054e8:	bd10      	pop	{r4, pc}

080054ea <xflowf>:
 80054ea:	b130      	cbz	r0, 80054fa <xflowf+0x10>
 80054ec:	eef1 7a40 	vneg.f32	s15, s0
 80054f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80054f4:	2022      	movs	r0, #34	; 0x22
 80054f6:	f7ff bfed 	b.w	80054d4 <with_errnof>
 80054fa:	eef0 7a40 	vmov.f32	s15, s0
 80054fe:	e7f7      	b.n	80054f0 <xflowf+0x6>

08005500 <__math_uflowf>:
 8005500:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005508 <__math_uflowf+0x8>
 8005504:	f7ff bff1 	b.w	80054ea <xflowf>
 8005508:	10000000 	.word	0x10000000

0800550c <__math_oflowf>:
 800550c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005514 <__math_oflowf+0x8>
 8005510:	f7ff bfeb 	b.w	80054ea <xflowf>
 8005514:	70000000 	.word	0x70000000

08005518 <__ieee754_sqrtf>:
 8005518:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800551c:	4770      	bx	lr
	...

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
