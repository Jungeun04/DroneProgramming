
shakyou.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cac  08002cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000072a8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b4c  00000000  00000000  00027327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000808  00000000  00000000  00028e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005d9  00000000  00000000  00029680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020925  00000000  00000000  00029c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008e7c  00000000  00000000  0004a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0844  00000000  00000000  000533fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f28  00000000  00000000  00113c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00115b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c64 	.word	0x08002c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c64 	.word	0x08002c64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	041a      	lsls	r2, r3, #16
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	619a      	str	r2, [r3, #24]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f0:	4907      	ldr	r1, [pc, #28]	; (8000510 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
 8000528:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800052a:	2080      	movs	r0, #128	; 0x80
 800052c:	f7ff ffda 	bl	80004e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000530:	2004      	movs	r0, #4
 8000532:	f7ff ffd7 	bl	80004e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000536:	2002      	movs	r0, #2
 8000538:	f7ff ffd4 	bl	80004e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin);
 800053c:	2107      	movs	r1, #7
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <MX_GPIO_Init+0x58>)
 8000540:	f7ff ffc0 	bl	80004c4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000544:	2307      	movs	r3, #7
 8000546:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <MX_GPIO_Init+0x58>)
 800055e:	f001 fbce 	bl	8001cfe <LL_GPIO_Init>

}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40020800 	.word	0x40020800

08000570 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f043 0201 	orr.w	r2, r3, #1
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a1a      	ldr	r2, [r3, #32]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	621a      	str	r2, [r3, #32]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6a1a      	ldr	r2, [r3, #32]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	401a      	ands	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	621a      	str	r2, [r3, #32]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b089      	sub	sp, #36	; 0x24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	330c      	adds	r3, #12
 80005e2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	e853 3f00 	ldrex	r3, [r3]
 80005ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	f043 0320 	orr.w	r3, r3, #32
 80005f2:	61fb      	str	r3, [r7, #28]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	330c      	adds	r3, #12
 80005f8:	69fa      	ldr	r2, [r7, #28]
 80005fa:	61ba      	str	r2, [r7, #24]
 80005fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005fe:	6979      	ldr	r1, [r7, #20]
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	e841 2300 	strex	r3, r2, [r1]
 8000606:	613b      	str	r3, [r7, #16]
   return(result);
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1e7      	bne.n	80005de <LL_USART_EnableIT_RXNE+0x8>
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3724      	adds	r7, #36	; 0x24
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000628:	78fa      	ldrb	r2, [r7, #3]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4013      	ands	r3, r2
 8000650:	041a      	lsls	r2, r3, #16
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	43d9      	mvns	r1, r3
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	400b      	ands	r3, r1
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	619a      	str	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fc60 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f860 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ff4c 	bl	8000514 <MX_GPIO_Init>
  MX_TIM3_Init();
 800067c:	f000 fa7e 	bl	8000b7c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000680:	f000 fbce 	bl	8000e20 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <main+0xb8>)
 8000686:	f7ff ff73 	bl	8000570 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0xb8>)
 8000690:	f7ff ff7e 	bl	8000590 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // 2kHz
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <main+0xb8>)
 8000696:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fcbb 	bl	8001018 <HAL_Delay>
  TIM3->PSC = 1500; // 3kHz
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <main+0xb8>)
 80006a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fcb4 	bl	8001018 <HAL_Delay>
  TIM3->PSC = 1000; // 4kHz
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <main+0xb8>)
 80006b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f000 fcad 	bl	8001018 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80006be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <main+0xb8>)
 80006c4:	f7ff ff75 	bl	80005b2 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <main+0xbc>)
 80006ca:	f7ff ff84 	bl	80005d6 <LL_USART_EnableIT_RXNE>
	  /* USER CODE BEGIN 3 */
	  // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 );
	  // LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 );
	  // LL_USART_TransmitData8(USART6, 'A');
	  // HAL_Delay(1000);
	  if(uart6_rx_flag == 1)
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <main+0xc0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d1fb      	bne.n	80006ce <main+0x62>
	  {
		  uart6_rx_flag = 0;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART6, uart6_rx_data);
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <main+0xc4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <main+0xbc>)
 80006e4:	f7ff ff9a 	bl	800061c <LL_USART_TransmitData8>

		  switch(uart6_rx_data)
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <main+0xc4>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b32      	cmp	r3, #50	; 0x32
 80006ee:	d011      	beq.n	8000714 <main+0xa8>
 80006f0:	2b32      	cmp	r3, #50	; 0x32
 80006f2:	dcec      	bgt.n	80006ce <main+0x62>
 80006f4:	2b30      	cmp	r3, #48	; 0x30
 80006f6:	d002      	beq.n	80006fe <main+0x92>
 80006f8:	2b31      	cmp	r3, #49	; 0x31
 80006fa:	d005      	beq.n	8000708 <main+0x9c>
 80006fc:	e010      	b.n	8000720 <main+0xb4>
		  {
		  case '0':
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 );
 80006fe:	2107      	movs	r1, #7
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <main+0xc8>)
 8000702:	f7ff ff9a 	bl	800063a <LL_GPIO_TogglePin>
			  break;
 8000706:	e00b      	b.n	8000720 <main+0xb4>
		  case '1':
			  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <main+0xb8>)
 800070e:	f7ff ff3f 	bl	8000590 <LL_TIM_CC_EnableChannel>
			  break;
 8000712:	e005      	b.n	8000720 <main+0xb4>
		  case '2':
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <main+0xb8>)
 800071a:	f7ff ff4a 	bl	80005b2 <LL_TIM_CC_DisableChannel>
			  break;
 800071e:	bf00      	nop
	  if(uart6_rx_flag == 1)
 8000720:	e7d5      	b.n	80006ce <main+0x62>
 8000722:	bf00      	nop
 8000724:	40000400 	.word	0x40000400
 8000728:	40011400 	.word	0x40011400
 800072c:	20000029 	.word	0x20000029
 8000730:	20000028 	.word	0x20000028
 8000734:	40020800 	.word	0x40020800

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fa60 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <SystemClock_Config+0xd0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ac:	23a8      	movs	r3, #168	; 0xa8
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fd35 	bl	800122c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f820 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2105      	movs	r1, #5
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 ff96 	bl	800171c <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f6:	f000 f809 	bl	800080c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <LL_USART_IsActiveFlag_RXNE>:
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f003 0320 	and.w	r3, r3, #32
 8000878:	2b20      	cmp	r3, #32
 800087a:	bf0c      	ite	eq
 800087c:	2301      	moveq	r3, #1
 800087e:	2300      	movne	r3, #0
 8000880:	b2db      	uxtb	r3, r3
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_USART_ClearFlag_RXNE>:
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f06f 0220 	mvn.w	r2, #32
 800089c:	601a      	str	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <LL_USART_ReceiveData8>:
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	b2db      	uxtb	r3, r3
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 fb62 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <USART6_IRQHandler+0x30>)
 800091e:	f7ff ffa3 	bl	8000868 <LL_USART_IsActiveFlag_RXNE>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00c      	beq.n	8000942 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <USART6_IRQHandler+0x30>)
 800092a:	f7ff ffb0 	bl	800088e <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <USART6_IRQHandler+0x30>)
 8000930:	f7ff ffbb 	bl	80008aa <LL_USART_ReceiveData8>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <USART6_IRQHandler+0x34>)
 800093a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <USART6_IRQHandler+0x38>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40011400 	.word	0x40011400
 800094c:	20000028 	.word	0x20000028
 8000950:	20000029 	.word	0x20000029

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <LL_TIM_DisableARRPreload>:
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d01c      	beq.n	80009e2 <LL_TIM_OC_DisableFast+0x4a>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d017      	beq.n	80009de <LL_TIM_OC_DisableFast+0x46>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	d012      	beq.n	80009da <LL_TIM_OC_DisableFast+0x42>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	2b40      	cmp	r3, #64	; 0x40
 80009b8:	d00d      	beq.n	80009d6 <LL_TIM_OC_DisableFast+0x3e>
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c0:	d007      	beq.n	80009d2 <LL_TIM_OC_DisableFast+0x3a>
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009c8:	d101      	bne.n	80009ce <LL_TIM_OC_DisableFast+0x36>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e00a      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009ce:	2306      	movs	r3, #6
 80009d0:	e008      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <LL_TIM_OC_DisableFast+0x4c>
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3318      	adds	r3, #24
 80009ea:	4619      	mov	r1, r3
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <LL_TIM_OC_DisableFast+0x84>)
 80009f0:	5cd3      	ldrb	r3, [r2, r3]
 80009f2:	440b      	add	r3, r1
 80009f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	4908      	ldr	r1, [pc, #32]	; (8000a20 <LL_TIM_OC_DisableFast+0x88>)
 80009fe:	5ccb      	ldrb	r3, [r1, r3]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2304      	movs	r3, #4
 8000a04:	408b      	lsls	r3, r1
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	601a      	str	r2, [r3, #0]

}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	08002c94 	.word	0x08002c94
 8000a20:	08002c9c 	.word	0x08002c9c

08000a24 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d01c      	beq.n	8000a6e <LL_TIM_OC_EnablePreload+0x4a>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d017      	beq.n	8000a6a <LL_TIM_OC_EnablePreload+0x46>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d012      	beq.n	8000a66 <LL_TIM_OC_EnablePreload+0x42>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2b40      	cmp	r3, #64	; 0x40
 8000a44:	d00d      	beq.n	8000a62 <LL_TIM_OC_EnablePreload+0x3e>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a4c:	d007      	beq.n	8000a5e <LL_TIM_OC_EnablePreload+0x3a>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a54:	d101      	bne.n	8000a5a <LL_TIM_OC_EnablePreload+0x36>
 8000a56:	2305      	movs	r3, #5
 8000a58:	e00a      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	e008      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a5e:	2304      	movs	r3, #4
 8000a60:	e006      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e004      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e002      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <LL_TIM_OC_EnablePreload+0x4c>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3318      	adds	r3, #24
 8000a76:	4619      	mov	r1, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LL_TIM_OC_EnablePreload+0x80>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	440b      	add	r3, r1
 8000a80:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <LL_TIM_OC_EnablePreload+0x84>)
 8000a8a:	5ccb      	ldrb	r3, [r1, r3]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2308      	movs	r3, #8
 8000a90:	408b      	lsls	r3, r1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	08002c94 	.word	0x08002c94
 8000aa8:	08002c9c 	.word	0x08002c9c

08000aac <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000abe:	f023 0307 	bic.w	r3, r3, #7
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	605a      	str	r2, [r3, #4]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_AHB1_GRP1_EnableClock>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4013      	ands	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800

08000b4c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2220      	movs	r2, #32
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 f836 	bl	8002c0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff ffcb 	bl	8000b4c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8000bb6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000bba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8000bc0:	2314      	movs	r3, #20
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000bc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4822      	ldr	r0, [pc, #136]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000bd0:	f001 fab4 	bl	800213c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000bd4:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000bd6:	f7ff fecf 	bl	8000978 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000bde:	f7ff ff65 	bl	8000aac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000be8:	f7ff ff1c 	bl	8000a24 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	; 0x60
 8000bee:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	461a      	mov	r2, r3
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000c0c:	f001 fb30 	bl	8002270 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000c16:	f7ff febf 	bl	8000998 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000c1e:	f7ff ff5a 	bl	8000ad6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_TIM3_Init+0xdc>)
 8000c24:	f7ff ff6a 	bl	8000afc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ff77 	bl	8000b1c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c32:	2302      	movs	r3, #2
 8000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_TIM3_Init+0xe0>)
 8000c4c:	f001 f857 	bl	8001cfe <LL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3750      	adds	r7, #80	; 0x50
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40000400 	.word	0x40000400
 8000c5c:	40020400 	.word	0x40020400

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_USART_Enable>:
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60da      	str	r2, [r3, #12]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <LL_USART_ConfigAsyncMode>:
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	615a      	str	r2, [r3, #20]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <LL_AHB1_GRP1_EnableClock>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40023800 	.word	0x40023800

08000df0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40023800 	.word	0x40023800

08000e20 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8000e4a:	2020      	movs	r0, #32
 8000e4c:	f7ff ffd0 	bl	8000df0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f7ff ffb5 	bl	8000dc0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000e56:	23c0      	movs	r3, #192	; 0xc0
 8000e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <MX_USART6_UART_Init+0xb8>)
 8000e74:	f000 ff43 	bl	8001cfe <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e78:	f7ff fef2 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff42 	bl	8000d0c <NVIC_EncodePriority>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2047      	movs	r0, #71	; 0x47
 8000e8e:	f7ff ff13 	bl	8000cb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8000e92:	2047      	movs	r0, #71	; 0x47
 8000e94:	f7ff fef2 	bl	8000c7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e98:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e9c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_USART6_UART_Init+0xbc>)
 8000ebe:	f001 fe25 	bl	8002b0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_USART6_UART_Init+0xbc>)
 8000ec4:	f7ff ff65 	bl	8000d92 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_USART6_UART_Init+0xbc>)
 8000eca:	f7ff ff52 	bl	8000d72 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	; 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40011400 	.word	0x40011400

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff fd23 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f001 fe85 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fbab 	bl	800066c <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f24:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8000f28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f2c:	20000030 	.word	0x20000030

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f931 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fc56 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f93b 	bl	8001212 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f911 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	2000002c 	.word	0x2000002c

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000002c 	.word	0x2000002c

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008

08001060 <__NVIC_SetPriorityGrouping>:
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff47 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff5c 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffb0 	bl	8001180 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e267      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d075      	beq.n	8001336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d00c      	beq.n	8001270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d10b      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	4b7e      	ldr	r3, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d05b      	beq.n	8001334 <HAL_RCC_OscConfig+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d157      	bne.n	8001334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e242      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x74>
 8001292:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a75      	ldr	r2, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x98>
 80012aa:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6f      	ldr	r2, [pc, #444]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6c      	ldr	r2, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a68      	ldr	r2, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a65      	ldr	r2, [pc, #404]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fe8c 	bl	8001000 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fe88 	bl	8001000 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e207      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xc0>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fe78 	bl	8001000 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fe74 	bl	8001000 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1f3      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0xe8>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d063      	beq.n	800140a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1c7      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_RCC_OscConfig+0x240>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e03a      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x244>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff fe2d 	bl	8001000 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fe29 	bl	8001000 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1a8      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4925      	ldr	r1, [pc, #148]	; (800146c <HAL_RCC_OscConfig+0x240>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x244>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fe0c 	bl	8001000 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fe08 	bl	8001000 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e187      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d036      	beq.n	8001484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d016      	beq.n	800144c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x248>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fdec 	bl	8001000 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fde8 	bl	8001000 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e167      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_OscConfig+0x240>)
 8001440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x200>
 800144a:	e01b      	b.n	8001484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x248>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fdd5 	bl	8001000 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	e00e      	b.n	8001478 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fdd1 	bl	8001000 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d907      	bls.n	8001478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e150      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
 800146c:	40023800 	.word	0x40023800
 8001470:	42470000 	.word	0x42470000
 8001474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ea      	bne.n	800145a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8097 	beq.w	80015c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a73      	ldr	r2, [pc, #460]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fd91 	bl	8001000 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff fd8d 	bl	8001000 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e10c      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x474>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x2ea>
 8001508:	4b64      	ldr	r3, [pc, #400]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	e01c      	b.n	8001550 <HAL_RCC_OscConfig+0x324>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x30c>
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a5e      	ldr	r2, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0x324>
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a57      	ldr	r2, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0304 	bic.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fd52 	bl	8001000 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fd4e 	bl	8001000 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0cb      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ee      	beq.n	8001560 <HAL_RCC_OscConfig+0x334>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fd3c 	bl	8001000 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff fd38 	bl	8001000 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0b5      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ee      	bne.n	800158c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a1 	beq.w	800170c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x470>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d05c      	beq.n	8001690 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d141      	bne.n	8001662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fd0c 	bl	8001000 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fd08 	bl	8001000 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e087      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69da      	ldr	r2, [r3, #28]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	019b      	lsls	r3, r3, #6
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3b01      	subs	r3, #1
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fce1 	bl	8001000 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fcdd 	bl	8001000 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e05c      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x416>
 8001660:	e054      	b.n	800170c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x478>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fcca 	bl	8001000 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fcc6 	bl	8001000 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e045      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x470>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x444>
 800168e:	e03d      	b.n	800170c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e038      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
 80016a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d028      	beq.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d121      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11a      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d111      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	3b01      	subs	r3, #1
 80016f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0cc      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d90c      	bls.n	8001758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d044      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e067      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4934      	ldr	r1, [pc, #208]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff fbf8 	bl	8001000 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fbf4 	bl	8001000 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e04f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d20c      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb58 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08002c7c 	.word	0x08002c7c
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	b094      	sub	sp, #80	; 0x50
 80018ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f8:	2300      	movs	r3, #0
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001900:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d00d      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 800190c:	2b08      	cmp	r3, #8
 800190e:	f200 80e1 	bhi.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x34>
 8001916:	2b04      	cmp	r3, #4
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x3a>
 800191a:	e0db      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_GetSysClockFreq+0x204>)
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001920:	e0db      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001926:	e0d8      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	2200      	movs	r2, #0
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
 8001948:	63fa      	str	r2, [r7, #60]	; 0x3c
 800194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
 8001956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4621      	mov	r1, r4
 8001974:	1a51      	subs	r1, r2, r1
 8001976:	6139      	str	r1, [r7, #16]
 8001978:	4629      	mov	r1, r5
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800198c:	4659      	mov	r1, fp
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	4651      	mov	r1, sl
 8001992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001996:	4651      	mov	r1, sl
 8001998:	018a      	lsls	r2, r1, #6
 800199a:	4651      	mov	r1, sl
 800199c:	ebb2 0801 	subs.w	r8, r2, r1
 80019a0:	4659      	mov	r1, fp
 80019a2:	eb63 0901 	sbc.w	r9, r3, r1
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ba:	4690      	mov	r8, r2
 80019bc:	4699      	mov	r9, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	eb18 0303 	adds.w	r3, r8, r3
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	462b      	mov	r3, r5
 80019c8:	eb49 0303 	adc.w	r3, r9, r3
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019da:	4629      	mov	r1, r5
 80019dc:	024b      	lsls	r3, r1, #9
 80019de:	4621      	mov	r1, r4
 80019e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e4:	4621      	mov	r1, r4
 80019e6:	024a      	lsls	r2, r1, #9
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ee:	2200      	movs	r2, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019f8:	f7fe fbe6 	bl	80001c8 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a04:	e058      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4611      	mov	r1, r2
 8001a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a20:	4642      	mov	r2, r8
 8001a22:	464b      	mov	r3, r9
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0159      	lsls	r1, r3, #5
 8001a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a32:	0150      	lsls	r0, r2, #5
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4641      	mov	r1, r8
 8001a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a3e:	4649      	mov	r1, r9
 8001a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a58:	ebb2 040a 	subs.w	r4, r2, sl
 8001a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	00eb      	lsls	r3, r5, #3
 8001a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6e:	00e2      	lsls	r2, r4, #3
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	18e3      	adds	r3, r4, r3
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	eb45 0303 	adc.w	r3, r5, r3
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	028b      	lsls	r3, r1, #10
 8001a92:	4621      	mov	r1, r4
 8001a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a98:	4621      	mov	r1, r4
 8001a9a:	028a      	lsls	r2, r1, #10
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	61fa      	str	r2, [r7, #28]
 8001aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aac:	f7fe fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <LL_GPIO_SetPinMode>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	613b      	str	r3, [r7, #16]
  return result;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_GPIO_SetPinOutputType>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_GPIO_SetPinSpeed>:
{
 8001b82:	b480      	push	{r7}
 8001b84:	b089      	sub	sp, #36	; 0x24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	613b      	str	r3, [r7, #16]
  return result;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2103      	movs	r1, #3
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3724      	adds	r7, #36	; 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_GPIO_SetPinPull>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	613b      	str	r3, [r7, #16]
  return result;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2103      	movs	r1, #3
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	61bb      	str	r3, [r7, #24]
  return result;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	60da      	str	r2, [r3, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_GPIO_SetAFPin_0_7>:
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b089      	sub	sp, #36	; 0x24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	613b      	str	r3, [r7, #16]
  return result;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	210f      	movs	r1, #15
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	61bb      	str	r3, [r7, #24]
  return result;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	621a      	str	r2, [r3, #32]
}
 8001c90:	bf00      	nop
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_GPIO_SetAFPin_8_15>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	613b      	str	r3, [r7, #16]
  return result;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	61bb      	str	r3, [r7, #24]
  return result;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cf2:	bf00      	nop
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b088      	sub	sp, #32
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	613b      	str	r3, [r7, #16]
  return result;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d28:	e050      	b.n	8001dcc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d042      	beq.n	8001dc6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d003      	beq.n	8001d50 <LL_GPIO_Init+0x52>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d10d      	bne.n	8001d6c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	461a      	mov	r2, r3
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff12 	bl	8001b82 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fef3 	bl	8001b52 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	461a      	mov	r2, r3
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff33 	bl	8001be0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d11a      	bne.n	8001db8 <LL_GPIO_Init+0xba>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
  return result;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d807      	bhi.n	8001daa <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	69b9      	ldr	r1, [r7, #24]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff4b 	bl	8001c3e <LL_GPIO_SetAFPin_0_7>
 8001da8:	e006      	b.n	8001db8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	461a      	mov	r2, r3
 8001db0:	69b9      	ldr	r1, [r7, #24]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff72 	bl	8001c9c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fe97 	bl	8001af4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1a7      	bne.n	8001d2a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <LL_RCC_GetSysClkSource+0x18>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <LL_RCC_GetAHBPrescaler+0x18>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <LL_RCC_PLL_GetMainSource+0x18>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <LL_RCC_PLL_GetN+0x18>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40023800 	.word	0x40023800

08001e8c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <LL_RCC_PLL_GetP+0x18>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <LL_RCC_PLL_GetDivider+0x18>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ecc:	f000 f820 	bl	8001f10 <RCC_GetSystemClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f840 	bl	8001f60 <RCC_GetHCLKClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f84e 	bl	8001f8c <RCC_GetPCLK1ClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f85a 	bl	8001fb4 <RCC_GetPCLK2ClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f1a:	f7ff ff63 	bl	8001de4 <LL_RCC_GetSysClkSource>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d00c      	beq.n	8001f3e <RCC_GetSystemClockFreq+0x2e>
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d80f      	bhi.n	8001f48 <RCC_GetSystemClockFreq+0x38>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <RCC_GetSystemClockFreq+0x22>
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d003      	beq.n	8001f38 <RCC_GetSystemClockFreq+0x28>
 8001f30:	e00a      	b.n	8001f48 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <RCC_GetSystemClockFreq+0x48>)
 8001f34:	607b      	str	r3, [r7, #4]
      break;
 8001f36:	e00a      	b.n	8001f4e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <RCC_GetSystemClockFreq+0x4c>)
 8001f3a:	607b      	str	r3, [r7, #4]
      break;
 8001f3c:	e007      	b.n	8001f4e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001f3e:	2008      	movs	r0, #8
 8001f40:	f000 f84c 	bl	8001fdc <RCC_PLL_GetFreqDomain_SYS>
 8001f44:	6078      	str	r0, [r7, #4]
      break;
 8001f46:	e002      	b.n	8001f4e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <RCC_GetSystemClockFreq+0x48>)
 8001f4a:	607b      	str	r3, [r7, #4]
      break;
 8001f4c:	bf00      	nop
  }

  return frequency;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f68:	f7ff ff4a 	bl	8001e00 <LL_RCC_GetAHBPrescaler>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <RCC_GetHCLKClockFreq+0x28>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	40d3      	lsrs	r3, r2
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08002c7c 	.word	0x08002c7c

08001f8c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f94:	f7ff ff42 	bl	8001e1c <LL_RCC_GetAPB1Prescaler>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	0a9b      	lsrs	r3, r3, #10
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	40d3      	lsrs	r3, r2
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08002c8c 	.word	0x08002c8c

08001fb4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001fbc:	f7ff ff3c 	bl	8001e38 <LL_RCC_GetAPB2Prescaler>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	0b5b      	lsrs	r3, r3, #13
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	40d3      	lsrs	r3, r2
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08002c8c 	.word	0x08002c8c

08001fdc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ff0:	f7ff ff30 	bl	8001e54 <LL_RCC_PLL_GetMainSource>
 8001ff4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002002:	d003      	beq.n	800200c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002004:	e005      	b.n	8002012 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002008:	617b      	str	r3, [r7, #20]
      break;
 800200a:	e005      	b.n	8002018 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800200e:	617b      	str	r3, [r7, #20]
      break;
 8002010:	e002      	b.n	8002018 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002014:	617b      	str	r3, [r7, #20]
      break;
 8002016:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b08      	cmp	r3, #8
 800201c:	d113      	bne.n	8002046 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800201e:	f7ff ff43 	bl	8001ea8 <LL_RCC_PLL_GetDivider>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fbb3 f4f2 	udiv	r4, r3, r2
 800202a:	f7ff ff21 	bl	8001e70 <LL_RCC_PLL_GetN>
 800202e:	4603      	mov	r3, r0
 8002030:	fb03 f404 	mul.w	r4, r3, r4
 8002034:	f7ff ff2a 	bl	8001e8c <LL_RCC_PLL_GetP>
 8002038:	4603      	mov	r3, r0
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	3301      	adds	r3, #1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fbb4 f3f3 	udiv	r3, r4, r3
 8002044:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002046:	693b      	ldr	r3, [r7, #16]
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	00f42400 	.word	0x00f42400
 8002054:	007a1200 	.word	0x007a1200

08002058 <LL_TIM_SetPrescaler>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_TIM_SetAutoReload>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_TIM_SetRepetitionCounter>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_OC_SetCompareCH1>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_TIM_OC_SetCompareCH2>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_TIM_OC_SetCompareCH3>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_TIM_OC_SetCompareCH4>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	615a      	str	r2, [r3, #20]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <LL_TIM_Init+0x108>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <LL_TIM_Init+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d00f      	beq.n	800217c <LL_TIM_Init+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <LL_TIM_Init+0x10c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00b      	beq.n	800217c <LL_TIM_Init+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a39      	ldr	r2, [pc, #228]	; (800224c <LL_TIM_Init+0x110>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <LL_TIM_Init+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a38      	ldr	r2, [pc, #224]	; (8002250 <LL_TIM_Init+0x114>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <LL_TIM_Init+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a37      	ldr	r2, [pc, #220]	; (8002254 <LL_TIM_Init+0x118>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d106      	bne.n	800218a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <LL_TIM_Init+0x108>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02b      	beq.n	80021ea <LL_TIM_Init+0xae>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d027      	beq.n	80021ea <LL_TIM_Init+0xae>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <LL_TIM_Init+0x10c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d023      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <LL_TIM_Init+0x110>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a28      	ldr	r2, [pc, #160]	; (8002250 <LL_TIM_Init+0x114>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01b      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a27      	ldr	r2, [pc, #156]	; (8002254 <LL_TIM_Init+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d017      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <LL_TIM_Init+0x11c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <LL_TIM_Init+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00f      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a24      	ldr	r2, [pc, #144]	; (8002260 <LL_TIM_Init+0x124>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00b      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <LL_TIM_Init+0x128>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a22      	ldr	r2, [pc, #136]	; (8002268 <LL_TIM_Init+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <LL_TIM_Init+0xae>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <LL_TIM_Init+0x130>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d106      	bne.n	80021f8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff35 	bl	8002074 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff21 	bl	8002058 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <LL_TIM_Init+0x108>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d003      	beq.n	8002226 <LL_TIM_Init+0xea>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <LL_TIM_Init+0x118>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d105      	bne.n	8002232 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff2f 	bl	8002090 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff72 	bl	800211c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40010400 	.word	0x40010400
 8002258:	40014000 	.word	0x40014000
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800
 8002264:	40001800 	.word	0x40001800
 8002268:	40001c00 	.word	0x40001c00
 800226c:	40002000 	.word	0x40002000

08002270 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002286:	d027      	beq.n	80022d8 <LL_TIM_OC_Init+0x68>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228e:	d82a      	bhi.n	80022e6 <LL_TIM_OC_Init+0x76>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002296:	d018      	beq.n	80022ca <LL_TIM_OC_Init+0x5a>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229e:	d822      	bhi.n	80022e6 <LL_TIM_OC_Init+0x76>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d003      	beq.n	80022ae <LL_TIM_OC_Init+0x3e>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d007      	beq.n	80022bc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80022ac:	e01b      	b.n	80022e6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f81f 	bl	80022f4 <OC1Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	75fb      	strb	r3, [r7, #23]
      break;
 80022ba:	e015      	b.n	80022e8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f884 	bl	80023cc <OC2Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	75fb      	strb	r3, [r7, #23]
      break;
 80022c8:	e00e      	b.n	80022e8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f8ed 	bl	80024ac <OC3Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	75fb      	strb	r3, [r7, #23]
      break;
 80022d6:	e007      	b.n	80022e8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f956 	bl	800258c <OC4Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	75fb      	strb	r3, [r7, #23]
      break;
 80022e4:	e000      	b.n	80022e8 <LL_TIM_OC_Init+0x78>
      break;
 80022e6:	bf00      	nop
  }

  return result;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f023 0201 	bic.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 0202 	bic.w	r2, r3, #2
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0201 	bic.w	r2, r3, #1
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <OC1Config+0xd0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <OC1Config+0x6a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <OC1Config+0xd4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d11e      	bne.n	800239c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 0208 	bic.w	r2, r3, #8
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 0204 	bic.w	r2, r3, #4
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe7c 	bl	80020ac <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010400 	.word	0x40010400

080023cc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 0210 	bic.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0220 	bic.w	r2, r3, #32
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0210 	bic.w	r2, r3, #16
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <OC2Config+0xd8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <OC2Config+0x70>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <OC2Config+0xdc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d11f      	bne.n	800247c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	019b      	lsls	r3, r3, #6
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	019b      	lsls	r3, r3, #6
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe1a 	bl	80020c8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010400 	.word	0x40010400

080024ac <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <OC3Config+0xd8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <OC3Config+0x6e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <OC3Config+0xdc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d11f      	bne.n	800255a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fdb9 	bl	80020e4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40010000 	.word	0x40010000
 8002588:	40010400 	.word	0x40010400

0800258c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	031b      	lsls	r3, r3, #12
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	031b      	lsls	r3, r3, #12
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <OC4Config+0xa8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <OC4Config+0x70>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <OC4Config+0xac>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d107      	bne.n	800260c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fd6e 	bl	8002100 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010000 	.word	0x40010000
 8002638:	40010400 	.word	0x40010400

0800263c <LL_USART_IsEnabled>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_USART_SetStopBitsLength>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_USART_SetHWFlowCtrl>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	615a      	str	r2, [r3, #20]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_USART_SetBaudRate>:
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0c0      	sub	sp, #256	; 0x100
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026bc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80026c0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80026c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	f040 810c 	bne.w	80028ec <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80026d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026e6:	4622      	mov	r2, r4
 80026e8:	462b      	mov	r3, r5
 80026ea:	1891      	adds	r1, r2, r2
 80026ec:	6639      	str	r1, [r7, #96]	; 0x60
 80026ee:	415b      	adcs	r3, r3
 80026f0:	667b      	str	r3, [r7, #100]	; 0x64
 80026f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026f6:	4621      	mov	r1, r4
 80026f8:	eb12 0801 	adds.w	r8, r2, r1
 80026fc:	4629      	mov	r1, r5
 80026fe:	eb43 0901 	adc.w	r9, r3, r1
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002716:	4690      	mov	r8, r2
 8002718:	4699      	mov	r9, r3
 800271a:	4623      	mov	r3, r4
 800271c:	eb18 0303 	adds.w	r3, r8, r3
 8002720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002724:	462b      	mov	r3, r5
 8002726:	eb49 0303 	adc.w	r3, r9, r3
 800272a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800272e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002732:	2200      	movs	r2, #0
 8002734:	469a      	mov	sl, r3
 8002736:	4693      	mov	fp, r2
 8002738:	eb1a 030a 	adds.w	r3, sl, sl
 800273c:	65bb      	str	r3, [r7, #88]	; 0x58
 800273e:	eb4b 030b 	adc.w	r3, fp, fp
 8002742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800274c:	f7fd fd3c 	bl	80001c8 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <LL_USART_SetBaudRate+0x238>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	b29b      	uxth	r3, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	b29c      	uxth	r4, r3
 8002762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800276c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002770:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002774:	4642      	mov	r2, r8
 8002776:	464b      	mov	r3, r9
 8002778:	1891      	adds	r1, r2, r2
 800277a:	6539      	str	r1, [r7, #80]	; 0x50
 800277c:	415b      	adcs	r3, r3
 800277e:	657b      	str	r3, [r7, #84]	; 0x54
 8002780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002784:	4641      	mov	r1, r8
 8002786:	1851      	adds	r1, r2, r1
 8002788:	64b9      	str	r1, [r7, #72]	; 0x48
 800278a:	4649      	mov	r1, r9
 800278c:	414b      	adcs	r3, r1
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800279c:	4659      	mov	r1, fp
 800279e:	00cb      	lsls	r3, r1, #3
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a6:	4651      	mov	r1, sl
 80027a8:	00ca      	lsls	r2, r1, #3
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	4642      	mov	r2, r8
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027b8:	464b      	mov	r3, r9
 80027ba:	460a      	mov	r2, r1
 80027bc:	eb42 0303 	adc.w	r3, r2, r3
 80027c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ce:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80027d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80027d6:	460b      	mov	r3, r1
 80027d8:	18db      	adds	r3, r3, r3
 80027da:	643b      	str	r3, [r7, #64]	; 0x40
 80027dc:	4613      	mov	r3, r2
 80027de:	eb42 0303 	adc.w	r3, r2, r3
 80027e2:	647b      	str	r3, [r7, #68]	; 0x44
 80027e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027e8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80027ec:	f7fd fcec 	bl	80001c8 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4611      	mov	r1, r2
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <LL_USART_SetBaudRate+0x238>)
 80027f8:	fba3 2301 	umull	r2, r3, r3, r1
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2264      	movs	r2, #100	; 0x64
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	1acb      	subs	r3, r1, r3
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <LL_USART_SetBaudRate+0x238>)
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b29b      	uxth	r3, r3
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800281e:	b29b      	uxth	r3, r3
 8002820:	4423      	add	r3, r4
 8002822:	b29c      	uxth	r4, r3
 8002824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800282e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002832:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002836:	4642      	mov	r2, r8
 8002838:	464b      	mov	r3, r9
 800283a:	1891      	adds	r1, r2, r2
 800283c:	63b9      	str	r1, [r7, #56]	; 0x38
 800283e:	415b      	adcs	r3, r3
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002846:	4641      	mov	r1, r8
 8002848:	1851      	adds	r1, r2, r1
 800284a:	6339      	str	r1, [r7, #48]	; 0x30
 800284c:	4649      	mov	r1, r9
 800284e:	414b      	adcs	r3, r1
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800285e:	4659      	mov	r1, fp
 8002860:	00cb      	lsls	r3, r1, #3
 8002862:	4651      	mov	r1, sl
 8002864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002868:	4651      	mov	r1, sl
 800286a:	00ca      	lsls	r2, r1, #3
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	4603      	mov	r3, r0
 8002872:	4642      	mov	r2, r8
 8002874:	189b      	adds	r3, r3, r2
 8002876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800287a:	464b      	mov	r3, r9
 800287c:	460a      	mov	r2, r1
 800287e:	eb42 0303 	adc.w	r3, r2, r3
 8002882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002890:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002894:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002898:	460b      	mov	r3, r1
 800289a:	18db      	adds	r3, r3, r3
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
 800289e:	4613      	mov	r3, r2
 80028a0:	eb42 0303 	adc.w	r3, r2, r3
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80028ae:	f7fd fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <LL_USART_SetBaudRate+0x238>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <LL_USART_SetBaudRate+0x238>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4423      	add	r3, r4
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	e108      	b.n	8002afa <LL_USART_SetBaudRate+0x44a>
 80028e8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028f6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028fa:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80028fe:	4642      	mov	r2, r8
 8002900:	464b      	mov	r3, r9
 8002902:	1891      	adds	r1, r2, r2
 8002904:	6239      	str	r1, [r7, #32]
 8002906:	415b      	adcs	r3, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800290e:	4641      	mov	r1, r8
 8002910:	1854      	adds	r4, r2, r1
 8002912:	4649      	mov	r1, r9
 8002914:	eb43 0501 	adc.w	r5, r3, r1
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	00eb      	lsls	r3, r5, #3
 8002922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002926:	00e2      	lsls	r2, r4, #3
 8002928:	4614      	mov	r4, r2
 800292a:	461d      	mov	r5, r3
 800292c:	4643      	mov	r3, r8
 800292e:	18e3      	adds	r3, r4, r3
 8002930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002934:	464b      	mov	r3, r9
 8002936:	eb45 0303 	adc.w	r3, r5, r3
 800293a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800293e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002948:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002958:	4629      	mov	r1, r5
 800295a:	008b      	lsls	r3, r1, #2
 800295c:	4621      	mov	r1, r4
 800295e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002962:	4621      	mov	r1, r4
 8002964:	008a      	lsls	r2, r1, #2
 8002966:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800296a:	f7fd fc2d 	bl	80001c8 <__aeabi_uldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <LL_USART_SetBaudRate+0x458>)
 8002974:	fba3 2302 	umull	r2, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	b29b      	uxth	r3, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	b29c      	uxth	r4, r3
 8002980:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800298a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800298e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002992:	4642      	mov	r2, r8
 8002994:	464b      	mov	r3, r9
 8002996:	1891      	adds	r1, r2, r2
 8002998:	61b9      	str	r1, [r7, #24]
 800299a:	415b      	adcs	r3, r3
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a2:	4641      	mov	r1, r8
 80029a4:	1851      	adds	r1, r2, r1
 80029a6:	6139      	str	r1, [r7, #16]
 80029a8:	4649      	mov	r1, r9
 80029aa:	414b      	adcs	r3, r1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ba:	4659      	mov	r1, fp
 80029bc:	00cb      	lsls	r3, r1, #3
 80029be:	4651      	mov	r1, sl
 80029c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c4:	4651      	mov	r1, sl
 80029c6:	00ca      	lsls	r2, r1, #3
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	4603      	mov	r3, r0
 80029ce:	4642      	mov	r2, r8
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029d6:	464b      	mov	r3, r9
 80029d8:	460a      	mov	r2, r1
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80029fc:	4649      	mov	r1, r9
 80029fe:	008b      	lsls	r3, r1, #2
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a06:	4641      	mov	r1, r8
 8002a08:	008a      	lsls	r2, r1, #2
 8002a0a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002a0e:	f7fd fbdb 	bl	80001c8 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <LL_USART_SetBaudRate+0x458>)
 8002a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2264      	movs	r2, #100	; 0x64
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	1acb      	subs	r3, r1, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <LL_USART_SetBaudRate+0x458>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4423      	add	r3, r4
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a44:	2200      	movs	r2, #0
 8002a46:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a48:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a4a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5e:	4641      	mov	r1, r8
 8002a60:	1851      	adds	r1, r2, r1
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	4649      	mov	r1, r9
 8002a66:	414b      	adcs	r3, r1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a76:	4659      	mov	r1, fp
 8002a78:	00cb      	lsls	r3, r1, #3
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a80:	4651      	mov	r1, sl
 8002a82:	00ca      	lsls	r2, r1, #3
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	677b      	str	r3, [r7, #116]	; 0x74
 8002a9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	008b      	lsls	r3, r1, #2
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aba:	4641      	mov	r1, r8
 8002abc:	008a      	lsls	r2, r1, #2
 8002abe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ac2:	f7fd fb81 	bl	80001c8 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <LL_USART_SetBaudRate+0x458>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2164      	movs	r1, #100	; 0x64
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LL_USART_SetBaudRate+0x458>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4423      	add	r3, r4
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	51eb851f 	.word	0x51eb851f

08002b0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fd8c 	bl	800263c <LL_USART_IsEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d15e      	bne.n	8002be8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b32:	f023 030c 	bic.w	r3, r3, #12
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	6851      	ldr	r1, [r2, #4]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	6912      	ldr	r2, [r2, #16]
 8002b44:	4311      	orrs	r1, r2
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	6992      	ldr	r2, [r2, #24]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fd83 	bl	8002664 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fd90 	bl	800268a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f9a8 	bl	8001ec4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <LL_USART_Init+0xe8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d102      	bne.n	8002b82 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e021      	b.n	8002bc6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <LL_USART_Init+0xec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d102      	bne.n	8002b90 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e01a      	b.n	8002bc6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <LL_USART_Init+0xf0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d102      	bne.n	8002b9e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e013      	b.n	8002bc6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <LL_USART_Init+0xf4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d102      	bne.n	8002bac <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e00c      	b.n	8002bc6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <LL_USART_Init+0xf8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	e005      	b.n	8002bc6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <LL_USART_Init+0xfc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fd64 	bl	80026b0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40011400 	.word	0x40011400
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	4d0d      	ldr	r5, [pc, #52]	; (8002c54 <__libc_init_array+0x38>)
 8002c20:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	2600      	movs	r6, #0
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	4d0b      	ldr	r5, [pc, #44]	; (8002c5c <__libc_init_array+0x40>)
 8002c2e:	4c0c      	ldr	r4, [pc, #48]	; (8002c60 <__libc_init_array+0x44>)
 8002c30:	f000 f818 	bl	8002c64 <_init>
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	2600      	movs	r6, #0
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08002cac 	.word	0x08002cac
 8002c58:	08002cac 	.word	0x08002cac
 8002c5c:	08002cac 	.word	0x08002cac
 8002c60:	08002cb0 	.word	0x08002cb0

08002c64 <_init>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr

08002c70 <_fini>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	bf00      	nop
 8002c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c76:	bc08      	pop	{r3}
 8002c78:	469e      	mov	lr, r3
 8002c7a:	4770      	bx	lr
