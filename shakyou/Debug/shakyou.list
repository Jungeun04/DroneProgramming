
shakyou.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800833c  0800833c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008344  08008344  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800834c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000248  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a05d  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000263f  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c30  00000000  00000000  0002c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008f3  00000000  00000000  0002d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023769  00000000  00000000  0002de0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d219  00000000  00000000  00051574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c99cf  00000000  00000000  0005e78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000042f0  00000000  00000000  0012815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0012c44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e80 	.word	0x08007e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007e80 	.word	0x08007e80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f023 0210 	bic.w	r2, r3, #16
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d101      	bne.n	8000f28 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	330c      	adds	r3, #12
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4013      	ands	r3, r2
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	619a      	str	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40023800 	.word	0x40023800

0800100c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fa0a 	bl	8005464 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001064:	f7ff ffd2 	bl	800100c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ffb7 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff ffb4 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff ffb1 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800107a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800107e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001090:	2305      	movs	r3, #5
 8001092:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800109a:	f002 fb78 	bl	800378e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010a6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ba:	2318      	movs	r3, #24
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4834      	ldr	r0, [pc, #208]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010d2:	f002 fd2c 	bl	8003b2e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4832      	ldr	r0, [pc, #200]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f7ff fef3 	bl	8000ec4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010e4:	f7ff ff6a 	bl	8000fbc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	482c      	ldr	r0, [pc, #176]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ee:	f7ff ff65 	bl	8000fbc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	482d      	ldr	r0, [pc, #180]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 80010f8:	f7ff ff60 	bl	8000fbc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001118:	f002 fb39 	bl	800378e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001138:	f002 fb29 	bl	800378e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 8001158:	f002 fb19 	bl	800378e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001170:	f002 fb0d 	bl	800378e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001176:	f7ff fe95 	bl	8000ea4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001180:	f7ff ff0e 	bl	8000fa0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 800118a:	f7ff ff09 	bl	8000fa0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001194:	f7ff ff04 	bl	8000fa0 <LL_GPIO_SetOutputPin>
}
 8001198:	bf00      	nop
 800119a:	3740      	adds	r7, #64	; 0x40
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020000 	.word	0x40020000

080011b0 <SPI2_SendByte>:
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
	return (1); //Something went wrong
}

unsigned char SPI2_SendByte(unsigned char data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80011ba:	bf00      	nop
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <SPI2_SendByte+0x40>)
 80011be:	f7ff fea7 	bl	8000f10 <LL_SPI_IsActiveFlag_TXE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f9      	beq.n	80011bc <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <SPI2_SendByte+0x40>)
 80011ce:	f7ff fec0 	bl	8000f52 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80011d2:	bf00      	nop
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <SPI2_SendByte+0x40>)
 80011d6:	f7ff fe88 	bl	8000eea <LL_SPI_IsActiveFlag_RXNE>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <SPI2_SendByte+0x40>)
 80011e2:	f7ff fea8 	bl	8000f36 <LL_SPI_ReceiveData8>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40003800 	.word	0x40003800

080011f4 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <BNO080_dataAvailable+0x50>)
 80011fe:	f7ff feba 	bl	8000f76 <LL_GPIO_IsInputPinSet>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <BNO080_dataAvailable+0x18>
		return (0);
 8001208:	2300      	movs	r3, #0
 800120a:	e019      	b.n	8001240 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800120c:	f000 fac6 	bl	800179c <BNO080_receivePacket>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d113      	bne.n	800123e <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <BNO080_dataAvailable+0x54>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <BNO080_dataAvailable+0x3a>
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <BNO080_dataAvailable+0x58>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2bfb      	cmp	r3, #251	; 0xfb
 8001224:	d103      	bne.n	800122e <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001226:	f000 f82f 	bl	8001288 <BNO080_parseInputReport>
			return (1);
 800122a:	2301      	movs	r3, #1
 800122c:	e008      	b.n	8001240 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <BNO080_dataAvailable+0x54>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d103      	bne.n	800123e <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001236:	f000 f80b 	bl	8001250 <BNO080_parseCommandReport>
			return (1);
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020800 	.word	0x40020800
 8001248:	200001f4 	.word	0x200001f4
 800124c:	200001f8 	.word	0x200001f8

08001250 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <BNO080_parseCommandReport+0x30>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2bf1      	cmp	r3, #241	; 0xf1
 800125c:	d109      	bne.n	8001272 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <BNO080_parseCommandReport+0x30>)
 8001260:	789b      	ldrb	r3, [r3, #2]
 8001262:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d103      	bne.n	8001272 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <BNO080_parseCommandReport+0x30>)
 800126c:	795a      	ldrb	r2, [r3, #5]
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <BNO080_parseCommandReport+0x34>)
 8001270:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200001f8 	.word	0x200001f8
 8001284:	200002b8 	.word	0x200002b8

08001288 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800128e:	4b98      	ldr	r3, [pc, #608]	; (80014f0 <BNO080_parseInputReport+0x268>)
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <BNO080_parseInputReport+0x268>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80012a0:	8a3b      	ldrh	r3, [r7, #16]
 80012a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012a6:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80012a8:	8a3b      	ldrh	r3, [r7, #16]
 80012aa:	3b04      	subs	r3, #4
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80012b0:	4b90      	ldr	r3, [pc, #576]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	4a8f      	ldr	r2, [pc, #572]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012b8:	78d2      	ldrb	r2, [r2, #3]
 80012ba:	0412      	lsls	r2, r2, #16
 80012bc:	4313      	orrs	r3, r2
 80012be:	4a8d      	ldr	r2, [pc, #564]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012c0:	7892      	ldrb	r2, [r2, #2]
 80012c2:	0212      	lsls	r2, r2, #8
 80012c4:	4313      	orrs	r3, r2
 80012c6:	4a8b      	ldr	r2, [pc, #556]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012c8:	7852      	ldrb	r2, [r2, #1]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	4a8a      	ldr	r2, [pc, #552]	; (80014f8 <BNO080_parseInputReport+0x270>)
 80012ce:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80012d0:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012d2:	79db      	ldrb	r3, [r3, #7]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80012da:	4b86      	ldr	r3, [pc, #536]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012dc:	7a9b      	ldrb	r3, [r3, #10]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b84      	ldr	r3, [pc, #528]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012e4:	7a5b      	ldrb	r3, [r3, #9]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80012ee:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012f0:	7b1b      	ldrb	r3, [r3, #12]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b7f      	ldr	r3, [pc, #508]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80012f8:	7adb      	ldrb	r3, [r3, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001304:	7b9b      	ldrb	r3, [r3, #14]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 800130c:	7b5b      	ldrb	r3, [r3, #13]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21b      	sxth	r3, r3
 8001314:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800131e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001322:	2b0e      	cmp	r3, #14
 8001324:	dd09      	ble.n	800133a <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001326:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001328:	7c1b      	ldrb	r3, [r3, #16]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001330:	7bdb      	ldrb	r3, [r3, #15]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800133a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800133e:	2b10      	cmp	r3, #16
 8001340:	dd09      	ble.n	8001356 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001344:	7c9b      	ldrb	r3, [r3, #18]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 800134c:	7c5b      	ldrb	r3, [r3, #17]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001358:	795b      	ldrb	r3, [r3, #5]
 800135a:	2b1e      	cmp	r3, #30
 800135c:	dc46      	bgt.n	80013ec <BNO080_parseInputReport+0x164>
 800135e:	2b00      	cmp	r3, #0
 8001360:	f340 80bf 	ble.w	80014e2 <BNO080_parseInputReport+0x25a>
 8001364:	3b01      	subs	r3, #1
 8001366:	2b1d      	cmp	r3, #29
 8001368:	f200 80bb 	bhi.w	80014e2 <BNO080_parseInputReport+0x25a>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <BNO080_parseInputReport+0xec>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	080013f3 	.word	0x080013f3
 8001378:	0800142b 	.word	0x0800142b
 800137c:	08001447 	.word	0x08001447
 8001380:	0800140f 	.word	0x0800140f
 8001384:	08001463 	.word	0x08001463
 8001388:	080014e3 	.word	0x080014e3
 800138c:	080014e3 	.word	0x080014e3
 8001390:	08001463 	.word	0x08001463
 8001394:	080014e3 	.word	0x080014e3
 8001398:	080014e3 	.word	0x080014e3
 800139c:	080014e3 	.word	0x080014e3
 80013a0:	080014e3 	.word	0x080014e3
 80013a4:	080014e3 	.word	0x080014e3
 80013a8:	080014e3 	.word	0x080014e3
 80013ac:	080014e3 	.word	0x080014e3
 80013b0:	080014e3 	.word	0x080014e3
 80013b4:	0800148b 	.word	0x0800148b
 80013b8:	080014e3 	.word	0x080014e3
 80013bc:	08001493 	.word	0x08001493
 80013c0:	080014e3 	.word	0x080014e3
 80013c4:	080014e3 	.word	0x080014e3
 80013c8:	080014e3 	.word	0x080014e3
 80013cc:	080014e3 	.word	0x080014e3
 80013d0:	080014e3 	.word	0x080014e3
 80013d4:	080014e3 	.word	0x080014e3
 80013d8:	080014e3 	.word	0x080014e3
 80013dc:	080014e3 	.word	0x080014e3
 80013e0:	080014e3 	.word	0x080014e3
 80013e4:	080014e3 	.word	0x080014e3
 80013e8:	0800149d 	.word	0x0800149d
 80013ec:	2bf1      	cmp	r3, #241	; 0xf1
 80013ee:	d06d      	beq.n	80014cc <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80013f0:	e077      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <BNO080_parseInputReport+0x274>)
 80013f8:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80013fa:	4a41      	ldr	r2, [pc, #260]	; (8001500 <BNO080_parseInputReport+0x278>)
 80013fc:	89bb      	ldrh	r3, [r7, #12]
 80013fe:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001400:	4a40      	ldr	r2, [pc, #256]	; (8001504 <BNO080_parseInputReport+0x27c>)
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001406:	4a40      	ldr	r2, [pc, #256]	; (8001508 <BNO080_parseInputReport+0x280>)
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	8013      	strh	r3, [r2, #0]
			break;
 800140c:	e069      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <BNO080_parseInputReport+0x284>)
 8001414:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <BNO080_parseInputReport+0x288>)
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 800141c:	4a3d      	ldr	r2, [pc, #244]	; (8001514 <BNO080_parseInputReport+0x28c>)
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001422:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <BNO080_parseInputReport+0x290>)
 8001424:	893b      	ldrh	r3, [r7, #8]
 8001426:	8013      	strh	r3, [r2, #0]
			break;
 8001428:	e05b      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <BNO080_parseInputReport+0x294>)
 8001430:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001432:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <BNO080_parseInputReport+0x298>)
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001438:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <BNO080_parseInputReport+0x29c>)
 800143a:	897b      	ldrh	r3, [r7, #10]
 800143c:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800143e:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <BNO080_parseInputReport+0x2a0>)
 8001440:	893b      	ldrh	r3, [r7, #8]
 8001442:	8013      	strh	r3, [r2, #0]
			break;
 8001444:	e04d      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <BNO080_parseInputReport+0x2a4>)
 800144c:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <BNO080_parseInputReport+0x2a8>)
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001454:	4a37      	ldr	r2, [pc, #220]	; (8001534 <BNO080_parseInputReport+0x2ac>)
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800145a:	4a37      	ldr	r2, [pc, #220]	; (8001538 <BNO080_parseInputReport+0x2b0>)
 800145c:	893b      	ldrh	r3, [r7, #8]
 800145e:	8013      	strh	r3, [r2, #0]
			break;
 8001460:	e03f      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <BNO080_parseInputReport+0x2b4>)
 8001468:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800146a:	4a35      	ldr	r2, [pc, #212]	; (8001540 <BNO080_parseInputReport+0x2b8>)
 800146c:	89bb      	ldrh	r3, [r7, #12]
 800146e:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001470:	4a34      	ldr	r2, [pc, #208]	; (8001544 <BNO080_parseInputReport+0x2bc>)
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001476:	4a34      	ldr	r2, [pc, #208]	; (8001548 <BNO080_parseInputReport+0x2c0>)
 8001478:	893b      	ldrh	r3, [r7, #8]
 800147a:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 800147c:	4a33      	ldr	r2, [pc, #204]	; (800154c <BNO080_parseInputReport+0x2c4>)
 800147e:	8afb      	ldrh	r3, [r7, #22]
 8001480:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001482:	4a33      	ldr	r2, [pc, #204]	; (8001550 <BNO080_parseInputReport+0x2c8>)
 8001484:	8abb      	ldrh	r3, [r7, #20]
 8001486:	8013      	strh	r3, [r2, #0]
			break;
 8001488:	e02b      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <BNO080_parseInputReport+0x2cc>)
 800148c:	893b      	ldrh	r3, [r7, #8]
 800148e:	8013      	strh	r3, [r2, #0]
			break;
 8001490:	e027      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 8001494:	7a5a      	ldrb	r2, [r3, #9]
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <BNO080_parseInputReport+0x2d0>)
 8001498:	701a      	strb	r2, [r3, #0]
			break;
 800149a:	e022      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 800149e:	7a9a      	ldrb	r2, [r3, #10]
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <BNO080_parseInputReport+0x2d4>)
 80014a2:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80014a4:	2300      	movs	r3, #0
 80014a6:	74fb      	strb	r3, [r7, #19]
 80014a8:	e00c      	b.n	80014c4 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80014aa:	7cfb      	ldrb	r3, [r7, #19]
 80014ac:	f103 020b 	add.w	r2, r3, #11
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <BNO080_parseInputReport+0x2d8>)
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	7cfb      	ldrb	r3, [r7, #19]
 80014b6:	440b      	add	r3, r1
 80014b8:	490e      	ldr	r1, [pc, #56]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80014ba:	5c8a      	ldrb	r2, [r1, r2]
 80014bc:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	3301      	adds	r3, #1
 80014c2:	74fb      	strb	r3, [r7, #19]
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d9ef      	bls.n	80014aa <BNO080_parseInputReport+0x222>
			break;
 80014ca:	e00a      	b.n	80014e2 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80014ce:	79db      	ldrb	r3, [r3, #7]
 80014d0:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d103      	bne.n	80014e0 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <BNO080_parseInputReport+0x26c>)
 80014da:	7a9a      	ldrb	r2, [r3, #10]
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <BNO080_parseInputReport+0x2dc>)
 80014de:	701a      	strb	r2, [r3, #0]
			break;
 80014e0:	bf00      	nop
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001f4 	.word	0x200001f4
 80014f4:	200001f8 	.word	0x200001f8
 80014f8:	200002ac 	.word	0x200002ac
 80014fc:	20000284 	.word	0x20000284
 8001500:	2000027e 	.word	0x2000027e
 8001504:	20000280 	.word	0x20000280
 8001508:	20000282 	.word	0x20000282
 800150c:	2000028c 	.word	0x2000028c
 8001510:	20000286 	.word	0x20000286
 8001514:	20000288 	.word	0x20000288
 8001518:	2000028a 	.word	0x2000028a
 800151c:	20000294 	.word	0x20000294
 8001520:	2000028e 	.word	0x2000028e
 8001524:	20000290 	.word	0x20000290
 8001528:	20000292 	.word	0x20000292
 800152c:	2000029c 	.word	0x2000029c
 8001530:	20000296 	.word	0x20000296
 8001534:	20000298 	.word	0x20000298
 8001538:	2000029a 	.word	0x2000029a
 800153c:	200002a8 	.word	0x200002a8
 8001540:	2000029e 	.word	0x2000029e
 8001544:	200002a0 	.word	0x200002a0
 8001548:	200002a2 	.word	0x200002a2
 800154c:	200002a4 	.word	0x200002a4
 8001550:	200002a6 	.word	0x200002a6
 8001554:	200002aa 	.word	0x200002aa
 8001558:	200002b0 	.word	0x200002b0
 800155c:	200002b1 	.word	0x200002b1
 8001560:	200002b4 	.word	0x200002b4
 8001564:	200002b8 	.word	0x200002b8

08001568 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <BNO080_getQuatI+0x24>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <BNO080_getQuatI+0x28>)
 8001574:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f861 	bl	8001644 <BNO080_qToFloat>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
}
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000029e 	.word	0x2000029e
 8001590:	20000000 	.word	0x20000000

08001594 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <BNO080_getQuatJ+0x24>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <BNO080_getQuatJ+0x28>)
 80015a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f84b 	bl	8001644 <BNO080_qToFloat>
 80015ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200002a0 	.word	0x200002a0
 80015bc:	20000000 	.word	0x20000000

080015c0 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <BNO080_getQuatK+0x24>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <BNO080_getQuatK+0x28>)
 80015cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f835 	bl	8001644 <BNO080_qToFloat>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
}
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002a2 	.word	0x200002a2
 80015e8:	20000000 	.word	0x20000000

080015ec <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <BNO080_getQuatReal+0x24>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <BNO080_getQuatReal+0x28>)
 80015f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f81f 	bl	8001644 <BNO080_qToFloat>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002a4 	.word	0x200002a4
 8001614:	20000000 	.word	0x20000000

08001618 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <BNO080_getQuatRadianAccuracy+0x24>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <BNO080_getQuatRadianAccuracy+0x28>)
 8001624:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f809 	bl	8001644 <BNO080_qToFloat>
 8001632:	eef0 7a40 	vmov.f32	s15, s0
}
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200002a6 	.word	0x200002a6
 8001640:	20000000 	.word	0x20000000

08001644 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	ed2d 8b02 	vpush	{d8}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	80fb      	strh	r3, [r7, #6]
 8001654:	4613      	mov	r3, r2
 8001656:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	425b      	negs	r3, r3
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	eef0 0a67 	vmov.f32	s1, s15
 8001674:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001678:	f005 fde0 	bl	800723c <powf>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
 8001680:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	ecbd 8b02 	vpop	{d8}
 8001690:	bd80      	pop	{r7, pc}

08001692 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	2005      	movs	r0, #5
 80016a4:	f000 f804 	bl	80016b0 <BNO080_setFeatureCommand>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016c0:	22fd      	movs	r2, #253	; 0xfd
 80016c2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016e2:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016ec:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 80016f6:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	0e1b      	lsrs	r3, r3, #24
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001700:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001704:	2200      	movs	r2, #0
 8001706:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 800170a:	2200      	movs	r2, #0
 800170c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001710:	2200      	movs	r2, #0
 8001712:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001716:	2200      	movs	r2, #0
 8001718:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001720:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 800172a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 8001734:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	0e1b      	lsrs	r3, r3, #24
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <BNO080_setFeatureCommand+0xa0>)
 800173e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001740:	2111      	movs	r1, #17
 8001742:	2002      	movs	r0, #2
 8001744:	f000 f89a 	bl	800187c <BNO080_sendPacket>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001f8 	.word	0x200001f8

08001754 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e00c      	b.n	800177a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <BNO080_waitForSPI+0x40>)
 8001766:	f7ff fc06 	bl	8000f76 <LL_GPIO_IsInputPinSet>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001770:	2301      	movs	r3, #1
 8001772:	e00a      	b.n	800178a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3301      	adds	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d1ee      	bne.n	8001760 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <BNO080_waitForSPI+0x44>)
 8001784:	f003 fd8e 	bl	80052a4 <puts>
	return (0);
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020800 	.word	0x40020800
 8001798:	08007f30 	.word	0x08007f30

0800179c <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	4831      	ldr	r0, [pc, #196]	; (800186c <BNO080_receivePacket+0xd0>)
 80017a8:	f7ff fbe5 	bl	8000f76 <LL_GPIO_IsInputPinSet>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80017b2:	2300      	movs	r3, #0
 80017b4:	e056      	b.n	8001864 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	482d      	ldr	r0, [pc, #180]	; (8001870 <BNO080_receivePacket+0xd4>)
 80017bc:	f7ff fbfe 	bl	8000fbc <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fcf5 	bl	80011b0 <SPI2_SendByte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fcf0 	bl	80011b0 <SPI2_SendByte>
 80017d0:	4603      	mov	r3, r0
 80017d2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fceb 	bl	80011b0 <SPI2_SendByte>
 80017da:	4603      	mov	r3, r0
 80017dc:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fce6 	bl	80011b0 <SPI2_SendByte>
 80017e4:	4603      	mov	r3, r0
 80017e6:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <BNO080_receivePacket+0xd8>)
 80017ea:	7b7b      	ldrb	r3, [r7, #13]
 80017ec:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <BNO080_receivePacket+0xd8>)
 80017f0:	7b3b      	ldrb	r3, [r7, #12]
 80017f2:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <BNO080_receivePacket+0xd8>)
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80017fa:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <BNO080_receivePacket+0xd8>)
 80017fc:	7abb      	ldrb	r3, [r7, #10]
 80017fe:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001800:	7b3b      	ldrb	r3, [r7, #12]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	7b7b      	ldrb	r3, [r7, #13]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800180e:	893b      	ldrh	r3, [r7, #8]
 8001810:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001814:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001816:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800181e:	2300      	movs	r3, #0
 8001820:	e020      	b.n	8001864 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001822:	893b      	ldrh	r3, [r7, #8]
 8001824:	3b04      	subs	r3, #4
 8001826:	b29b      	uxth	r3, r3
 8001828:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800182a:	2300      	movs	r3, #0
 800182c:	81fb      	strh	r3, [r7, #14]
 800182e:	e00e      	b.n	800184e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001830:	20ff      	movs	r0, #255	; 0xff
 8001832:	f7ff fcbd 	bl	80011b0 <SPI2_SendByte>
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	2b7f      	cmp	r3, #127	; 0x7f
 800183e:	d803      	bhi.n	8001848 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <BNO080_receivePacket+0xdc>)
 8001844:	79fa      	ldrb	r2, [r7, #7]
 8001846:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001848:	89fb      	ldrh	r3, [r7, #14]
 800184a:	3301      	adds	r3, #1
 800184c:	81fb      	strh	r3, [r7, #14]
 800184e:	89fa      	ldrh	r2, [r7, #14]
 8001850:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbeb      	blt.n	8001830 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <BNO080_receivePacket+0xd4>)
 800185e:	f7ff fb9f 	bl	8000fa0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40020800 	.word	0x40020800
 8001870:	40020400 	.word	0x40020400
 8001874:	200001f4 	.word	0x200001f4
 8001878:	200001f8 	.word	0x200001f8

0800187c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	3304      	adds	r3, #4
 8001890:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001892:	f7ff ff5f 	bl	8001754 <BNO080_waitForSPI>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 800189c:	2300      	movs	r3, #0
 800189e:	e032      	b.n	8001906 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	481a      	ldr	r0, [pc, #104]	; (8001910 <BNO080_sendPacket+0x94>)
 80018a6:	f7ff fb89 	bl	8000fbc <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fc7f 	bl	80011b0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
 80018b4:	121b      	asrs	r3, r3, #8
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc79 	bl	80011b0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc75 	bl	80011b0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <BNO080_sendPacket+0x98>)
 80018ca:	5cd2      	ldrb	r2, [r2, r3]
 80018cc:	1c51      	adds	r1, r2, #1
 80018ce:	b2c8      	uxtb	r0, r1
 80018d0:	4910      	ldr	r1, [pc, #64]	; (8001914 <BNO080_sendPacket+0x98>)
 80018d2:	54c8      	strb	r0, [r1, r3]
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fc6b 	bl	80011b0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e008      	b.n	80018f2 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <BNO080_sendPacket+0x9c>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fc62 	bl	80011b0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	3301      	adds	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3f2      	bcc.n	80018e0 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80018fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fe:	4804      	ldr	r0, [pc, #16]	; (8001910 <BNO080_sendPacket+0x94>)
 8001900:	f7ff fb4e 	bl	8000fa0 <LL_GPIO_SetOutputPin>

	return (1);
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020400 	.word	0x40020400
 8001914:	20000278 	.word	0x20000278
 8001918:	200001f8 	.word	0x200001f8

0800191c <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	edd3 6a00 	vldr	s13, [r3]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3308      	adds	r3, #8
 8001950:	edd3 6a00 	vldr	s13, [r3]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3308      	adds	r3, #8
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	330c      	adds	r3, #12
 8001968:	edd3 6a00 	vldr	s13, [r3]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	330c      	adds	r3, #12
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	eeb0 0a67 	vmov.f32	s0, s15
 8001980:	f000 f90e 	bl	8001ba0 <invSqrt>
 8001984:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3308      	adds	r3, #8
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	330c      	adds	r3, #12
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80019d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019da:	edd7 7a04 	vldr	s15, [r7, #16]
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80019e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	eef0 0a67 	vmov.f32	s1, s15
 8001a26:	eeb0 0a66 	vmov.f32	s0, s13
 8001a2a:	f005 fc05 	bl	8007238 <atan2f>
 8001a2e:	eef0 7a40 	vmov.f32	s15, s0
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <Quaternion_Update+0x26c>)
 8001a34:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8001a38:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	f005 fbc0 	bl	80071e0 <asinf>
 8001a60:	eef0 7a40 	vmov.f32	s15, s0
 8001a64:	eef1 7a67 	vneg.f32	s15, s15
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <Quaternion_Update+0x270>)
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8001a6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	eef0 0a67 	vmov.f32	s1, s15
 8001abe:	eeb0 0a66 	vmov.f32	s0, s13
 8001ac2:	f005 fbb9 	bl	8007238 <atan2f>
 8001ac6:	eef0 7a40 	vmov.f32	s15, s0
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <Quaternion_Update+0x274>)
 8001acc:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <Quaternion_Update+0x26c>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b94 <Quaternion_Update+0x278>
 8001ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <Quaternion_Update+0x26c>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <Quaternion_Update+0x270>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b94 <Quaternion_Update+0x278>
 8001aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <Quaternion_Update+0x270>)
 8001af4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <Quaternion_Update+0x274>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001b94 <Quaternion_Update+0x278>
 8001b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <Quaternion_Update+0x274>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <Quaternion_Update+0x274>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	db0a      	blt.n	8001b32 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <Quaternion_Update+0x274>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b98 <Quaternion_Update+0x27c>
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <Quaternion_Update+0x274>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
 8001b30:	e007      	b.n	8001b42 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <Quaternion_Update+0x274>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eef1 7a67 	vneg.f32	s15, s15
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <Quaternion_Update+0x274>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <Quaternion_Update+0x26c>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	db0a      	blt.n	8001b68 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <Quaternion_Update+0x26c>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001b9c <Quaternion_Update+0x280>
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <Quaternion_Update+0x26c>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8001b66:	e00b      	b.n	8001b80 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <Quaternion_Update+0x26c>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001b9c <Quaternion_Update+0x280>
 8001b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b76:	eef1 7a67 	vneg.f32	s15, s15
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <Quaternion_Update+0x26c>)
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002c0 	.word	0x200002c0
 8001b8c:	200002bc 	.word	0x200002bc
 8001b90:	200002c4 	.word	0x200002c4
 8001b94:	42652ee1 	.word	0x42652ee1
 8001b98:	43b40000 	.word	0x43b40000
 8001b9c:	43340000 	.word	0x43340000

08001ba0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	105a      	asrs	r2, r3, #1
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <invSqrt+0x74>)
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001bd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001bf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	ee07 3a90 	vmov	s15, r3
}
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	5f3759df 	.word	0x5f3759df

08001c18 <LL_GPIO_ResetOutputPin>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <LL_AHB1_GRP1_EnableClock>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40023800 	.word	0x40023800

08001c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001c7e:	2080      	movs	r0, #128	; 0x80
 8001c80:	f7ff ffda 	bl	8001c38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c84:	2004      	movs	r0, #4
 8001c86:	f7ff ffd7 	bl	8001c38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f7ff ffd4 	bl	8001c38 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff ffd1 	bl	8001c38 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|BNO080_RESET_Pin);
 8001c96:	f240 2107 	movw	r1, #519	; 0x207
 8001c9a:	4826      	ldr	r0, [pc, #152]	; (8001d34 <MX_GPIO_Init+0xcc>)
 8001c9c:	f7ff ffbc 	bl	8001c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BNO080_CS_GPIO_Port, BNO080_CS_Pin);
 8001ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca4:	4824      	ldr	r0, [pc, #144]	; (8001d38 <MX_GPIO_Init+0xd0>)
 8001ca6:	f7ff ffb7 	bl	8001c18 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BNO080_WAKE_GPIO_Port, BNO080_WAKE_Pin);
 8001caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cae:	4823      	ldr	r0, [pc, #140]	; (8001d3c <MX_GPIO_Init+0xd4>)
 8001cb0:	f7ff ffb2 	bl	8001c18 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|BNO080_RESET_Pin;
 8001cb4:	f240 2307 	movw	r3, #519	; 0x207
 8001cb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4819      	ldr	r0, [pc, #100]	; (8001d34 <MX_GPIO_Init+0xcc>)
 8001cd0:	f001 fd5d 	bl	800378e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BNO080_CS_Pin;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BNO080_CS_GPIO_Port, &GPIO_InitStruct);
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_GPIO_Init+0xd0>)
 8001cf0:	f001 fd4d 	bl	800378e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BNO080_Interrupt_Pin;
 8001cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BNO080_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <MX_GPIO_Init+0xcc>)
 8001d08:	f001 fd41 	bl	800378e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BNO080_WAKE_Pin;
 8001d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d12:	2301      	movs	r3, #1
 8001d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BNO080_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_GPIO_Init+0xd4>)
 8001d28:	f001 fd31 	bl	800378e <LL_GPIO_Init>

}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020000 	.word	0x40020000

08001d40 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1a      	ldr	r2, [r3, #32]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	621a      	str	r2, [r3, #32]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	621a      	str	r2, [r3, #32]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b089      	sub	sp, #36	; 0x24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	330c      	adds	r3, #12
 8001db2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	e853 3f00 	ldrex	r3, [r3]
 8001dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	61ba      	str	r2, [r7, #24]
 8001dcc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	e841 2300 	strex	r3, r2, [r1]
 8001dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e7      	bne.n	8001dae <LL_USART_EnableIT_RXNE+0x8>
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f000 fde7 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 f88b 	bl	8001f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f7ff ff35 	bl	8001c68 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001dfe:	f000 fc05 	bl	800260c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001e02:	f000 fd55 	bl	80028b0 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001e06:	f000 f935 	bl	8002074 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8001e0a:	483a      	ldr	r0, [pc, #232]	; (8001ef4 <main+0x108>)
 8001e0c:	f7ff ff98 	bl	8001d40 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e14:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <main+0x108>)
 8001e16:	f7ff ffa3 	bl	8001d60 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // 2kHz
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <main+0x108>)
 8001e1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001e22:	2064      	movs	r0, #100	; 0x64
 8001e24:	f000 fe40 	bl	8002aa8 <HAL_Delay>
  TIM3->PSC = 1500; // 3kHz
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <main+0x108>)
 8001e2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f000 fe39 	bl	8002aa8 <HAL_Delay>
  TIM3->PSC = 1000; // 4kHz
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <main+0x108>)
 8001e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001e3e:	2064      	movs	r0, #100	; 0x64
 8001e40:	f000 fe32 	bl	8002aa8 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e48:	482a      	ldr	r0, [pc, #168]	; (8001ef4 <main+0x108>)
 8001e4a:	f7ff ff9a 	bl	8001d82 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8001e4e:	482a      	ldr	r0, [pc, #168]	; (8001ef8 <main+0x10c>)
 8001e50:	f7ff ffa9 	bl	8001da6 <LL_USART_EnableIT_RXNE>

  BNO080_GPIO_SPI_Initialization();  // SPI2 Init
 8001e54:	f7ff f8f2 	bl	800103c <BNO080_GPIO_SPI_Initialization>
  BNO080_enableRotationVector(2500); // 400Hz
 8001e58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001e5c:	f7ff fc19 	bl	8001692 <BNO080_enableRotationVector>
//		  case '2':
//			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
//			  break;
//		  }
//	  }
	  if(BNO080_dataAvailable())
 8001e60:	f7ff f9c8 	bl	80011f4 <BNO080_dataAvailable>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0fa      	beq.n	8001e60 <main+0x74>
	  {
		  q[0] = BNO080_getQuatI();
 8001e6a:	f7ff fb7d 	bl	8001568 <BNO080_getQuatI>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	edc7 7a01 	vstr	s15, [r7, #4]
		  q[1] = BNO080_getQuatJ();
 8001e76:	f7ff fb8d 	bl	8001594 <BNO080_getQuatJ>
 8001e7a:	eef0 7a40 	vmov.f32	s15, s0
 8001e7e:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[2] = BNO080_getQuatK();
 8001e82:	f7ff fb9d 	bl	80015c0 <BNO080_getQuatK>
 8001e86:	eef0 7a40 	vmov.f32	s15, s0
 8001e8a:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[3] = BNO080_getQuatReal();
 8001e8e:	f7ff fbad 	bl	80015ec <BNO080_getQuatReal>
 8001e92:	eef0 7a40 	vmov.f32	s15, s0
 8001e96:	edc7 7a04 	vstr	s15, [r7, #16]
		  quartRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8001e9a:	f7ff fbbd 	bl	8001618 <BNO080_getQuatRadianAccuracy>
 8001e9e:	ed87 0a05 	vstr	s0, [r7, #20]

		  Quaternion_Update(&q[0]);
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fd39 	bl	800191c <Quaternion_Update>

		  printf("%d,%d,%d\n", (int)(BNO080_Roll * 100), (int)(BNO080_Pitch * 100), (int)(BNO080_Yaw * 100));
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <main+0x110>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f00 <main+0x114>
 8001eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <main+0x118>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001f00 <main+0x114>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <main+0x11c>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001f00 <main+0x114>
 8001ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee0:	ee17 3a90 	vmov	r3, s15
 8001ee4:	ee16 2a10 	vmov	r2, s12
 8001ee8:	ee16 1a90 	vmov	r1, s13
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <main+0x120>)
 8001eee:	f003 f973 	bl	80051d8 <iprintf>
	  if(BNO080_dataAvailable())
 8001ef2:	e7b5      	b.n	8001e60 <main+0x74>
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	200002bc 	.word	0x200002bc
 8001f00:	42c80000 	.word	0x42c80000
 8001f04:	200002c0 	.word	0x200002c0
 8001f08:	200002c4 	.word	0x200002c4
 8001f0c:	08007f44 	.word	0x08007f44

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b094      	sub	sp, #80	; 0x50
 8001f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	2230      	movs	r2, #48	; 0x30
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 faa0 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <SystemClock_Config+0xcc>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <SystemClock_Config+0xcc>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <SystemClock_Config+0xcc>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <SystemClock_Config+0xd0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <SystemClock_Config+0xd0>)
 8001f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <SystemClock_Config+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f76:	2302      	movs	r3, #2
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f80:	2304      	movs	r3, #4
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f84:	23a8      	movs	r3, #168	; 0xa8
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fe91 	bl	8002cbc <HAL_RCC_OscConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa0:	f000 f820 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 f8f2 	bl	80031ac <HAL_RCC_ClockConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fce:	f000 f809 	bl	8001fe4 <Error_Handler>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3750      	adds	r7, #80	; 0x50
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>

08001fee <LL_SPI_SetStandard>:
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 0210 	bic.w	r2, r3, #16
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_AHB1_GRP1_EnableClock>:
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40023800 	.word	0x40023800

08002044 <LL_APB1_GRP1_EnableClock>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800204e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40023800 	.word	0x40023800

08002074 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b090      	sub	sp, #64	; 0x40
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	2228      	movs	r2, #40	; 0x28
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f003 f9ee 	bl	8005464 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800209c:	f7ff ffd2 	bl	8002044 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7ff ffb7 	bl	8002014 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|SPI_BNO080_MISO_Pin|SPI2_BNO080_MOSI_Pin;
 80020a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020ac:	2302      	movs	r3, #2
 80020ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80020bc:	2305      	movs	r3, #5
 80020be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4813      	ldr	r0, [pc, #76]	; (8002114 <MX_SPI2_Init+0xa0>)
 80020c6:	f001 fb62 	bl	800378e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80020ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020d2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80020e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80020f2:	230a      	movs	r3, #10
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_SPI2_Init+0xa4>)
 80020fe:	f001 fd16 	bl	8003b2e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002102:	2100      	movs	r1, #0
 8002104:	4804      	ldr	r0, [pc, #16]	; (8002118 <MX_SPI2_Init+0xa4>)
 8002106:	f7ff ff72 	bl	8001fee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	3740      	adds	r7, #64	; 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020400 	.word	0x40020400
 8002118:	40003800 	.word	0x40003800

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_MspInit+0x4c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_MspInit+0x4c>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <LL_USART_IsActiveFlag_RXNE>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_USART_ClearFlag_RXNE>:
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f06f 0220 	mvn.w	r2, #32
 80021a0:	601a      	str	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	b2db      	uxtb	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 fc28 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <USART6_IRQHandler+0x30>)
 8002222:	f7ff ffa3 	bl	800216c <LL_USART_IsActiveFlag_RXNE>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00c      	beq.n	8002246 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 800222c:	4807      	ldr	r0, [pc, #28]	; (800224c <USART6_IRQHandler+0x30>)
 800222e:	f7ff ffb0 	bl	8002192 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <USART6_IRQHandler+0x30>)
 8002234:	f7ff ffbb 	bl	80021ae <LL_USART_ReceiveData8>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <USART6_IRQHandler+0x34>)
 800223e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <USART6_IRQHandler+0x38>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40011400 	.word	0x40011400
 8002250:	200002c8 	.word	0x200002c8
 8002254:	200002c9 	.word	0x200002c9

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002272:	f003 f949 	bl	8005508 <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
  return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800229a:	e7fe      	b.n	800229a <_exit+0x12>

0800229c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e00a      	b.n	80022c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ae:	f3af 8000 	nop.w
 80022b2:	4601      	mov	r1, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	b2ca      	uxtb	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf0      	blt.n	80022ae <_read+0x12>
  }

  return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e009      	b.n	80022fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf1      	blt.n	80022e8 <_write+0x12>
  }
  return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_close>:

int _close(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002336:	605a      	str	r2, [r3, #4]
  return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_isatty>:

int _isatty(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f003 f8ae 	bl	8005508 <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	220c      	movs	r2, #12
 80023b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20020000 	.word	0x20020000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	200002cc 	.word	0x200002cc
 80023e0:	20000420 	.word	0x20000420

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <SystemInit+0x20>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <SystemInit+0x20>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <LL_TIM_DisableARRPreload>:
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d01c      	beq.n	8002472 <LL_TIM_OC_DisableFast+0x4a>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d017      	beq.n	800246e <LL_TIM_OC_DisableFast+0x46>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b10      	cmp	r3, #16
 8002442:	d012      	beq.n	800246a <LL_TIM_OC_DisableFast+0x42>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d00d      	beq.n	8002466 <LL_TIM_OC_DisableFast+0x3e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002450:	d007      	beq.n	8002462 <LL_TIM_OC_DisableFast+0x3a>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d101      	bne.n	800245e <LL_TIM_OC_DisableFast+0x36>
 800245a:	2305      	movs	r3, #5
 800245c:	e00a      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 800245e:	2306      	movs	r3, #6
 8002460:	e008      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 8002462:	2304      	movs	r3, #4
 8002464:	e006      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_TIM_OC_DisableFast+0x4c>
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3318      	adds	r3, #24
 800247a:	4619      	mov	r1, r3
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <LL_TIM_OC_DisableFast+0x84>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	440b      	add	r3, r1
 8002484:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4908      	ldr	r1, [pc, #32]	; (80024b0 <LL_TIM_OC_DisableFast+0x88>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	4619      	mov	r1, r3
 8002492:	2304      	movs	r3, #4
 8002494:	408b      	lsls	r3, r1
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	601a      	str	r2, [r3, #0]

}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	08007f68 	.word	0x08007f68
 80024b0:	08007f70 	.word	0x08007f70

080024b4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d01c      	beq.n	80024fe <LL_TIM_OC_EnablePreload+0x4a>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d017      	beq.n	80024fa <LL_TIM_OC_EnablePreload+0x46>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d012      	beq.n	80024f6 <LL_TIM_OC_EnablePreload+0x42>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d00d      	beq.n	80024f2 <LL_TIM_OC_EnablePreload+0x3e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024dc:	d007      	beq.n	80024ee <LL_TIM_OC_EnablePreload+0x3a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d101      	bne.n	80024ea <LL_TIM_OC_EnablePreload+0x36>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e00a      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024ea:	2306      	movs	r3, #6
 80024ec:	e008      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e006      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e004      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_TIM_OC_EnablePreload+0x4c>
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3318      	adds	r3, #24
 8002506:	4619      	mov	r1, r3
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LL_TIM_OC_EnablePreload+0x80>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	440b      	add	r3, r1
 8002510:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <LL_TIM_OC_EnablePreload+0x84>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	4619      	mov	r1, r3
 800251e:	2308      	movs	r3, #8
 8002520:	408b      	lsls	r3, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	08007f68 	.word	0x08007f68
 8002538:	08007f70 	.word	0x08007f70

0800253c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_AHB1_GRP1_EnableClock>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40023800 	.word	0x40023800

080025dc <LL_APB1_GRP1_EnableClock>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4013      	ands	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40023800 	.word	0x40023800

0800260c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b094      	sub	sp, #80	; 0x50
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002612:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2220      	movs	r2, #32
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f002 ff1a 	bl	8005464 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff ffcb 	bl	80025dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8002646:	f240 33e7 	movw	r3, #999	; 0x3e7
 800264a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800264c:	2300      	movs	r3, #0
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8002650:	2314      	movs	r3, #20
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002654:	2300      	movs	r3, #0
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800265c:	4619      	mov	r1, r3
 800265e:	4822      	ldr	r0, [pc, #136]	; (80026e8 <MX_TIM3_Init+0xdc>)
 8002660:	f001 fb2a 	bl	8003cb8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002664:	4820      	ldr	r0, [pc, #128]	; (80026e8 <MX_TIM3_Init+0xdc>)
 8002666:	f7ff fecf 	bl	8002408 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800266a:	2100      	movs	r1, #0
 800266c:	481e      	ldr	r0, [pc, #120]	; (80026e8 <MX_TIM3_Init+0xdc>)
 800266e:	f7ff ff65 	bl	800253c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002676:	481c      	ldr	r0, [pc, #112]	; (80026e8 <MX_TIM3_Init+0xdc>)
 8002678:	f7ff ff1c 	bl	80024b4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800267c:	2360      	movs	r3, #96	; 0x60
 800267e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002688:	230a      	movs	r3, #10
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	461a      	mov	r2, r3
 8002696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269a:	4813      	ldr	r0, [pc, #76]	; (80026e8 <MX_TIM3_Init+0xdc>)
 800269c:	f001 fba6 	bl	8003dec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80026a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a4:	4810      	ldr	r0, [pc, #64]	; (80026e8 <MX_TIM3_Init+0xdc>)
 80026a6:	f7ff febf 	bl	8002428 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80026aa:	2100      	movs	r1, #0
 80026ac:	480e      	ldr	r0, [pc, #56]	; (80026e8 <MX_TIM3_Init+0xdc>)
 80026ae:	f7ff ff5a 	bl	8002566 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_TIM3_Init+0xdc>)
 80026b4:	f7ff ff6a 	bl	800258c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026b8:	2002      	movs	r0, #2
 80026ba:	f7ff ff77 	bl	80025ac <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80026be:	2302      	movs	r3, #2
 80026c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026c2:	2302      	movs	r3, #2
 80026c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4804      	ldr	r0, [pc, #16]	; (80026ec <MX_TIM3_Init+0xe0>)
 80026dc:	f001 f857 	bl	800378e <LL_GPIO_Init>

}
 80026e0:	bf00      	nop
 80026e2:	3750      	adds	r7, #80	; 0x50
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40020400 	.word	0x40020400

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_USART_Enable>:
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60da      	str	r2, [r3, #12]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_USART_ConfigAsyncMode>:
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	615a      	str	r2, [r3, #20]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <LL_AHB1_GRP1_EnableClock>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40023800 	.word	0x40023800

08002880 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800288a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40023800 	.word	0x40023800

080028b0 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028b6:	f107 031c 	add.w	r3, r7, #28
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80028da:	2020      	movs	r0, #32
 80028dc:	f7ff ffd0 	bl	8002880 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028e0:	2004      	movs	r0, #4
 80028e2:	f7ff ffb5 	bl	8002850 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80028e6:	23c0      	movs	r3, #192	; 0xc0
 80028e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028ea:	2302      	movs	r3, #2
 80028ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80028fa:	2308      	movs	r3, #8
 80028fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4819      	ldr	r0, [pc, #100]	; (8002968 <MX_USART6_UART_Init+0xb8>)
 8002904:	f000 ff43 	bl	800378e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002908:	f7ff fef2 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 800290c:	4603      	mov	r3, r0
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff42 	bl	800279c <NVIC_EncodePriority>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	2047      	movs	r0, #71	; 0x47
 800291e:	f7ff ff13 	bl	8002748 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002922:	2047      	movs	r0, #71	; 0x47
 8002924:	f7ff fef2 	bl	800270c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002928:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800292c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002936:	2300      	movs	r3, #0
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800293a:	230c      	movs	r3, #12
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800293e:	2300      	movs	r3, #0
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4807      	ldr	r0, [pc, #28]	; (800296c <MX_USART6_UART_Init+0xbc>)
 800294e:	f001 fe9b 	bl	8004688 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <MX_USART6_UART_Init+0xbc>)
 8002954:	f7ff ff65 	bl	8002822 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_USART6_UART_Init+0xbc>)
 800295a:	f7ff ff52 	bl	8002802 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3738      	adds	r7, #56	; 0x38
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40020800 	.word	0x40020800
 800296c:	40011400 	.word	0x40011400

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002976:	490e      	ldr	r1, [pc, #56]	; (80029b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800298c:	4c0b      	ldr	r4, [pc, #44]	; (80029bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800299a:	f7ff fd23 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299e:	f002 fdb9 	bl	8005514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7ff fa23 	bl	8001dec <main>
  bx  lr    
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80029b4:	0800834c 	.word	0x0800834c
  ldr r2, =_sbss
 80029b8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80029bc:	20000420 	.word	0x20000420

080029c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_Init+0x40>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_Init+0x40>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_Init+0x40>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 f931 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	200f      	movs	r0, #15
 80029f4:	f000 f808 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fb90 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f93b 	bl	8002ca2 <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 f911 	bl	8002c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000008 	.word	0x20000008

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	200002d0 	.word	0x200002d0

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200002d0 	.word	0x200002d0

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <__NVIC_SetPriorityGrouping>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_SetPriority>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d301      	bcc.n	8002c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00f      	b.n	8002c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <SysTick_Config+0x40>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2e:	210f      	movs	r1, #15
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7ff ff8e 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <SysTick_Config+0x40>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SysTick_Config+0x40>)
 8002c40:	2207      	movs	r2, #7
 8002c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000e010 	.word	0xe000e010

08002c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff47 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff5c 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff8e 	bl	8002ba8 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff5d 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffb0 	bl	8002c10 <SysTick_Config>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fe8c 	bl	8002a90 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff fe88 	bl	8002a90 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fe78 	bl	8002a90 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7ff fe74 	bl	8002a90 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff fe2d 	bl	8002a90 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fe29 	bl	8002a90 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fe0c 	bl	8002a90 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fe08 	bl	8002a90 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7ff fdec 	bl	8002a90 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7ff fde8 	bl	8002a90 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fdd5 	bl	8002a90 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7ff fdd1 	bl	8002a90 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fd91 	bl	8002a90 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7ff fd8d 	bl	8002a90 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7ff fd52 	bl	8002a90 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7ff fd4e 	bl	8002a90 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7ff fd3c 	bl	8002a90 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7ff fd38 	bl	8002a90 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	; (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fd0c 	bl	8002a90 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7ff fd08 	bl	8002a90 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7ff fce1 	bl	8002a90 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7ff fcdd 	bl	8002a90 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fcca 	bl	8002a90 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff fcc6 	bl	8002a90 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7ff fbf8 	bl	8002a90 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7ff fbf4 	bl	8002a90 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fb58 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08007f50 	.word	0x08007f50
 8003370:	20000004 	.word	0x20000004
 8003374:	20000008 	.word	0x20000008

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b094      	sub	sp, #80	; 0x50
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
 8003384:	2300      	movs	r3, #0
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80e1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e0db      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b73      	ldr	r3, [pc, #460]	; (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033b0:	e0db      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b73      	ldr	r3, [pc, #460]	; (8003580 <HAL_RCC_GetSysClockFreq+0x208>)
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b6:	e0d8      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b6f      	ldr	r3, [pc, #444]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4621      	mov	r1, r4
 8003404:	1a51      	subs	r1, r2, r1
 8003406:	6139      	str	r1, [r7, #16]
 8003408:	4629      	mov	r1, r5
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	018b      	lsls	r3, r1, #6
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003426:	4651      	mov	r1, sl
 8003428:	018a      	lsls	r2, r1, #6
 800342a:	4651      	mov	r1, sl
 800342c:	ebb2 0801 	subs.w	r8, r2, r1
 8003430:	4659      	mov	r1, fp
 8003432:	eb63 0901 	sbc.w	r9, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb18 0303 	adds.w	r3, r8, r3
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	462b      	mov	r3, r5
 8003458:	eb49 0303 	adc.w	r3, r9, r3
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346a:	4629      	mov	r1, r5
 800346c:	024b      	lsls	r3, r1, #9
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003474:	4621      	mov	r1, r4
 8003476:	024a      	lsls	r2, r1, #9
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
 8003482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003488:	f7fd fb8e 	bl	8000ba8 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	e058      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	4611      	mov	r1, r2
 80034a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c2:	0150      	lsls	r0, r2, #5
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4641      	mov	r1, r8
 80034ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e8:	ebb2 040a 	subs.w	r4, r2, sl
 80034ec:	eb63 050b 	sbc.w	r5, r3, fp
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	464b      	mov	r3, r9
 800350c:	eb45 0303 	adc.w	r3, r5, r3
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	61fa      	str	r2, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	f7fd fb34 	bl	8000ba8 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800356c:	4618      	mov	r0, r3
 800356e:	3750      	adds	r7, #80	; 0x50
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200

08003584 <LL_GPIO_SetPinMode>:
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	613b      	str	r3, [r7, #16]
  return result;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2103      	movs	r1, #3
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	61bb      	str	r3, [r7, #24]
  return result;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_GPIO_SetPinOutputType>:
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_GPIO_SetPinSpeed>:
{
 8003612:	b480      	push	{r7}
 8003614:	b089      	sub	sp, #36	; 0x24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	613b      	str	r3, [r7, #16]
  return result;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2103      	movs	r1, #3
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	401a      	ands	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	61bb      	str	r3, [r7, #24]
  return result;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	3724      	adds	r7, #36	; 0x24
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_GPIO_SetPinPull>:
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	613b      	str	r3, [r7, #16]
  return result;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2103      	movs	r1, #3
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	61bb      	str	r3, [r7, #24]
  return result;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	60da      	str	r2, [r3, #12]
}
 80036c2:	bf00      	nop
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_GPIO_SetAFPin_0_7>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b089      	sub	sp, #36	; 0x24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1a      	ldr	r2, [r3, #32]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	613b      	str	r3, [r7, #16]
  return result;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	210f      	movs	r1, #15
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	401a      	ands	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	61bb      	str	r3, [r7, #24]
  return result;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	431a      	orrs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
}
 8003720:	bf00      	nop
 8003722:	3724      	adds	r7, #36	; 0x24
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_GPIO_SetAFPin_8_15>:
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	613b      	str	r3, [r7, #16]
  return result;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	210f      	movs	r1, #15
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	401a      	ands	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	61bb      	str	r3, [r7, #24]
  return result;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003782:	bf00      	nop
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	613b      	str	r3, [r7, #16]
  return result;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80037b8:	e050      	b.n	800385c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d042      	beq.n	8003856 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d003      	beq.n	80037e0 <LL_GPIO_Init+0x52>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d10d      	bne.n	80037fc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	461a      	mov	r2, r3
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff12 	bl	8003612 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	461a      	mov	r2, r3
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fef3 	bl	80035e2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	461a      	mov	r2, r3
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff33 	bl	8003670 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d11a      	bne.n	8003848 <LL_GPIO_Init+0xba>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	60bb      	str	r3, [r7, #8]
  return result;
 800381e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b07      	cmp	r3, #7
 8003828:	d807      	bhi.n	800383a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	461a      	mov	r2, r3
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff4b 	bl	80036ce <LL_GPIO_SetAFPin_0_7>
 8003838:	e006      	b.n	8003848 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	461a      	mov	r2, r3
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff72 	bl	800372c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	461a      	mov	r2, r3
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fe97 	bl	8003584 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3301      	adds	r3, #1
 800385a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a7      	bne.n	80037ba <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <LL_RCC_GetSysClkSource+0x18>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <LL_RCC_GetAHBPrescaler+0x18>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <LL_RCC_PLL_GetMainSource+0x18>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <LL_RCC_PLL_GetN+0x18>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40023800 	.word	0x40023800

0800391c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <LL_RCC_PLL_GetP+0x18>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <LL_RCC_PLL_GetDivider+0x18>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800395c:	f000 f820 	bl	80039a0 <RCC_GetSystemClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f840 	bl	80039f0 <RCC_GetHCLKClockFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f84e 	bl	8003a1c <RCC_GetPCLK1ClockFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f85a 	bl	8003a44 <RCC_GetPCLK2ClockFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80039aa:	f7ff ff63 	bl	8003874 <LL_RCC_GetSysClkSource>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d00c      	beq.n	80039ce <RCC_GetSystemClockFreq+0x2e>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d80f      	bhi.n	80039d8 <RCC_GetSystemClockFreq+0x38>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <RCC_GetSystemClockFreq+0x22>
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d003      	beq.n	80039c8 <RCC_GetSystemClockFreq+0x28>
 80039c0:	e00a      	b.n	80039d8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <RCC_GetSystemClockFreq+0x48>)
 80039c4:	607b      	str	r3, [r7, #4]
      break;
 80039c6:	e00a      	b.n	80039de <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <RCC_GetSystemClockFreq+0x4c>)
 80039ca:	607b      	str	r3, [r7, #4]
      break;
 80039cc:	e007      	b.n	80039de <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80039ce:	2008      	movs	r0, #8
 80039d0:	f000 f84c 	bl	8003a6c <RCC_PLL_GetFreqDomain_SYS>
 80039d4:	6078      	str	r0, [r7, #4]
      break;
 80039d6:	e002      	b.n	80039de <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <RCC_GetSystemClockFreq+0x48>)
 80039da:	607b      	str	r3, [r7, #4]
      break;
 80039dc:	bf00      	nop
  }

  return frequency;
 80039de:	687b      	ldr	r3, [r7, #4]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	007a1200 	.word	0x007a1200

080039f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80039f8:	f7ff ff4a 	bl	8003890 <LL_RCC_GetAHBPrescaler>
 80039fc:	4603      	mov	r3, r0
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <RCC_GetHCLKClockFreq+0x28>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	40d3      	lsrs	r3, r2
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08007f50 	.word	0x08007f50

08003a1c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a24:	f7ff ff42 	bl	80038ac <LL_RCC_GetAPB1Prescaler>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <RCC_GetPCLK1ClockFreq+0x24>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	40d3      	lsrs	r3, r2
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08007f60 	.word	0x08007f60

08003a44 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a4c:	f7ff ff3c 	bl	80038c8 <LL_RCC_GetAPB2Prescaler>
 8003a50:	4603      	mov	r3, r0
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <RCC_GetPCLK2ClockFreq+0x24>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	40d3      	lsrs	r3, r2
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08007f60 	.word	0x08007f60

08003a6c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a80:	f7ff ff30 	bl	80038e4 <LL_RCC_PLL_GetMainSource>
 8003a84:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d003      	beq.n	8003a9c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003a94:	e005      	b.n	8003aa2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	e005      	b.n	8003aa8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003a9e:	617b      	str	r3, [r7, #20]
      break;
 8003aa0:	e002      	b.n	8003aa8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003aa4:	617b      	str	r3, [r7, #20]
      break;
 8003aa6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d113      	bne.n	8003ad6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003aae:	f7ff ff43 	bl	8003938 <LL_RCC_PLL_GetDivider>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fbb3 f4f2 	udiv	r4, r3, r2
 8003aba:	f7ff ff21 	bl	8003900 <LL_RCC_PLL_GetN>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	fb03 f404 	mul.w	r4, r3, r4
 8003ac4:	f7ff ff2a 	bl	800391c <LL_RCC_PLL_GetP>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ad4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003ad6:	693b      	ldr	r3, [r7, #16]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	007a1200 	.word	0x007a1200

08003ae8 <LL_SPI_IsEnabled>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d101      	bne.n	8003b00 <LL_SPI_IsEnabled+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_SPI_IsEnabled+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_SPI_SetCRCPolynomial>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ffd3 	bl	8003ae8 <LL_SPI_IsEnabled>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d139      	bne.n	8003bbc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b50:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	6852      	ldr	r2, [r2, #4]
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6892      	ldr	r2, [r2, #8]
 8003b62:	4311      	orrs	r1, r2
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	68d2      	ldr	r2, [r2, #12]
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	6912      	ldr	r2, [r2, #16]
 8003b6e:	4311      	orrs	r1, r2
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	6952      	ldr	r2, [r2, #20]
 8003b74:	4311      	orrs	r1, r2
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	6992      	ldr	r2, [r2, #24]
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	69d2      	ldr	r2, [r2, #28]
 8003b80:	4311      	orrs	r1, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	6a12      	ldr	r2, [r2, #32]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 0204 	bic.w	r2, r3, #4
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003baa:	d105      	bne.n	8003bb8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffab 	bl	8003b0e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	61da      	str	r2, [r3, #28]
  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <LL_TIM_SetPrescaler>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_TIM_SetAutoReload>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_TIM_SetRepetitionCounter>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_TIM_OC_SetCompareCH1>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_TIM_OC_SetCompareCH2>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_TIM_OC_SetCompareCH3>:
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_TIM_OC_SetCompareCH4>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	615a      	str	r2, [r3, #20]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3d      	ldr	r2, [pc, #244]	; (8003dc0 <LL_TIM_Init+0x108>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <LL_TIM_Init+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d00f      	beq.n	8003cf8 <LL_TIM_Init+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3a      	ldr	r2, [pc, #232]	; (8003dc4 <LL_TIM_Init+0x10c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <LL_TIM_Init+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <LL_TIM_Init+0x110>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <LL_TIM_Init+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <LL_TIM_Init+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <LL_TIM_Init+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <LL_TIM_Init+0x118>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d106      	bne.n	8003d06 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <LL_TIM_Init+0x108>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d027      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <LL_TIM_Init+0x10c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d023      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <LL_TIM_Init+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <LL_TIM_Init+0x114>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01b      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <LL_TIM_Init+0x118>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d017      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <LL_TIM_Init+0x11c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <LL_TIM_Init+0x120>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <LL_TIM_Init+0x124>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <LL_TIM_Init+0x128>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <LL_TIM_Init+0x12c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <LL_TIM_Init+0xae>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <LL_TIM_Init+0x130>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d106      	bne.n	8003d74 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff34 	bl	8003bee <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff20 	bl	8003bd2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <LL_TIM_Init+0x108>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <LL_TIM_Init+0xea>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <LL_TIM_Init+0x118>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d105      	bne.n	8003dae <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff2e 	bl	8003c0a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ff71 	bl	8003c96 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40010400 	.word	0x40010400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800
 8003de0:	40001800 	.word	0x40001800
 8003de4:	40001c00 	.word	0x40001c00
 8003de8:	40002000 	.word	0x40002000

08003dec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e02:	d027      	beq.n	8003e54 <LL_TIM_OC_Init+0x68>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d82a      	bhi.n	8003e62 <LL_TIM_OC_Init+0x76>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e12:	d018      	beq.n	8003e46 <LL_TIM_OC_Init+0x5a>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d822      	bhi.n	8003e62 <LL_TIM_OC_Init+0x76>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d003      	beq.n	8003e2a <LL_TIM_OC_Init+0x3e>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d007      	beq.n	8003e38 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003e28:	e01b      	b.n	8003e62 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f81f 	bl	8003e70 <OC1Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
      break;
 8003e36:	e015      	b.n	8003e64 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f884 	bl	8003f48 <OC2Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e00e      	b.n	8003e64 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f8ed 	bl	8004028 <OC3Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
      break;
 8003e52:	e007      	b.n	8003e64 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f956 	bl	8004108 <OC4Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	e000      	b.n	8003e64 <LL_TIM_OC_Init+0x78>
      break;
 8003e62:	bf00      	nop
  }

  return result;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0202 	bic.w	r2, r3, #2
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <OC1Config+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <OC1Config+0x6a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <OC1Config+0xd4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d11e      	bne.n	8003f18 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0208 	bic.w	r2, r3, #8
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 0204 	bic.w	r2, r3, #4
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fe7b 	bl	8003c26 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400

08003f48 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0210 	bic.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0220 	bic.w	r2, r3, #32
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <OC2Config+0xd8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <OC2Config+0x70>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <OC2Config+0xdc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d11f      	bne.n	8003ff8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe19 	bl	8003c42 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40010000 	.word	0x40010000
 8004024:	40010400 	.word	0x40010400

08004028 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <OC3Config+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <OC3Config+0x6e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <OC3Config+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d11f      	bne.n	80040d6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fdb8 	bl	8003c5e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40010400 	.word	0x40010400

08004108 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	031b      	lsls	r3, r3, #12
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	031b      	lsls	r3, r3, #12
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <OC4Config+0xa8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <OC4Config+0x70>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <OC4Config+0xac>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d107      	bne.n	8004188 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	019b      	lsls	r3, r3, #6
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fd6d 	bl	8003c7a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <LL_USART_IsEnabled>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_USART_SetStopBitsLength>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_USART_SetHWFlowCtrl>:
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	615a      	str	r2, [r3, #20]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_USART_SetBaudRate>:
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b0c0      	sub	sp, #256	; 0x100
 8004232:	af00      	add	r7, sp, #0
 8004234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004238:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800423c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004240:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	f040 810c 	bne.w	8004468 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004254:	2200      	movs	r2, #0
 8004256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800425a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800425e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	1891      	adds	r1, r2, r2
 8004268:	6639      	str	r1, [r7, #96]	; 0x60
 800426a:	415b      	adcs	r3, r3
 800426c:	667b      	str	r3, [r7, #100]	; 0x64
 800426e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004272:	4621      	mov	r1, r4
 8004274:	eb12 0801 	adds.w	r8, r2, r1
 8004278:	4629      	mov	r1, r5
 800427a:	eb43 0901 	adc.w	r9, r3, r1
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800428a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004292:	4690      	mov	r8, r2
 8004294:	4699      	mov	r9, r3
 8004296:	4623      	mov	r3, r4
 8004298:	eb18 0303 	adds.w	r3, r8, r3
 800429c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042a0:	462b      	mov	r3, r5
 80042a2:	eb49 0303 	adc.w	r3, r9, r3
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042ae:	2200      	movs	r2, #0
 80042b0:	469a      	mov	sl, r3
 80042b2:	4693      	mov	fp, r2
 80042b4:	eb1a 030a 	adds.w	r3, sl, sl
 80042b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ba:	eb4b 030b 	adc.w	r3, fp, fp
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042c8:	f7fc fc6e 	bl	8000ba8 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4b64      	ldr	r3, [pc, #400]	; (8004464 <LL_USART_SetBaudRate+0x238>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	b29b      	uxth	r3, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	b29c      	uxth	r4, r3
 80042de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042e8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042ec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	6539      	str	r1, [r7, #80]	; 0x50
 80042f8:	415b      	adcs	r3, r3
 80042fa:	657b      	str	r3, [r7, #84]	; 0x54
 80042fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004300:	4641      	mov	r1, r8
 8004302:	1851      	adds	r1, r2, r1
 8004304:	64b9      	str	r1, [r7, #72]	; 0x48
 8004306:	4649      	mov	r1, r9
 8004308:	414b      	adcs	r3, r1
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004318:	4659      	mov	r1, fp
 800431a:	00cb      	lsls	r3, r1, #3
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004322:	4651      	mov	r1, sl
 8004324:	00ca      	lsls	r2, r1, #3
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	4603      	mov	r3, r0
 800432c:	4642      	mov	r2, r8
 800432e:	189b      	adds	r3, r3, r2
 8004330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004334:	464b      	mov	r3, r9
 8004336:	460a      	mov	r2, r1
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800434a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800434e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004352:	460b      	mov	r3, r1
 8004354:	18db      	adds	r3, r3, r3
 8004356:	643b      	str	r3, [r7, #64]	; 0x40
 8004358:	4613      	mov	r3, r2
 800435a:	eb42 0303 	adc.w	r3, r2, r3
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
 8004360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004364:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004368:	f7fc fc1e 	bl	8000ba8 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4611      	mov	r1, r2
 8004372:	4b3c      	ldr	r3, [pc, #240]	; (8004464 <LL_USART_SetBaudRate+0x238>)
 8004374:	fba3 2301 	umull	r2, r3, r3, r1
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2264      	movs	r2, #100	; 0x64
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	1acb      	subs	r3, r1, r3
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <LL_USART_SetBaudRate+0x238>)
 800438a:	fba3 2302 	umull	r2, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	b29b      	uxth	r3, r3
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800439a:	b29b      	uxth	r3, r3
 800439c:	4423      	add	r3, r4
 800439e:	b29c      	uxth	r4, r3
 80043a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043ae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ba:	415b      	adcs	r3, r3
 80043bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c2:	4641      	mov	r1, r8
 80043c4:	1851      	adds	r1, r2, r1
 80043c6:	6339      	str	r1, [r7, #48]	; 0x30
 80043c8:	4649      	mov	r1, r9
 80043ca:	414b      	adcs	r3, r1
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043da:	4659      	mov	r1, fp
 80043dc:	00cb      	lsls	r3, r1, #3
 80043de:	4651      	mov	r1, sl
 80043e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e4:	4651      	mov	r1, sl
 80043e6:	00ca      	lsls	r2, r1, #3
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	4603      	mov	r3, r0
 80043ee:	4642      	mov	r2, r8
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f6:	464b      	mov	r3, r9
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800440c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004410:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004414:	460b      	mov	r3, r1
 8004416:	18db      	adds	r3, r3, r3
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
 800441a:	4613      	mov	r3, r2
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004426:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800442a:	f7fc fbbd 	bl	8000ba8 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <LL_USART_SetBaudRate+0x238>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <LL_USART_SetBaudRate+0x238>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	b29b      	uxth	r3, r3
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	b29b      	uxth	r3, r3
 8004456:	4423      	add	r3, r4
 8004458:	b29b      	uxth	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004460:	609a      	str	r2, [r3, #8]
}
 8004462:	e108      	b.n	8004676 <LL_USART_SetBaudRate+0x44a>
 8004464:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004472:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004476:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	1891      	adds	r1, r2, r2
 8004480:	6239      	str	r1, [r7, #32]
 8004482:	415b      	adcs	r3, r3
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800448a:	4641      	mov	r1, r8
 800448c:	1854      	adds	r4, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb43 0501 	adc.w	r5, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	00eb      	lsls	r3, r5, #3
 800449e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a2:	00e2      	lsls	r2, r4, #3
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	4643      	mov	r3, r8
 80044aa:	18e3      	adds	r3, r4, r3
 80044ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b0:	464b      	mov	r3, r9
 80044b2:	eb45 0303 	adc.w	r3, r5, r3
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80044d4:	4629      	mov	r1, r5
 80044d6:	008b      	lsls	r3, r1, #2
 80044d8:	4621      	mov	r1, r4
 80044da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044de:	4621      	mov	r1, r4
 80044e0:	008a      	lsls	r2, r1, #2
 80044e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80044e6:	f7fc fb5f 	bl	8000ba8 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b65      	ldr	r3, [pc, #404]	; (8004684 <LL_USART_SetBaudRate+0x458>)
 80044f0:	fba3 2302 	umull	r2, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	b29c      	uxth	r4, r3
 80044fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004500:	2200      	movs	r2, #0
 8004502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800450a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800450e:	4642      	mov	r2, r8
 8004510:	464b      	mov	r3, r9
 8004512:	1891      	adds	r1, r2, r2
 8004514:	61b9      	str	r1, [r7, #24]
 8004516:	415b      	adcs	r3, r3
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451e:	4641      	mov	r1, r8
 8004520:	1851      	adds	r1, r2, r1
 8004522:	6139      	str	r1, [r7, #16]
 8004524:	4649      	mov	r1, r9
 8004526:	414b      	adcs	r3, r1
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004536:	4659      	mov	r1, fp
 8004538:	00cb      	lsls	r3, r1, #3
 800453a:	4651      	mov	r1, sl
 800453c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004540:	4651      	mov	r1, sl
 8004542:	00ca      	lsls	r2, r1, #3
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	4603      	mov	r3, r0
 800454a:	4642      	mov	r2, r8
 800454c:	189b      	adds	r3, r3, r2
 800454e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004552:	464b      	mov	r3, r9
 8004554:	460a      	mov	r2, r1
 8004556:	eb42 0303 	adc.w	r3, r2, r3
 800455a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800455e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004568:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004578:	4649      	mov	r1, r9
 800457a:	008b      	lsls	r3, r1, #2
 800457c:	4641      	mov	r1, r8
 800457e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004582:	4641      	mov	r1, r8
 8004584:	008a      	lsls	r2, r1, #2
 8004586:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800458a:	f7fc fb0d 	bl	8000ba8 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4611      	mov	r1, r2
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <LL_USART_SetBaudRate+0x458>)
 8004596:	fba3 2301 	umull	r2, r3, r3, r1
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2264      	movs	r2, #100	; 0x64
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	1acb      	subs	r3, r1, r3
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	3332      	adds	r3, #50	; 0x32
 80045a8:	4a36      	ldr	r2, [pc, #216]	; (8004684 <LL_USART_SetBaudRate+0x458>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4423      	add	r3, r4
 80045ba:	b29c      	uxth	r4, r3
 80045bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045c0:	2200      	movs	r2, #0
 80045c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045c6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045ca:	4642      	mov	r2, r8
 80045cc:	464b      	mov	r3, r9
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	415b      	adcs	r3, r3
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045da:	4641      	mov	r1, r8
 80045dc:	1851      	adds	r1, r2, r1
 80045de:	6039      	str	r1, [r7, #0]
 80045e0:	4649      	mov	r1, r9
 80045e2:	414b      	adcs	r3, r1
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045f2:	4659      	mov	r1, fp
 80045f4:	00cb      	lsls	r3, r1, #3
 80045f6:	4651      	mov	r1, sl
 80045f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fc:	4651      	mov	r1, sl
 80045fe:	00ca      	lsls	r2, r1, #3
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	4603      	mov	r3, r0
 8004606:	4642      	mov	r2, r8
 8004608:	189b      	adds	r3, r3, r2
 800460a:	673b      	str	r3, [r7, #112]	; 0x70
 800460c:	464b      	mov	r3, r9
 800460e:	460a      	mov	r2, r1
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	677b      	str	r3, [r7, #116]	; 0x74
 8004616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800461a:	2200      	movs	r2, #0
 800461c:	66bb      	str	r3, [r7, #104]	; 0x68
 800461e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800462c:	4649      	mov	r1, r9
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	4641      	mov	r1, r8
 8004632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004636:	4641      	mov	r1, r8
 8004638:	008a      	lsls	r2, r1, #2
 800463a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800463e:	f7fc fab3 	bl	8000ba8 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <LL_USART_SetBaudRate+0x458>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	; 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	3332      	adds	r3, #50	; 0x32
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <LL_USART_SetBaudRate+0x458>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	b29b      	uxth	r3, r3
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b29b      	uxth	r3, r3
 800466a:	4423      	add	r3, r4
 800466c:	b29b      	uxth	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004674:	609a      	str	r2, [r3, #8]
}
 8004676:	bf00      	nop
 8004678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	51eb851f 	.word	0x51eb851f

08004688 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fd8c 	bl	80041b8 <LL_USART_IsEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d15e      	bne.n	8004764 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046ae:	f023 030c 	bic.w	r3, r3, #12
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	6851      	ldr	r1, [r2, #4]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	4311      	orrs	r1, r2
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	6912      	ldr	r2, [r2, #16]
 80046c0:	4311      	orrs	r1, r2
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	6992      	ldr	r2, [r2, #24]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fd83 	bl	80041e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fd90 	bl	8004206 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff f932 	bl	8003954 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <LL_USART_Init+0xe8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d102      	bne.n	80046fe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e021      	b.n	8004742 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <LL_USART_Init+0xec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d102      	bne.n	800470c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e01a      	b.n	8004742 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <LL_USART_Init+0xf0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d102      	bne.n	800471a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e013      	b.n	8004742 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <LL_USART_Init+0xf4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d102      	bne.n	8004728 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e00c      	b.n	8004742 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <LL_USART_Init+0xf8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d102      	bne.n	8004736 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e005      	b.n	8004742 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <LL_USART_Init+0xfc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004750:	2300      	movs	r3, #0
 8004752:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fd64 	bl	800422c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004764:	7ffb      	ldrb	r3, [r7, #31]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40011000 	.word	0x40011000
 8004774:	40004400 	.word	0x40004400
 8004778:	40004800 	.word	0x40004800
 800477c:	40011400 	.word	0x40011400
 8004780:	40004c00 	.word	0x40004c00
 8004784:	40005000 	.word	0x40005000

08004788 <__cvt>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	ec55 4b10 	vmov	r4, r5, d0
 8004790:	2d00      	cmp	r5, #0
 8004792:	460e      	mov	r6, r1
 8004794:	4619      	mov	r1, r3
 8004796:	462b      	mov	r3, r5
 8004798:	bfbb      	ittet	lt
 800479a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800479e:	461d      	movlt	r5, r3
 80047a0:	2300      	movge	r3, #0
 80047a2:	232d      	movlt	r3, #45	; 0x2d
 80047a4:	700b      	strb	r3, [r1, #0]
 80047a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047ac:	4691      	mov	r9, r2
 80047ae:	f023 0820 	bic.w	r8, r3, #32
 80047b2:	bfbc      	itt	lt
 80047b4:	4622      	movlt	r2, r4
 80047b6:	4614      	movlt	r4, r2
 80047b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047bc:	d005      	beq.n	80047ca <__cvt+0x42>
 80047be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047c2:	d100      	bne.n	80047c6 <__cvt+0x3e>
 80047c4:	3601      	adds	r6, #1
 80047c6:	2102      	movs	r1, #2
 80047c8:	e000      	b.n	80047cc <__cvt+0x44>
 80047ca:	2103      	movs	r1, #3
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	ab02      	add	r3, sp, #8
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	ec45 4b10 	vmov	d0, r4, r5
 80047d8:	4653      	mov	r3, sl
 80047da:	4632      	mov	r2, r6
 80047dc:	f000 ff4c 	bl	8005678 <_dtoa_r>
 80047e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047e4:	4607      	mov	r7, r0
 80047e6:	d102      	bne.n	80047ee <__cvt+0x66>
 80047e8:	f019 0f01 	tst.w	r9, #1
 80047ec:	d022      	beq.n	8004834 <__cvt+0xac>
 80047ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047f2:	eb07 0906 	add.w	r9, r7, r6
 80047f6:	d110      	bne.n	800481a <__cvt+0x92>
 80047f8:	783b      	ldrb	r3, [r7, #0]
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d10a      	bne.n	8004814 <__cvt+0x8c>
 80047fe:	2200      	movs	r2, #0
 8004800:	2300      	movs	r3, #0
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fc f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800480a:	b918      	cbnz	r0, 8004814 <__cvt+0x8c>
 800480c:	f1c6 0601 	rsb	r6, r6, #1
 8004810:	f8ca 6000 	str.w	r6, [sl]
 8004814:	f8da 3000 	ldr.w	r3, [sl]
 8004818:	4499      	add	r9, r3
 800481a:	2200      	movs	r2, #0
 800481c:	2300      	movs	r3, #0
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fc f951 	bl	8000ac8 <__aeabi_dcmpeq>
 8004826:	b108      	cbz	r0, 800482c <__cvt+0xa4>
 8004828:	f8cd 900c 	str.w	r9, [sp, #12]
 800482c:	2230      	movs	r2, #48	; 0x30
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	454b      	cmp	r3, r9
 8004832:	d307      	bcc.n	8004844 <__cvt+0xbc>
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004838:	1bdb      	subs	r3, r3, r7
 800483a:	4638      	mov	r0, r7
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	b004      	add	sp, #16
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	1c59      	adds	r1, r3, #1
 8004846:	9103      	str	r1, [sp, #12]
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e7f0      	b.n	800482e <__cvt+0xa6>

0800484c <__exponent>:
 800484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484e:	4603      	mov	r3, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	bfb8      	it	lt
 8004854:	4249      	neglt	r1, r1
 8004856:	f803 2b02 	strb.w	r2, [r3], #2
 800485a:	bfb4      	ite	lt
 800485c:	222d      	movlt	r2, #45	; 0x2d
 800485e:	222b      	movge	r2, #43	; 0x2b
 8004860:	2909      	cmp	r1, #9
 8004862:	7042      	strb	r2, [r0, #1]
 8004864:	dd2a      	ble.n	80048bc <__exponent+0x70>
 8004866:	f10d 0207 	add.w	r2, sp, #7
 800486a:	4617      	mov	r7, r2
 800486c:	260a      	movs	r6, #10
 800486e:	4694      	mov	ip, r2
 8004870:	fb91 f5f6 	sdiv	r5, r1, r6
 8004874:	fb06 1415 	mls	r4, r6, r5, r1
 8004878:	3430      	adds	r4, #48	; 0x30
 800487a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800487e:	460c      	mov	r4, r1
 8004880:	2c63      	cmp	r4, #99	; 0x63
 8004882:	f102 32ff 	add.w	r2, r2, #4294967295
 8004886:	4629      	mov	r1, r5
 8004888:	dcf1      	bgt.n	800486e <__exponent+0x22>
 800488a:	3130      	adds	r1, #48	; 0x30
 800488c:	f1ac 0402 	sub.w	r4, ip, #2
 8004890:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004894:	1c41      	adds	r1, r0, #1
 8004896:	4622      	mov	r2, r4
 8004898:	42ba      	cmp	r2, r7
 800489a:	d30a      	bcc.n	80048b2 <__exponent+0x66>
 800489c:	f10d 0209 	add.w	r2, sp, #9
 80048a0:	eba2 020c 	sub.w	r2, r2, ip
 80048a4:	42bc      	cmp	r4, r7
 80048a6:	bf88      	it	hi
 80048a8:	2200      	movhi	r2, #0
 80048aa:	4413      	add	r3, r2
 80048ac:	1a18      	subs	r0, r3, r0
 80048ae:	b003      	add	sp, #12
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048ba:	e7ed      	b.n	8004898 <__exponent+0x4c>
 80048bc:	2330      	movs	r3, #48	; 0x30
 80048be:	3130      	adds	r1, #48	; 0x30
 80048c0:	7083      	strb	r3, [r0, #2]
 80048c2:	70c1      	strb	r1, [r0, #3]
 80048c4:	1d03      	adds	r3, r0, #4
 80048c6:	e7f1      	b.n	80048ac <__exponent+0x60>

080048c8 <_printf_float>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	ed2d 8b02 	vpush	{d8}
 80048d0:	b08d      	sub	sp, #52	; 0x34
 80048d2:	460c      	mov	r4, r1
 80048d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80048d8:	4616      	mov	r6, r2
 80048da:	461f      	mov	r7, r3
 80048dc:	4605      	mov	r5, r0
 80048de:	f000 fdc9 	bl	8005474 <_localeconv_r>
 80048e2:	f8d0 a000 	ldr.w	sl, [r0]
 80048e6:	4650      	mov	r0, sl
 80048e8:	f7fb fcc2 	bl	8000270 <strlen>
 80048ec:	2300      	movs	r3, #0
 80048ee:	930a      	str	r3, [sp, #40]	; 0x28
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	f8d8 3000 	ldr.w	r3, [r8]
 80048f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048fc:	3307      	adds	r3, #7
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	f103 0208 	add.w	r2, r3, #8
 8004906:	f8c8 2000 	str.w	r2, [r8]
 800490a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800490e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004912:	9307      	str	r3, [sp, #28]
 8004914:	f8cd 8018 	str.w	r8, [sp, #24]
 8004918:	ee08 0a10 	vmov	s16, r0
 800491c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004924:	4b9e      	ldr	r3, [pc, #632]	; (8004ba0 <_printf_float+0x2d8>)
 8004926:	f04f 32ff 	mov.w	r2, #4294967295
 800492a:	f7fc f8ff 	bl	8000b2c <__aeabi_dcmpun>
 800492e:	bb88      	cbnz	r0, 8004994 <_printf_float+0xcc>
 8004930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004934:	4b9a      	ldr	r3, [pc, #616]	; (8004ba0 <_printf_float+0x2d8>)
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	f7fc f8d9 	bl	8000af0 <__aeabi_dcmple>
 800493e:	bb48      	cbnz	r0, 8004994 <_printf_float+0xcc>
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	4640      	mov	r0, r8
 8004946:	4649      	mov	r1, r9
 8004948:	f7fc f8c8 	bl	8000adc <__aeabi_dcmplt>
 800494c:	b110      	cbz	r0, 8004954 <_printf_float+0x8c>
 800494e:	232d      	movs	r3, #45	; 0x2d
 8004950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004954:	4a93      	ldr	r2, [pc, #588]	; (8004ba4 <_printf_float+0x2dc>)
 8004956:	4b94      	ldr	r3, [pc, #592]	; (8004ba8 <_printf_float+0x2e0>)
 8004958:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800495c:	bf94      	ite	ls
 800495e:	4690      	movls	r8, r2
 8004960:	4698      	movhi	r8, r3
 8004962:	2303      	movs	r3, #3
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	9b05      	ldr	r3, [sp, #20]
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	f04f 0900 	mov.w	r9, #0
 8004972:	9700      	str	r7, [sp, #0]
 8004974:	4633      	mov	r3, r6
 8004976:	aa0b      	add	r2, sp, #44	; 0x2c
 8004978:	4621      	mov	r1, r4
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f9da 	bl	8004d34 <_printf_common>
 8004980:	3001      	adds	r0, #1
 8004982:	f040 8090 	bne.w	8004aa6 <_printf_float+0x1de>
 8004986:	f04f 30ff 	mov.w	r0, #4294967295
 800498a:	b00d      	add	sp, #52	; 0x34
 800498c:	ecbd 8b02 	vpop	{d8}
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	f7fc f8c6 	bl	8000b2c <__aeabi_dcmpun>
 80049a0:	b140      	cbz	r0, 80049b4 <_printf_float+0xec>
 80049a2:	464b      	mov	r3, r9
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bfbc      	itt	lt
 80049a8:	232d      	movlt	r3, #45	; 0x2d
 80049aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049ae:	4a7f      	ldr	r2, [pc, #508]	; (8004bac <_printf_float+0x2e4>)
 80049b0:	4b7f      	ldr	r3, [pc, #508]	; (8004bb0 <_printf_float+0x2e8>)
 80049b2:	e7d1      	b.n	8004958 <_printf_float+0x90>
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049ba:	9206      	str	r2, [sp, #24]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	d13f      	bne.n	8004a40 <_printf_float+0x178>
 80049c0:	2306      	movs	r3, #6
 80049c2:	6063      	str	r3, [r4, #4]
 80049c4:	9b05      	ldr	r3, [sp, #20]
 80049c6:	6861      	ldr	r1, [r4, #4]
 80049c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049cc:	2300      	movs	r3, #0
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	ab0a      	add	r3, sp, #40	; 0x28
 80049d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80049d6:	ab09      	add	r3, sp, #36	; 0x24
 80049d8:	ec49 8b10 	vmov	d0, r8, r9
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7ff fecf 	bl	8004788 <__cvt>
 80049ea:	9b06      	ldr	r3, [sp, #24]
 80049ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ee:	2b47      	cmp	r3, #71	; 0x47
 80049f0:	4680      	mov	r8, r0
 80049f2:	d108      	bne.n	8004a06 <_printf_float+0x13e>
 80049f4:	1cc8      	adds	r0, r1, #3
 80049f6:	db02      	blt.n	80049fe <_printf_float+0x136>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	4299      	cmp	r1, r3
 80049fc:	dd41      	ble.n	8004a82 <_printf_float+0x1ba>
 80049fe:	f1ab 0302 	sub.w	r3, fp, #2
 8004a02:	fa5f fb83 	uxtb.w	fp, r3
 8004a06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a0a:	d820      	bhi.n	8004a4e <_printf_float+0x186>
 8004a0c:	3901      	subs	r1, #1
 8004a0e:	465a      	mov	r2, fp
 8004a10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a14:	9109      	str	r1, [sp, #36]	; 0x24
 8004a16:	f7ff ff19 	bl	800484c <__exponent>
 8004a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a1c:	1813      	adds	r3, r2, r0
 8004a1e:	2a01      	cmp	r2, #1
 8004a20:	4681      	mov	r9, r0
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	dc02      	bgt.n	8004a2c <_printf_float+0x164>
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	07d2      	lsls	r2, r2, #31
 8004a2a:	d501      	bpl.n	8004a30 <_printf_float+0x168>
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d09c      	beq.n	8004972 <_printf_float+0xaa>
 8004a38:	232d      	movs	r3, #45	; 0x2d
 8004a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3e:	e798      	b.n	8004972 <_printf_float+0xaa>
 8004a40:	9a06      	ldr	r2, [sp, #24]
 8004a42:	2a47      	cmp	r2, #71	; 0x47
 8004a44:	d1be      	bne.n	80049c4 <_printf_float+0xfc>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1bc      	bne.n	80049c4 <_printf_float+0xfc>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7b9      	b.n	80049c2 <_printf_float+0xfa>
 8004a4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a52:	d118      	bne.n	8004a86 <_printf_float+0x1be>
 8004a54:	2900      	cmp	r1, #0
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	dd0b      	ble.n	8004a72 <_printf_float+0x1aa>
 8004a5a:	6121      	str	r1, [r4, #16]
 8004a5c:	b913      	cbnz	r3, 8004a64 <_printf_float+0x19c>
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d502      	bpl.n	8004a6a <_printf_float+0x1a2>
 8004a64:	3301      	adds	r3, #1
 8004a66:	440b      	add	r3, r1
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a6c:	f04f 0900 	mov.w	r9, #0
 8004a70:	e7de      	b.n	8004a30 <_printf_float+0x168>
 8004a72:	b913      	cbnz	r3, 8004a7a <_printf_float+0x1b2>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	07d2      	lsls	r2, r2, #31
 8004a78:	d501      	bpl.n	8004a7e <_printf_float+0x1b6>
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	e7f4      	b.n	8004a68 <_printf_float+0x1a0>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e7f2      	b.n	8004a68 <_printf_float+0x1a0>
 8004a82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	db05      	blt.n	8004a98 <_printf_float+0x1d0>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	6121      	str	r1, [r4, #16]
 8004a90:	07d8      	lsls	r0, r3, #31
 8004a92:	d5ea      	bpl.n	8004a6a <_printf_float+0x1a2>
 8004a94:	1c4b      	adds	r3, r1, #1
 8004a96:	e7e7      	b.n	8004a68 <_printf_float+0x1a0>
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	bfd4      	ite	le
 8004a9c:	f1c1 0202 	rsble	r2, r1, #2
 8004aa0:	2201      	movgt	r2, #1
 8004aa2:	4413      	add	r3, r2
 8004aa4:	e7e0      	b.n	8004a68 <_printf_float+0x1a0>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	055a      	lsls	r2, r3, #21
 8004aaa:	d407      	bmi.n	8004abc <_printf_float+0x1f4>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	4642      	mov	r2, r8
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d12c      	bne.n	8004b14 <_printf_float+0x24c>
 8004aba:	e764      	b.n	8004986 <_printf_float+0xbe>
 8004abc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ac0:	f240 80e0 	bls.w	8004c84 <_printf_float+0x3bc>
 8004ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2300      	movs	r3, #0
 8004acc:	f7fb fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d034      	beq.n	8004b3e <_printf_float+0x276>
 8004ad4:	4a37      	ldr	r2, [pc, #220]	; (8004bb4 <_printf_float+0x2ec>)
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f43f af51 	beq.w	8004986 <_printf_float+0xbe>
 8004ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	db02      	blt.n	8004af2 <_printf_float+0x22a>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07d8      	lsls	r0, r3, #31
 8004af0:	d510      	bpl.n	8004b14 <_printf_float+0x24c>
 8004af2:	ee18 3a10 	vmov	r3, s16
 8004af6:	4652      	mov	r2, sl
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f af41 	beq.w	8004986 <_printf_float+0xbe>
 8004b04:	f04f 0800 	mov.w	r8, #0
 8004b08:	f104 091a 	add.w	r9, r4, #26
 8004b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	4543      	cmp	r3, r8
 8004b12:	dc09      	bgt.n	8004b28 <_printf_float+0x260>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	079b      	lsls	r3, r3, #30
 8004b18:	f100 8107 	bmi.w	8004d2a <_printf_float+0x462>
 8004b1c:	68e0      	ldr	r0, [r4, #12]
 8004b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b20:	4298      	cmp	r0, r3
 8004b22:	bfb8      	it	lt
 8004b24:	4618      	movlt	r0, r3
 8004b26:	e730      	b.n	800498a <_printf_float+0xc2>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	f43f af27 	beq.w	8004986 <_printf_float+0xbe>
 8004b38:	f108 0801 	add.w	r8, r8, #1
 8004b3c:	e7e6      	b.n	8004b0c <_printf_float+0x244>
 8004b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	dc39      	bgt.n	8004bb8 <_printf_float+0x2f0>
 8004b44:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <_printf_float+0x2ec>)
 8004b46:	2301      	movs	r3, #1
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b8      	blx	r7
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f af19 	beq.w	8004986 <_printf_float+0xbe>
 8004b54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	d102      	bne.n	8004b62 <_printf_float+0x29a>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	07d9      	lsls	r1, r3, #31
 8004b60:	d5d8      	bpl.n	8004b14 <_printf_float+0x24c>
 8004b62:	ee18 3a10 	vmov	r3, s16
 8004b66:	4652      	mov	r2, sl
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f43f af09 	beq.w	8004986 <_printf_float+0xbe>
 8004b74:	f04f 0900 	mov.w	r9, #0
 8004b78:	f104 0a1a 	add.w	sl, r4, #26
 8004b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7e:	425b      	negs	r3, r3
 8004b80:	454b      	cmp	r3, r9
 8004b82:	dc01      	bgt.n	8004b88 <_printf_float+0x2c0>
 8004b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b86:	e792      	b.n	8004aae <_printf_float+0x1e6>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f aef7 	beq.w	8004986 <_printf_float+0xbe>
 8004b98:	f109 0901 	add.w	r9, r9, #1
 8004b9c:	e7ee      	b.n	8004b7c <_printf_float+0x2b4>
 8004b9e:	bf00      	nop
 8004ba0:	7fefffff 	.word	0x7fefffff
 8004ba4:	08007f77 	.word	0x08007f77
 8004ba8:	08007f7b 	.word	0x08007f7b
 8004bac:	08007f7f 	.word	0x08007f7f
 8004bb0:	08007f83 	.word	0x08007f83
 8004bb4:	08007f87 	.word	0x08007f87
 8004bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bfa8      	it	ge
 8004bc0:	461a      	movge	r2, r3
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	4691      	mov	r9, r2
 8004bc6:	dc37      	bgt.n	8004c38 <_printf_float+0x370>
 8004bc8:	f04f 0b00 	mov.w	fp, #0
 8004bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bd0:	f104 021a 	add.w	r2, r4, #26
 8004bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd6:	9305      	str	r3, [sp, #20]
 8004bd8:	eba3 0309 	sub.w	r3, r3, r9
 8004bdc:	455b      	cmp	r3, fp
 8004bde:	dc33      	bgt.n	8004c48 <_printf_float+0x380>
 8004be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be4:	429a      	cmp	r2, r3
 8004be6:	db3b      	blt.n	8004c60 <_printf_float+0x398>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07da      	lsls	r2, r3, #31
 8004bec:	d438      	bmi.n	8004c60 <_printf_float+0x398>
 8004bee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bf2:	eba2 0903 	sub.w	r9, r2, r3
 8004bf6:	9b05      	ldr	r3, [sp, #20]
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	4591      	cmp	r9, r2
 8004bfc:	bfa8      	it	ge
 8004bfe:	4691      	movge	r9, r2
 8004c00:	f1b9 0f00 	cmp.w	r9, #0
 8004c04:	dc35      	bgt.n	8004c72 <_printf_float+0x3aa>
 8004c06:	f04f 0800 	mov.w	r8, #0
 8004c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c0e:	f104 0a1a 	add.w	sl, r4, #26
 8004c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	eba3 0309 	sub.w	r3, r3, r9
 8004c1c:	4543      	cmp	r3, r8
 8004c1e:	f77f af79 	ble.w	8004b14 <_printf_float+0x24c>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4652      	mov	r2, sl
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f aeaa 	beq.w	8004986 <_printf_float+0xbe>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	e7ec      	b.n	8004c12 <_printf_float+0x34a>
 8004c38:	4613      	mov	r3, r2
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d1c0      	bne.n	8004bc8 <_printf_float+0x300>
 8004c46:	e69e      	b.n	8004986 <_printf_float+0xbe>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	9205      	str	r2, [sp, #20]
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f ae97 	beq.w	8004986 <_printf_float+0xbe>
 8004c58:	9a05      	ldr	r2, [sp, #20]
 8004c5a:	f10b 0b01 	add.w	fp, fp, #1
 8004c5e:	e7b9      	b.n	8004bd4 <_printf_float+0x30c>
 8004c60:	ee18 3a10 	vmov	r3, s16
 8004c64:	4652      	mov	r2, sl
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d1be      	bne.n	8004bee <_printf_float+0x326>
 8004c70:	e689      	b.n	8004986 <_printf_float+0xbe>
 8004c72:	9a05      	ldr	r2, [sp, #20]
 8004c74:	464b      	mov	r3, r9
 8004c76:	4442      	add	r2, r8
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d1c1      	bne.n	8004c06 <_printf_float+0x33e>
 8004c82:	e680      	b.n	8004986 <_printf_float+0xbe>
 8004c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c86:	2a01      	cmp	r2, #1
 8004c88:	dc01      	bgt.n	8004c8e <_printf_float+0x3c6>
 8004c8a:	07db      	lsls	r3, r3, #31
 8004c8c:	d53a      	bpl.n	8004d04 <_printf_float+0x43c>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4642      	mov	r2, r8
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f ae74 	beq.w	8004986 <_printf_float+0xbe>
 8004c9e:	ee18 3a10 	vmov	r3, s16
 8004ca2:	4652      	mov	r2, sl
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b8      	blx	r7
 8004caa:	3001      	adds	r0, #1
 8004cac:	f43f ae6b 	beq.w	8004986 <_printf_float+0xbe>
 8004cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004cbc:	f7fb ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cc0:	b9d8      	cbnz	r0, 8004cfa <_printf_float+0x432>
 8004cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004cc6:	f108 0201 	add.w	r2, r8, #1
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d10e      	bne.n	8004cf2 <_printf_float+0x42a>
 8004cd4:	e657      	b.n	8004986 <_printf_float+0xbe>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4652      	mov	r2, sl
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f43f ae50 	beq.w	8004986 <_printf_float+0xbe>
 8004ce6:	f108 0801 	add.w	r8, r8, #1
 8004cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4543      	cmp	r3, r8
 8004cf0:	dcf1      	bgt.n	8004cd6 <_printf_float+0x40e>
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cf8:	e6da      	b.n	8004ab0 <_printf_float+0x1e8>
 8004cfa:	f04f 0800 	mov.w	r8, #0
 8004cfe:	f104 0a1a 	add.w	sl, r4, #26
 8004d02:	e7f2      	b.n	8004cea <_printf_float+0x422>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4642      	mov	r2, r8
 8004d08:	e7df      	b.n	8004cca <_printf_float+0x402>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	464a      	mov	r2, r9
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	f43f ae36 	beq.w	8004986 <_printf_float+0xbe>
 8004d1a:	f108 0801 	add.w	r8, r8, #1
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d22:	1a5b      	subs	r3, r3, r1
 8004d24:	4543      	cmp	r3, r8
 8004d26:	dcf0      	bgt.n	8004d0a <_printf_float+0x442>
 8004d28:	e6f8      	b.n	8004b1c <_printf_float+0x254>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	f104 0919 	add.w	r9, r4, #25
 8004d32:	e7f4      	b.n	8004d1e <_printf_float+0x456>

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf02      	ittt	eq
 8004da6:	68e5      	ldreq	r5, [r4, #12]
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	1aed      	subeq	r5, r5, r3
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	; 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4649      	mov	r1, r9
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e18:	2f78      	cmp	r7, #120	; 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	; 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d4 	beq.w	8004fda <_printf_i+0x1ca>
 8004e32:	2f58      	cmp	r7, #88	; 0x58
 8004e34:	f000 80c0 	beq.w	8004fb8 <_printf_i+0x1a8>
 8004e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	; (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fc1 	.word	0x08004fc1
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004f7b 	.word	0x08004f7b
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004fe3 	.word	0x08004fe3
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004ee9 	.word	0x08004ee9
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004f83 	.word	0x08004f83
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e09f      	b.n	8004ffc <_printf_i+0x1ec>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	682b      	ldr	r3, [r5, #0]
 8004ec0:	0607      	lsls	r7, r0, #24
 8004ec2:	f103 0104 	add.w	r1, r3, #4
 8004ec6:	6029      	str	r1, [r5, #0]
 8004ec8:	d501      	bpl.n	8004ece <_printf_i+0xbe>
 8004eca:	681e      	ldr	r6, [r3, #0]
 8004ecc:	e003      	b.n	8004ed6 <_printf_i+0xc6>
 8004ece:	0646      	lsls	r6, r0, #25
 8004ed0:	d5fb      	bpl.n	8004eca <_printf_i+0xba>
 8004ed2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	da03      	bge.n	8004ee2 <_printf_i+0xd2>
 8004eda:	232d      	movs	r3, #45	; 0x2d
 8004edc:	4276      	negs	r6, r6
 8004ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee2:	485a      	ldr	r0, [pc, #360]	; (800504c <_printf_i+0x23c>)
 8004ee4:	230a      	movs	r3, #10
 8004ee6:	e012      	b.n	8004f0e <_printf_i+0xfe>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	6029      	str	r1, [r5, #0]
 8004ef0:	0605      	lsls	r5, r0, #24
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0xe8>
 8004ef4:	681e      	ldr	r6, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0xee>
 8004ef8:	0641      	lsls	r1, r0, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0xe4>
 8004efc:	881e      	ldrh	r6, [r3, #0]
 8004efe:	4853      	ldr	r0, [pc, #332]	; (800504c <_printf_i+0x23c>)
 8004f00:	2f6f      	cmp	r7, #111	; 0x6f
 8004f02:	bf0c      	ite	eq
 8004f04:	2308      	moveq	r3, #8
 8004f06:	230a      	movne	r3, #10
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0e:	6865      	ldr	r5, [r4, #4]
 8004f10:	60a5      	str	r5, [r4, #8]
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	bfa2      	ittt	ge
 8004f16:	6821      	ldrge	r1, [r4, #0]
 8004f18:	f021 0104 	bicge.w	r1, r1, #4
 8004f1c:	6021      	strge	r1, [r4, #0]
 8004f1e:	b90e      	cbnz	r6, 8004f24 <_printf_i+0x114>
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	d04b      	beq.n	8004fbc <_printf_i+0x1ac>
 8004f24:	4615      	mov	r5, r2
 8004f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004f2e:	5dc7      	ldrb	r7, [r0, r7]
 8004f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f34:	4637      	mov	r7, r6
 8004f36:	42bb      	cmp	r3, r7
 8004f38:	460e      	mov	r6, r1
 8004f3a:	d9f4      	bls.n	8004f26 <_printf_i+0x116>
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d10b      	bne.n	8004f58 <_printf_i+0x148>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	07de      	lsls	r6, r3, #31
 8004f44:	d508      	bpl.n	8004f58 <_printf_i+0x148>
 8004f46:	6923      	ldr	r3, [r4, #16]
 8004f48:	6861      	ldr	r1, [r4, #4]
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	bfde      	ittt	le
 8004f4e:	2330      	movle	r3, #48	; 0x30
 8004f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f58:	1b52      	subs	r2, r2, r5
 8004f5a:	6122      	str	r2, [r4, #16]
 8004f5c:	f8cd a000 	str.w	sl, [sp]
 8004f60:	464b      	mov	r3, r9
 8004f62:	aa03      	add	r2, sp, #12
 8004f64:	4621      	mov	r1, r4
 8004f66:	4640      	mov	r0, r8
 8004f68:	f7ff fee4 	bl	8004d34 <_printf_common>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d14a      	bne.n	8005006 <_printf_i+0x1f6>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	b004      	add	sp, #16
 8004f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f043 0320 	orr.w	r3, r3, #32
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	4833      	ldr	r0, [pc, #204]	; (8005050 <_printf_i+0x240>)
 8004f84:	2778      	movs	r7, #120	; 0x78
 8004f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	6829      	ldr	r1, [r5, #0]
 8004f8e:	061f      	lsls	r7, r3, #24
 8004f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f94:	d402      	bmi.n	8004f9c <_printf_i+0x18c>
 8004f96:	065f      	lsls	r7, r3, #25
 8004f98:	bf48      	it	mi
 8004f9a:	b2b6      	uxthmi	r6, r6
 8004f9c:	07df      	lsls	r7, r3, #31
 8004f9e:	bf48      	it	mi
 8004fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa4:	6029      	str	r1, [r5, #0]
 8004fa6:	bf48      	it	mi
 8004fa8:	6023      	strmi	r3, [r4, #0]
 8004faa:	b91e      	cbnz	r6, 8004fb4 <_printf_i+0x1a4>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	e7a7      	b.n	8004f08 <_printf_i+0xf8>
 8004fb8:	4824      	ldr	r0, [pc, #144]	; (800504c <_printf_i+0x23c>)
 8004fba:	e7e4      	b.n	8004f86 <_printf_i+0x176>
 8004fbc:	4615      	mov	r5, r2
 8004fbe:	e7bd      	b.n	8004f3c <_printf_i+0x12c>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6826      	ldr	r6, [r4, #0]
 8004fc4:	6961      	ldr	r1, [r4, #20]
 8004fc6:	1d18      	adds	r0, r3, #4
 8004fc8:	6028      	str	r0, [r5, #0]
 8004fca:	0635      	lsls	r5, r6, #24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0x1c4>
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <_printf_i+0x1ca>
 8004fd4:	0670      	lsls	r0, r6, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0x1c0>
 8004fd8:	8019      	strh	r1, [r3, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	4615      	mov	r5, r2
 8004fe0:	e7bc      	b.n	8004f5c <_printf_i+0x14c>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	2100      	movs	r1, #0
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7fb f8ee 	bl	80001d0 <memchr>
 8004ff4:	b108      	cbz	r0, 8004ffa <_printf_i+0x1ea>
 8004ff6:	1b40      	subs	r0, r0, r5
 8004ff8:	6060      	str	r0, [r4, #4]
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	2300      	movs	r3, #0
 8005000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005004:	e7aa      	b.n	8004f5c <_printf_i+0x14c>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	462a      	mov	r2, r5
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d0ad      	beq.n	8004f70 <_printf_i+0x160>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	d413      	bmi.n	8005042 <_printf_i+0x232>
 800501a:	68e0      	ldr	r0, [r4, #12]
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	4298      	cmp	r0, r3
 8005020:	bfb8      	it	lt
 8005022:	4618      	movlt	r0, r3
 8005024:	e7a6      	b.n	8004f74 <_printf_i+0x164>
 8005026:	2301      	movs	r3, #1
 8005028:	4632      	mov	r2, r6
 800502a:	4649      	mov	r1, r9
 800502c:	4640      	mov	r0, r8
 800502e:	47d0      	blx	sl
 8005030:	3001      	adds	r0, #1
 8005032:	d09d      	beq.n	8004f70 <_printf_i+0x160>
 8005034:	3501      	adds	r5, #1
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	9903      	ldr	r1, [sp, #12]
 800503a:	1a5b      	subs	r3, r3, r1
 800503c:	42ab      	cmp	r3, r5
 800503e:	dcf2      	bgt.n	8005026 <_printf_i+0x216>
 8005040:	e7eb      	b.n	800501a <_printf_i+0x20a>
 8005042:	2500      	movs	r5, #0
 8005044:	f104 0619 	add.w	r6, r4, #25
 8005048:	e7f5      	b.n	8005036 <_printf_i+0x226>
 800504a:	bf00      	nop
 800504c:	08007f89 	.word	0x08007f89
 8005050:	08007f9a 	.word	0x08007f9a

08005054 <std>:
 8005054:	2300      	movs	r3, #0
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
 800505a:	e9c0 3300 	strd	r3, r3, [r0]
 800505e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005062:	6083      	str	r3, [r0, #8]
 8005064:	8181      	strh	r1, [r0, #12]
 8005066:	6643      	str	r3, [r0, #100]	; 0x64
 8005068:	81c2      	strh	r2, [r0, #14]
 800506a:	6183      	str	r3, [r0, #24]
 800506c:	4619      	mov	r1, r3
 800506e:	2208      	movs	r2, #8
 8005070:	305c      	adds	r0, #92	; 0x5c
 8005072:	f000 f9f7 	bl	8005464 <memset>
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <std+0x58>)
 8005078:	6263      	str	r3, [r4, #36]	; 0x24
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <std+0x5c>)
 800507c:	62a3      	str	r3, [r4, #40]	; 0x28
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <std+0x60>)
 8005080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <std+0x64>)
 8005084:	6323      	str	r3, [r4, #48]	; 0x30
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <std+0x68>)
 8005088:	6224      	str	r4, [r4, #32]
 800508a:	429c      	cmp	r4, r3
 800508c:	d006      	beq.n	800509c <std+0x48>
 800508e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005092:	4294      	cmp	r4, r2
 8005094:	d002      	beq.n	800509c <std+0x48>
 8005096:	33d0      	adds	r3, #208	; 0xd0
 8005098:	429c      	cmp	r4, r3
 800509a:	d105      	bne.n	80050a8 <std+0x54>
 800509c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a4:	f000 ba5a 	b.w	800555c <__retarget_lock_init_recursive>
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	bf00      	nop
 80050ac:	080052b5 	.word	0x080052b5
 80050b0:	080052d7 	.word	0x080052d7
 80050b4:	0800530f 	.word	0x0800530f
 80050b8:	08005333 	.word	0x08005333
 80050bc:	200002d4 	.word	0x200002d4

080050c0 <stdio_exit_handler>:
 80050c0:	4a02      	ldr	r2, [pc, #8]	; (80050cc <stdio_exit_handler+0xc>)
 80050c2:	4903      	ldr	r1, [pc, #12]	; (80050d0 <stdio_exit_handler+0x10>)
 80050c4:	4803      	ldr	r0, [pc, #12]	; (80050d4 <stdio_exit_handler+0x14>)
 80050c6:	f000 b869 	b.w	800519c <_fwalk_sglue>
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010
 80050d0:	08006ee9 	.word	0x08006ee9
 80050d4:	2000001c 	.word	0x2000001c

080050d8 <cleanup_stdio>:
 80050d8:	6841      	ldr	r1, [r0, #4]
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <cleanup_stdio+0x34>)
 80050dc:	4299      	cmp	r1, r3
 80050de:	b510      	push	{r4, lr}
 80050e0:	4604      	mov	r4, r0
 80050e2:	d001      	beq.n	80050e8 <cleanup_stdio+0x10>
 80050e4:	f001 ff00 	bl	8006ee8 <_fflush_r>
 80050e8:	68a1      	ldr	r1, [r4, #8]
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <cleanup_stdio+0x38>)
 80050ec:	4299      	cmp	r1, r3
 80050ee:	d002      	beq.n	80050f6 <cleanup_stdio+0x1e>
 80050f0:	4620      	mov	r0, r4
 80050f2:	f001 fef9 	bl	8006ee8 <_fflush_r>
 80050f6:	68e1      	ldr	r1, [r4, #12]
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <cleanup_stdio+0x3c>)
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d004      	beq.n	8005108 <cleanup_stdio+0x30>
 80050fe:	4620      	mov	r0, r4
 8005100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005104:	f001 bef0 	b.w	8006ee8 <_fflush_r>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	200002d4 	.word	0x200002d4
 8005110:	2000033c 	.word	0x2000033c
 8005114:	200003a4 	.word	0x200003a4

08005118 <global_stdio_init.part.0>:
 8005118:	b510      	push	{r4, lr}
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <global_stdio_init.part.0+0x30>)
 800511c:	4c0b      	ldr	r4, [pc, #44]	; (800514c <global_stdio_init.part.0+0x34>)
 800511e:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <global_stdio_init.part.0+0x38>)
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	4620      	mov	r0, r4
 8005124:	2200      	movs	r2, #0
 8005126:	2104      	movs	r1, #4
 8005128:	f7ff ff94 	bl	8005054 <std>
 800512c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005130:	2201      	movs	r2, #1
 8005132:	2109      	movs	r1, #9
 8005134:	f7ff ff8e 	bl	8005054 <std>
 8005138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800513c:	2202      	movs	r2, #2
 800513e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005142:	2112      	movs	r1, #18
 8005144:	f7ff bf86 	b.w	8005054 <std>
 8005148:	2000040c 	.word	0x2000040c
 800514c:	200002d4 	.word	0x200002d4
 8005150:	080050c1 	.word	0x080050c1

08005154 <__sfp_lock_acquire>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__sfp_lock_acquire+0x8>)
 8005156:	f000 ba02 	b.w	800555e <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	20000415 	.word	0x20000415

08005160 <__sfp_lock_release>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sfp_lock_release+0x8>)
 8005162:	f000 b9fd 	b.w	8005560 <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	20000415 	.word	0x20000415

0800516c <__sinit>:
 800516c:	b510      	push	{r4, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	f7ff fff0 	bl	8005154 <__sfp_lock_acquire>
 8005174:	6a23      	ldr	r3, [r4, #32]
 8005176:	b11b      	cbz	r3, 8005180 <__sinit+0x14>
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517c:	f7ff bff0 	b.w	8005160 <__sfp_lock_release>
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <__sinit+0x28>)
 8005182:	6223      	str	r3, [r4, #32]
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__sinit+0x2c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f5      	bne.n	8005178 <__sinit+0xc>
 800518c:	f7ff ffc4 	bl	8005118 <global_stdio_init.part.0>
 8005190:	e7f2      	b.n	8005178 <__sinit+0xc>
 8005192:	bf00      	nop
 8005194:	080050d9 	.word	0x080050d9
 8005198:	2000040c 	.word	0x2000040c

0800519c <_fwalk_sglue>:
 800519c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a0:	4607      	mov	r7, r0
 80051a2:	4688      	mov	r8, r1
 80051a4:	4614      	mov	r4, r2
 80051a6:	2600      	movs	r6, #0
 80051a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051ac:	f1b9 0901 	subs.w	r9, r9, #1
 80051b0:	d505      	bpl.n	80051be <_fwalk_sglue+0x22>
 80051b2:	6824      	ldr	r4, [r4, #0]
 80051b4:	2c00      	cmp	r4, #0
 80051b6:	d1f7      	bne.n	80051a8 <_fwalk_sglue+0xc>
 80051b8:	4630      	mov	r0, r6
 80051ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d907      	bls.n	80051d4 <_fwalk_sglue+0x38>
 80051c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c8:	3301      	adds	r3, #1
 80051ca:	d003      	beq.n	80051d4 <_fwalk_sglue+0x38>
 80051cc:	4629      	mov	r1, r5
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	4306      	orrs	r6, r0
 80051d4:	3568      	adds	r5, #104	; 0x68
 80051d6:	e7e9      	b.n	80051ac <_fwalk_sglue+0x10>

080051d8 <iprintf>:
 80051d8:	b40f      	push	{r0, r1, r2, r3}
 80051da:	b507      	push	{r0, r1, r2, lr}
 80051dc:	4906      	ldr	r1, [pc, #24]	; (80051f8 <iprintf+0x20>)
 80051de:	ab04      	add	r3, sp, #16
 80051e0:	6808      	ldr	r0, [r1, #0]
 80051e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e6:	6881      	ldr	r1, [r0, #8]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	f001 fcdd 	bl	8006ba8 <_vfiprintf_r>
 80051ee:	b003      	add	sp, #12
 80051f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f4:	b004      	add	sp, #16
 80051f6:	4770      	bx	lr
 80051f8:	20000068 	.word	0x20000068

080051fc <_puts_r>:
 80051fc:	6a03      	ldr	r3, [r0, #32]
 80051fe:	b570      	push	{r4, r5, r6, lr}
 8005200:	6884      	ldr	r4, [r0, #8]
 8005202:	4605      	mov	r5, r0
 8005204:	460e      	mov	r6, r1
 8005206:	b90b      	cbnz	r3, 800520c <_puts_r+0x10>
 8005208:	f7ff ffb0 	bl	800516c <__sinit>
 800520c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d405      	bmi.n	800521e <_puts_r+0x22>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	0598      	lsls	r0, r3, #22
 8005216:	d402      	bmi.n	800521e <_puts_r+0x22>
 8005218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800521a:	f000 f9a0 	bl	800555e <__retarget_lock_acquire_recursive>
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	0719      	lsls	r1, r3, #28
 8005222:	d513      	bpl.n	800524c <_puts_r+0x50>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	b18b      	cbz	r3, 800524c <_puts_r+0x50>
 8005228:	3e01      	subs	r6, #1
 800522a:	68a3      	ldr	r3, [r4, #8]
 800522c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005230:	3b01      	subs	r3, #1
 8005232:	60a3      	str	r3, [r4, #8]
 8005234:	b9e9      	cbnz	r1, 8005272 <_puts_r+0x76>
 8005236:	2b00      	cmp	r3, #0
 8005238:	da2e      	bge.n	8005298 <_puts_r+0x9c>
 800523a:	4622      	mov	r2, r4
 800523c:	210a      	movs	r1, #10
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f87b 	bl	800533a <__swbuf_r>
 8005244:	3001      	adds	r0, #1
 8005246:	d007      	beq.n	8005258 <_puts_r+0x5c>
 8005248:	250a      	movs	r5, #10
 800524a:	e007      	b.n	800525c <_puts_r+0x60>
 800524c:	4621      	mov	r1, r4
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f8b0 	bl	80053b4 <__swsetup_r>
 8005254:	2800      	cmp	r0, #0
 8005256:	d0e7      	beq.n	8005228 <_puts_r+0x2c>
 8005258:	f04f 35ff 	mov.w	r5, #4294967295
 800525c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800525e:	07da      	lsls	r2, r3, #31
 8005260:	d405      	bmi.n	800526e <_puts_r+0x72>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	059b      	lsls	r3, r3, #22
 8005266:	d402      	bmi.n	800526e <_puts_r+0x72>
 8005268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800526a:	f000 f979 	bl	8005560 <__retarget_lock_release_recursive>
 800526e:	4628      	mov	r0, r5
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	2b00      	cmp	r3, #0
 8005274:	da04      	bge.n	8005280 <_puts_r+0x84>
 8005276:	69a2      	ldr	r2, [r4, #24]
 8005278:	429a      	cmp	r2, r3
 800527a:	dc06      	bgt.n	800528a <_puts_r+0x8e>
 800527c:	290a      	cmp	r1, #10
 800527e:	d004      	beq.n	800528a <_puts_r+0x8e>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	6022      	str	r2, [r4, #0]
 8005286:	7019      	strb	r1, [r3, #0]
 8005288:	e7cf      	b.n	800522a <_puts_r+0x2e>
 800528a:	4622      	mov	r2, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f854 	bl	800533a <__swbuf_r>
 8005292:	3001      	adds	r0, #1
 8005294:	d1c9      	bne.n	800522a <_puts_r+0x2e>
 8005296:	e7df      	b.n	8005258 <_puts_r+0x5c>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	250a      	movs	r5, #10
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	701d      	strb	r5, [r3, #0]
 80052a2:	e7db      	b.n	800525c <_puts_r+0x60>

080052a4 <puts>:
 80052a4:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <puts+0xc>)
 80052a6:	4601      	mov	r1, r0
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f7ff bfa7 	b.w	80051fc <_puts_r>
 80052ae:	bf00      	nop
 80052b0:	20000068 	.word	0x20000068

080052b4 <__sread>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	460c      	mov	r4, r1
 80052b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052bc:	f000 f900 	bl	80054c0 <_read_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	bfab      	itete	ge
 80052c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052c6:	89a3      	ldrhlt	r3, [r4, #12]
 80052c8:	181b      	addge	r3, r3, r0
 80052ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ce:	bfac      	ite	ge
 80052d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052d2:	81a3      	strhlt	r3, [r4, #12]
 80052d4:	bd10      	pop	{r4, pc}

080052d6 <__swrite>:
 80052d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	461f      	mov	r7, r3
 80052dc:	898b      	ldrh	r3, [r1, #12]
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	4605      	mov	r5, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	4616      	mov	r6, r2
 80052e6:	d505      	bpl.n	80052f4 <__swrite+0x1e>
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	2302      	movs	r3, #2
 80052ee:	2200      	movs	r2, #0
 80052f0:	f000 f8d4 	bl	800549c <_lseek_r>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	4632      	mov	r2, r6
 8005302:	463b      	mov	r3, r7
 8005304:	4628      	mov	r0, r5
 8005306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	f000 b8eb 	b.w	80054e4 <_write_r>

0800530e <__sseek>:
 800530e:	b510      	push	{r4, lr}
 8005310:	460c      	mov	r4, r1
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	f000 f8c1 	bl	800549c <_lseek_r>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	bf15      	itete	ne
 8005320:	6560      	strne	r0, [r4, #84]	; 0x54
 8005322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800532a:	81a3      	strheq	r3, [r4, #12]
 800532c:	bf18      	it	ne
 800532e:	81a3      	strhne	r3, [r4, #12]
 8005330:	bd10      	pop	{r4, pc}

08005332 <__sclose>:
 8005332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005336:	f000 b8a1 	b.w	800547c <_close_r>

0800533a <__swbuf_r>:
 800533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533c:	460e      	mov	r6, r1
 800533e:	4614      	mov	r4, r2
 8005340:	4605      	mov	r5, r0
 8005342:	b118      	cbz	r0, 800534c <__swbuf_r+0x12>
 8005344:	6a03      	ldr	r3, [r0, #32]
 8005346:	b90b      	cbnz	r3, 800534c <__swbuf_r+0x12>
 8005348:	f7ff ff10 	bl	800516c <__sinit>
 800534c:	69a3      	ldr	r3, [r4, #24]
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	071a      	lsls	r2, r3, #28
 8005354:	d525      	bpl.n	80053a2 <__swbuf_r+0x68>
 8005356:	6923      	ldr	r3, [r4, #16]
 8005358:	b31b      	cbz	r3, 80053a2 <__swbuf_r+0x68>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6922      	ldr	r2, [r4, #16]
 800535e:	1a98      	subs	r0, r3, r2
 8005360:	6963      	ldr	r3, [r4, #20]
 8005362:	b2f6      	uxtb	r6, r6
 8005364:	4283      	cmp	r3, r0
 8005366:	4637      	mov	r7, r6
 8005368:	dc04      	bgt.n	8005374 <__swbuf_r+0x3a>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f001 fdbb 	bl	8006ee8 <_fflush_r>
 8005372:	b9e0      	cbnz	r0, 80053ae <__swbuf_r+0x74>
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	3b01      	subs	r3, #1
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	6022      	str	r2, [r4, #0]
 8005380:	701e      	strb	r6, [r3, #0]
 8005382:	6962      	ldr	r2, [r4, #20]
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	429a      	cmp	r2, r3
 8005388:	d004      	beq.n	8005394 <__swbuf_r+0x5a>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	d506      	bpl.n	800539e <__swbuf_r+0x64>
 8005390:	2e0a      	cmp	r6, #10
 8005392:	d104      	bne.n	800539e <__swbuf_r+0x64>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f001 fda6 	bl	8006ee8 <_fflush_r>
 800539c:	b938      	cbnz	r0, 80053ae <__swbuf_r+0x74>
 800539e:	4638      	mov	r0, r7
 80053a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a2:	4621      	mov	r1, r4
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f805 	bl	80053b4 <__swsetup_r>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0d5      	beq.n	800535a <__swbuf_r+0x20>
 80053ae:	f04f 37ff 	mov.w	r7, #4294967295
 80053b2:	e7f4      	b.n	800539e <__swbuf_r+0x64>

080053b4 <__swsetup_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <__swsetup_r+0xac>)
 80053b8:	4605      	mov	r5, r0
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	460c      	mov	r4, r1
 80053be:	b118      	cbz	r0, 80053c8 <__swsetup_r+0x14>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <__swsetup_r+0x14>
 80053c4:	f7ff fed2 	bl	800516c <__sinit>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053ce:	0718      	lsls	r0, r3, #28
 80053d0:	d422      	bmi.n	8005418 <__swsetup_r+0x64>
 80053d2:	06d9      	lsls	r1, r3, #27
 80053d4:	d407      	bmi.n	80053e6 <__swsetup_r+0x32>
 80053d6:	2309      	movs	r3, #9
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e034      	b.n	8005450 <__swsetup_r+0x9c>
 80053e6:	0758      	lsls	r0, r3, #29
 80053e8:	d512      	bpl.n	8005410 <__swsetup_r+0x5c>
 80053ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ec:	b141      	cbz	r1, 8005400 <__swsetup_r+0x4c>
 80053ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053f2:	4299      	cmp	r1, r3
 80053f4:	d002      	beq.n	80053fc <__swsetup_r+0x48>
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 ff30 	bl	800625c <_free_r>
 80053fc:	2300      	movs	r3, #0
 80053fe:	6363      	str	r3, [r4, #52]	; 0x34
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	2300      	movs	r3, #0
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f043 0308 	orr.w	r3, r3, #8
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	b94b      	cbnz	r3, 8005430 <__swsetup_r+0x7c>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005426:	d003      	beq.n	8005430 <__swsetup_r+0x7c>
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f001 fdaa 	bl	8006f84 <__smakebuf_r>
 8005430:	89a0      	ldrh	r0, [r4, #12]
 8005432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005436:	f010 0301 	ands.w	r3, r0, #1
 800543a:	d00a      	beq.n	8005452 <__swsetup_r+0x9e>
 800543c:	2300      	movs	r3, #0
 800543e:	60a3      	str	r3, [r4, #8]
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	425b      	negs	r3, r3
 8005444:	61a3      	str	r3, [r4, #24]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	b943      	cbnz	r3, 800545c <__swsetup_r+0xa8>
 800544a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800544e:	d1c4      	bne.n	80053da <__swsetup_r+0x26>
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	0781      	lsls	r1, r0, #30
 8005454:	bf58      	it	pl
 8005456:	6963      	ldrpl	r3, [r4, #20]
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	e7f4      	b.n	8005446 <__swsetup_r+0x92>
 800545c:	2000      	movs	r0, #0
 800545e:	e7f7      	b.n	8005450 <__swsetup_r+0x9c>
 8005460:	20000068 	.word	0x20000068

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <_localeconv_r>:
 8005474:	4800      	ldr	r0, [pc, #0]	; (8005478 <_localeconv_r+0x4>)
 8005476:	4770      	bx	lr
 8005478:	2000015c 	.word	0x2000015c

0800547c <_close_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d06      	ldr	r5, [pc, #24]	; (8005498 <_close_r+0x1c>)
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fc ff41 	bl	800230e <_close>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_close_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_close_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000410 	.word	0x20000410

0800549c <_lseek_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	; (80054bc <_lseek_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fc ff56 	bl	800235c <_lseek>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_lseek_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_lseek_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20000410 	.word	0x20000410

080054c0 <_read_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d07      	ldr	r5, [pc, #28]	; (80054e0 <_read_r+0x20>)
 80054c4:	4604      	mov	r4, r0
 80054c6:	4608      	mov	r0, r1
 80054c8:	4611      	mov	r1, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	602a      	str	r2, [r5, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f7fc fee4 	bl	800229c <_read>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d102      	bne.n	80054de <_read_r+0x1e>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	b103      	cbz	r3, 80054de <_read_r+0x1e>
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	bd38      	pop	{r3, r4, r5, pc}
 80054e0:	20000410 	.word	0x20000410

080054e4 <_write_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d07      	ldr	r5, [pc, #28]	; (8005504 <_write_r+0x20>)
 80054e8:	4604      	mov	r4, r0
 80054ea:	4608      	mov	r0, r1
 80054ec:	4611      	mov	r1, r2
 80054ee:	2200      	movs	r2, #0
 80054f0:	602a      	str	r2, [r5, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f7fc feef 	bl	80022d6 <_write>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_write_r+0x1e>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_write_r+0x1e>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	20000410 	.word	0x20000410

08005508 <__errno>:
 8005508:	4b01      	ldr	r3, [pc, #4]	; (8005510 <__errno+0x8>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000068 	.word	0x20000068

08005514 <__libc_init_array>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4d0d      	ldr	r5, [pc, #52]	; (800554c <__libc_init_array+0x38>)
 8005518:	4c0d      	ldr	r4, [pc, #52]	; (8005550 <__libc_init_array+0x3c>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	2600      	movs	r6, #0
 8005520:	42a6      	cmp	r6, r4
 8005522:	d109      	bne.n	8005538 <__libc_init_array+0x24>
 8005524:	4d0b      	ldr	r5, [pc, #44]	; (8005554 <__libc_init_array+0x40>)
 8005526:	4c0c      	ldr	r4, [pc, #48]	; (8005558 <__libc_init_array+0x44>)
 8005528:	f002 fcaa 	bl	8007e80 <_init>
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	2600      	movs	r6, #0
 8005532:	42a6      	cmp	r6, r4
 8005534:	d105      	bne.n	8005542 <__libc_init_array+0x2e>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	f855 3b04 	ldr.w	r3, [r5], #4
 800553c:	4798      	blx	r3
 800553e:	3601      	adds	r6, #1
 8005540:	e7ee      	b.n	8005520 <__libc_init_array+0xc>
 8005542:	f855 3b04 	ldr.w	r3, [r5], #4
 8005546:	4798      	blx	r3
 8005548:	3601      	adds	r6, #1
 800554a:	e7f2      	b.n	8005532 <__libc_init_array+0x1e>
 800554c:	08008344 	.word	0x08008344
 8005550:	08008344 	.word	0x08008344
 8005554:	08008344 	.word	0x08008344
 8005558:	08008348 	.word	0x08008348

0800555c <__retarget_lock_init_recursive>:
 800555c:	4770      	bx	lr

0800555e <__retarget_lock_acquire_recursive>:
 800555e:	4770      	bx	lr

08005560 <__retarget_lock_release_recursive>:
 8005560:	4770      	bx	lr

08005562 <quorem>:
 8005562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005566:	6903      	ldr	r3, [r0, #16]
 8005568:	690c      	ldr	r4, [r1, #16]
 800556a:	42a3      	cmp	r3, r4
 800556c:	4607      	mov	r7, r0
 800556e:	db7e      	blt.n	800566e <quorem+0x10c>
 8005570:	3c01      	subs	r4, #1
 8005572:	f101 0814 	add.w	r8, r1, #20
 8005576:	f100 0514 	add.w	r5, r0, #20
 800557a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005588:	3301      	adds	r3, #1
 800558a:	429a      	cmp	r2, r3
 800558c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005594:	fbb2 f6f3 	udiv	r6, r2, r3
 8005598:	d331      	bcc.n	80055fe <quorem+0x9c>
 800559a:	f04f 0e00 	mov.w	lr, #0
 800559e:	4640      	mov	r0, r8
 80055a0:	46ac      	mov	ip, r5
 80055a2:	46f2      	mov	sl, lr
 80055a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80055a8:	b293      	uxth	r3, r2
 80055aa:	fb06 e303 	mla	r3, r6, r3, lr
 80055ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055b2:	0c1a      	lsrs	r2, r3, #16
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ebaa 0303 	sub.w	r3, sl, r3
 80055ba:	f8dc a000 	ldr.w	sl, [ip]
 80055be:	fa13 f38a 	uxtah	r3, r3, sl
 80055c2:	fb06 220e 	mla	r2, r6, lr, r2
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	9b00      	ldr	r3, [sp, #0]
 80055ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ce:	b292      	uxth	r2, r2
 80055d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80055dc:	4581      	cmp	r9, r0
 80055de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e2:	f84c 3b04 	str.w	r3, [ip], #4
 80055e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055ea:	d2db      	bcs.n	80055a4 <quorem+0x42>
 80055ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80055f0:	b92b      	cbnz	r3, 80055fe <quorem+0x9c>
 80055f2:	9b01      	ldr	r3, [sp, #4]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	429d      	cmp	r5, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	d32c      	bcc.n	8005656 <quorem+0xf4>
 80055fc:	613c      	str	r4, [r7, #16]
 80055fe:	4638      	mov	r0, r7
 8005600:	f001 f9a8 	bl	8006954 <__mcmp>
 8005604:	2800      	cmp	r0, #0
 8005606:	db22      	blt.n	800564e <quorem+0xec>
 8005608:	3601      	adds	r6, #1
 800560a:	4629      	mov	r1, r5
 800560c:	2000      	movs	r0, #0
 800560e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005612:	f8d1 c000 	ldr.w	ip, [r1]
 8005616:	b293      	uxth	r3, r2
 8005618:	1ac3      	subs	r3, r0, r3
 800561a:	0c12      	lsrs	r2, r2, #16
 800561c:	fa13 f38c 	uxtah	r3, r3, ip
 8005620:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800562e:	45c1      	cmp	r9, r8
 8005630:	f841 3b04 	str.w	r3, [r1], #4
 8005634:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005638:	d2e9      	bcs.n	800560e <quorem+0xac>
 800563a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800563e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005642:	b922      	cbnz	r2, 800564e <quorem+0xec>
 8005644:	3b04      	subs	r3, #4
 8005646:	429d      	cmp	r5, r3
 8005648:	461a      	mov	r2, r3
 800564a:	d30a      	bcc.n	8005662 <quorem+0x100>
 800564c:	613c      	str	r4, [r7, #16]
 800564e:	4630      	mov	r0, r6
 8005650:	b003      	add	sp, #12
 8005652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	3b04      	subs	r3, #4
 800565a:	2a00      	cmp	r2, #0
 800565c:	d1ce      	bne.n	80055fc <quorem+0x9a>
 800565e:	3c01      	subs	r4, #1
 8005660:	e7c9      	b.n	80055f6 <quorem+0x94>
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	3b04      	subs	r3, #4
 8005666:	2a00      	cmp	r2, #0
 8005668:	d1f0      	bne.n	800564c <quorem+0xea>
 800566a:	3c01      	subs	r4, #1
 800566c:	e7eb      	b.n	8005646 <quorem+0xe4>
 800566e:	2000      	movs	r0, #0
 8005670:	e7ee      	b.n	8005650 <quorem+0xee>
 8005672:	0000      	movs	r0, r0
 8005674:	0000      	movs	r0, r0
	...

08005678 <_dtoa_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ed2d 8b04 	vpush	{d8-d9}
 8005680:	69c5      	ldr	r5, [r0, #28]
 8005682:	b093      	sub	sp, #76	; 0x4c
 8005684:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005688:	ec57 6b10 	vmov	r6, r7, d0
 800568c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005690:	9107      	str	r1, [sp, #28]
 8005692:	4604      	mov	r4, r0
 8005694:	920a      	str	r2, [sp, #40]	; 0x28
 8005696:	930d      	str	r3, [sp, #52]	; 0x34
 8005698:	b975      	cbnz	r5, 80056b8 <_dtoa_r+0x40>
 800569a:	2010      	movs	r0, #16
 800569c:	f000 fe2a 	bl	80062f4 <malloc>
 80056a0:	4602      	mov	r2, r0
 80056a2:	61e0      	str	r0, [r4, #28]
 80056a4:	b920      	cbnz	r0, 80056b0 <_dtoa_r+0x38>
 80056a6:	4bae      	ldr	r3, [pc, #696]	; (8005960 <_dtoa_r+0x2e8>)
 80056a8:	21ef      	movs	r1, #239	; 0xef
 80056aa:	48ae      	ldr	r0, [pc, #696]	; (8005964 <_dtoa_r+0x2ec>)
 80056ac:	f001 fce6 	bl	800707c <__assert_func>
 80056b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056b4:	6005      	str	r5, [r0, #0]
 80056b6:	60c5      	str	r5, [r0, #12]
 80056b8:	69e3      	ldr	r3, [r4, #28]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	b151      	cbz	r1, 80056d4 <_dtoa_r+0x5c>
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	604a      	str	r2, [r1, #4]
 80056c2:	2301      	movs	r3, #1
 80056c4:	4093      	lsls	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 ff07 	bl	80064dc <_Bfree>
 80056ce:	69e3      	ldr	r3, [r4, #28]
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	1e3b      	subs	r3, r7, #0
 80056d6:	bfbb      	ittet	lt
 80056d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056dc:	9303      	strlt	r3, [sp, #12]
 80056de:	2300      	movge	r3, #0
 80056e0:	2201      	movlt	r2, #1
 80056e2:	bfac      	ite	ge
 80056e4:	f8c8 3000 	strge.w	r3, [r8]
 80056e8:	f8c8 2000 	strlt.w	r2, [r8]
 80056ec:	4b9e      	ldr	r3, [pc, #632]	; (8005968 <_dtoa_r+0x2f0>)
 80056ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056f2:	ea33 0308 	bics.w	r3, r3, r8
 80056f6:	d11b      	bne.n	8005730 <_dtoa_r+0xb8>
 80056f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005704:	4333      	orrs	r3, r6
 8005706:	f000 8593 	beq.w	8006230 <_dtoa_r+0xbb8>
 800570a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800570c:	b963      	cbnz	r3, 8005728 <_dtoa_r+0xb0>
 800570e:	4b97      	ldr	r3, [pc, #604]	; (800596c <_dtoa_r+0x2f4>)
 8005710:	e027      	b.n	8005762 <_dtoa_r+0xea>
 8005712:	4b97      	ldr	r3, [pc, #604]	; (8005970 <_dtoa_r+0x2f8>)
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	9800      	ldr	r0, [sp, #0]
 800571e:	b013      	add	sp, #76	; 0x4c
 8005720:	ecbd 8b04 	vpop	{d8-d9}
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005728:	4b90      	ldr	r3, [pc, #576]	; (800596c <_dtoa_r+0x2f4>)
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	3303      	adds	r3, #3
 800572e:	e7f3      	b.n	8005718 <_dtoa_r+0xa0>
 8005730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	ec51 0b17 	vmov	r0, r1, d7
 800573a:	eeb0 8a47 	vmov.f32	s16, s14
 800573e:	eef0 8a67 	vmov.f32	s17, s15
 8005742:	2300      	movs	r3, #0
 8005744:	f7fb f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005748:	4681      	mov	r9, r0
 800574a:	b160      	cbz	r0, 8005766 <_dtoa_r+0xee>
 800574c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800574e:	2301      	movs	r3, #1
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8568 	beq.w	800622a <_dtoa_r+0xbb2>
 800575a:	4b86      	ldr	r3, [pc, #536]	; (8005974 <_dtoa_r+0x2fc>)
 800575c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	e7da      	b.n	800571c <_dtoa_r+0xa4>
 8005766:	aa10      	add	r2, sp, #64	; 0x40
 8005768:	a911      	add	r1, sp, #68	; 0x44
 800576a:	4620      	mov	r0, r4
 800576c:	eeb0 0a48 	vmov.f32	s0, s16
 8005770:	eef0 0a68 	vmov.f32	s1, s17
 8005774:	f001 f994 	bl	8006aa0 <__d2b>
 8005778:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800577c:	4682      	mov	sl, r0
 800577e:	2d00      	cmp	r5, #0
 8005780:	d07f      	beq.n	8005882 <_dtoa_r+0x20a>
 8005782:	ee18 3a90 	vmov	r3, s17
 8005786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800578a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800578e:	ec51 0b18 	vmov	r0, r1, d8
 8005792:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800579a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800579e:	4619      	mov	r1, r3
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b75      	ldr	r3, [pc, #468]	; (8005978 <_dtoa_r+0x300>)
 80057a4:	f7fa fd70 	bl	8000288 <__aeabi_dsub>
 80057a8:	a367      	add	r3, pc, #412	; (adr r3, 8005948 <_dtoa_r+0x2d0>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff23 	bl	80005f8 <__aeabi_dmul>
 80057b2:	a367      	add	r3, pc, #412	; (adr r3, 8005950 <_dtoa_r+0x2d8>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd68 	bl	800028c <__adddf3>
 80057bc:	4606      	mov	r6, r0
 80057be:	4628      	mov	r0, r5
 80057c0:	460f      	mov	r7, r1
 80057c2:	f7fa feaf 	bl	8000524 <__aeabi_i2d>
 80057c6:	a364      	add	r3, pc, #400	; (adr r3, 8005958 <_dtoa_r+0x2e0>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa ff14 	bl	80005f8 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd58 	bl	800028c <__adddf3>
 80057dc:	4606      	mov	r6, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	f7fb f9ba 	bl	8000b58 <__aeabi_d2iz>
 80057e4:	2200      	movs	r2, #0
 80057e6:	4683      	mov	fp, r0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f975 	bl	8000adc <__aeabi_dcmplt>
 80057f2:	b148      	cbz	r0, 8005808 <_dtoa_r+0x190>
 80057f4:	4658      	mov	r0, fp
 80057f6:	f7fa fe95 	bl	8000524 <__aeabi_i2d>
 80057fa:	4632      	mov	r2, r6
 80057fc:	463b      	mov	r3, r7
 80057fe:	f7fb f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8005802:	b908      	cbnz	r0, 8005808 <_dtoa_r+0x190>
 8005804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005808:	f1bb 0f16 	cmp.w	fp, #22
 800580c:	d857      	bhi.n	80058be <_dtoa_r+0x246>
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <_dtoa_r+0x304>)
 8005810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	ec51 0b18 	vmov	r0, r1, d8
 800581c:	f7fb f95e 	bl	8000adc <__aeabi_dcmplt>
 8005820:	2800      	cmp	r0, #0
 8005822:	d04e      	beq.n	80058c2 <_dtoa_r+0x24a>
 8005824:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005828:	2300      	movs	r3, #0
 800582a:	930c      	str	r3, [sp, #48]	; 0x30
 800582c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800582e:	1b5b      	subs	r3, r3, r5
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	bf45      	ittet	mi
 8005834:	f1c3 0301 	rsbmi	r3, r3, #1
 8005838:	9305      	strmi	r3, [sp, #20]
 800583a:	2300      	movpl	r3, #0
 800583c:	2300      	movmi	r3, #0
 800583e:	9206      	str	r2, [sp, #24]
 8005840:	bf54      	ite	pl
 8005842:	9305      	strpl	r3, [sp, #20]
 8005844:	9306      	strmi	r3, [sp, #24]
 8005846:	f1bb 0f00 	cmp.w	fp, #0
 800584a:	db3c      	blt.n	80058c6 <_dtoa_r+0x24e>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005852:	445b      	add	r3, fp
 8005854:	9306      	str	r3, [sp, #24]
 8005856:	2300      	movs	r3, #0
 8005858:	9308      	str	r3, [sp, #32]
 800585a:	9b07      	ldr	r3, [sp, #28]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d868      	bhi.n	8005932 <_dtoa_r+0x2ba>
 8005860:	2b05      	cmp	r3, #5
 8005862:	bfc4      	itt	gt
 8005864:	3b04      	subgt	r3, #4
 8005866:	9307      	strgt	r3, [sp, #28]
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	f1a3 0302 	sub.w	r3, r3, #2
 800586e:	bfcc      	ite	gt
 8005870:	2500      	movgt	r5, #0
 8005872:	2501      	movle	r5, #1
 8005874:	2b03      	cmp	r3, #3
 8005876:	f200 8085 	bhi.w	8005984 <_dtoa_r+0x30c>
 800587a:	e8df f003 	tbb	[pc, r3]
 800587e:	3b2e      	.short	0x3b2e
 8005880:	5839      	.short	0x5839
 8005882:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005886:	441d      	add	r5, r3
 8005888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800588c:	2b20      	cmp	r3, #32
 800588e:	bfc1      	itttt	gt
 8005890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005894:	fa08 f803 	lslgt.w	r8, r8, r3
 8005898:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800589c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058a0:	bfd6      	itet	le
 80058a2:	f1c3 0320 	rsble	r3, r3, #32
 80058a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80058aa:	fa06 f003 	lslle.w	r0, r6, r3
 80058ae:	f7fa fe29 	bl	8000504 <__aeabi_ui2d>
 80058b2:	2201      	movs	r2, #1
 80058b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058b8:	3d01      	subs	r5, #1
 80058ba:	920e      	str	r2, [sp, #56]	; 0x38
 80058bc:	e76f      	b.n	800579e <_dtoa_r+0x126>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7b3      	b.n	800582a <_dtoa_r+0x1b2>
 80058c2:	900c      	str	r0, [sp, #48]	; 0x30
 80058c4:	e7b2      	b.n	800582c <_dtoa_r+0x1b4>
 80058c6:	9b05      	ldr	r3, [sp, #20]
 80058c8:	eba3 030b 	sub.w	r3, r3, fp
 80058cc:	9305      	str	r3, [sp, #20]
 80058ce:	f1cb 0300 	rsb	r3, fp, #0
 80058d2:	9308      	str	r3, [sp, #32]
 80058d4:	2300      	movs	r3, #0
 80058d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d8:	e7bf      	b.n	800585a <_dtoa_r+0x1e2>
 80058da:	2300      	movs	r3, #0
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	dc52      	bgt.n	800598a <_dtoa_r+0x312>
 80058e4:	2301      	movs	r3, #1
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	461a      	mov	r2, r3
 80058ec:	920a      	str	r2, [sp, #40]	; 0x28
 80058ee:	e00b      	b.n	8005908 <_dtoa_r+0x290>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7f3      	b.n	80058dc <_dtoa_r+0x264>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9309      	str	r3, [sp, #36]	; 0x24
 80058f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fa:	445b      	add	r3, fp
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	3301      	adds	r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	bfb8      	it	lt
 8005906:	2301      	movlt	r3, #1
 8005908:	69e0      	ldr	r0, [r4, #28]
 800590a:	2100      	movs	r1, #0
 800590c:	2204      	movs	r2, #4
 800590e:	f102 0614 	add.w	r6, r2, #20
 8005912:	429e      	cmp	r6, r3
 8005914:	d93d      	bls.n	8005992 <_dtoa_r+0x31a>
 8005916:	6041      	str	r1, [r0, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fd9f 	bl	800645c <_Balloc>
 800591e:	9000      	str	r0, [sp, #0]
 8005920:	2800      	cmp	r0, #0
 8005922:	d139      	bne.n	8005998 <_dtoa_r+0x320>
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <_dtoa_r+0x308>)
 8005926:	4602      	mov	r2, r0
 8005928:	f240 11af 	movw	r1, #431	; 0x1af
 800592c:	e6bd      	b.n	80056aa <_dtoa_r+0x32>
 800592e:	2301      	movs	r3, #1
 8005930:	e7e1      	b.n	80058f6 <_dtoa_r+0x27e>
 8005932:	2501      	movs	r5, #1
 8005934:	2300      	movs	r3, #0
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	9509      	str	r5, [sp, #36]	; 0x24
 800593a:	f04f 33ff 	mov.w	r3, #4294967295
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	2200      	movs	r2, #0
 8005944:	2312      	movs	r3, #18
 8005946:	e7d1      	b.n	80058ec <_dtoa_r+0x274>
 8005948:	636f4361 	.word	0x636f4361
 800594c:	3fd287a7 	.word	0x3fd287a7
 8005950:	8b60c8b3 	.word	0x8b60c8b3
 8005954:	3fc68a28 	.word	0x3fc68a28
 8005958:	509f79fb 	.word	0x509f79fb
 800595c:	3fd34413 	.word	0x3fd34413
 8005960:	08007fb8 	.word	0x08007fb8
 8005964:	08007fcf 	.word	0x08007fcf
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	08007fb4 	.word	0x08007fb4
 8005970:	08007fab 	.word	0x08007fab
 8005974:	08007f88 	.word	0x08007f88
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	080080c0 	.word	0x080080c0
 8005980:	08008027 	.word	0x08008027
 8005984:	2301      	movs	r3, #1
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	e7d7      	b.n	800593a <_dtoa_r+0x2c2>
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	e7ba      	b.n	8005908 <_dtoa_r+0x290>
 8005992:	3101      	adds	r1, #1
 8005994:	0052      	lsls	r2, r2, #1
 8005996:	e7ba      	b.n	800590e <_dtoa_r+0x296>
 8005998:	69e3      	ldr	r3, [r4, #28]
 800599a:	9a00      	ldr	r2, [sp, #0]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	2b0e      	cmp	r3, #14
 80059a2:	f200 80a8 	bhi.w	8005af6 <_dtoa_r+0x47e>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	f000 80a5 	beq.w	8005af6 <_dtoa_r+0x47e>
 80059ac:	f1bb 0f00 	cmp.w	fp, #0
 80059b0:	dd38      	ble.n	8005a24 <_dtoa_r+0x3ac>
 80059b2:	4bc0      	ldr	r3, [pc, #768]	; (8005cb4 <_dtoa_r+0x63c>)
 80059b4:	f00b 020f 	and.w	r2, fp, #15
 80059b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80059c8:	d019      	beq.n	80059fe <_dtoa_r+0x386>
 80059ca:	4bbb      	ldr	r3, [pc, #748]	; (8005cb8 <_dtoa_r+0x640>)
 80059cc:	ec51 0b18 	vmov	r0, r1, d8
 80059d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059d4:	f7fa ff3a 	bl	800084c <__aeabi_ddiv>
 80059d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059dc:	f008 080f 	and.w	r8, r8, #15
 80059e0:	2503      	movs	r5, #3
 80059e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cb8 <_dtoa_r+0x640>
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	d10a      	bne.n	8005a02 <_dtoa_r+0x38a>
 80059ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f0:	4632      	mov	r2, r6
 80059f2:	463b      	mov	r3, r7
 80059f4:	f7fa ff2a 	bl	800084c <__aeabi_ddiv>
 80059f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fc:	e02b      	b.n	8005a56 <_dtoa_r+0x3de>
 80059fe:	2502      	movs	r5, #2
 8005a00:	e7ef      	b.n	80059e2 <_dtoa_r+0x36a>
 8005a02:	f018 0f01 	tst.w	r8, #1
 8005a06:	d008      	beq.n	8005a1a <_dtoa_r+0x3a2>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a10:	f7fa fdf2 	bl	80005f8 <__aeabi_dmul>
 8005a14:	3501      	adds	r5, #1
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a1e:	f109 0908 	add.w	r9, r9, #8
 8005a22:	e7e0      	b.n	80059e6 <_dtoa_r+0x36e>
 8005a24:	f000 809f 	beq.w	8005b66 <_dtoa_r+0x4ee>
 8005a28:	f1cb 0600 	rsb	r6, fp, #0
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <_dtoa_r+0x63c>)
 8005a2e:	4fa2      	ldr	r7, [pc, #648]	; (8005cb8 <_dtoa_r+0x640>)
 8005a30:	f006 020f 	and.w	r2, r6, #15
 8005a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	ec51 0b18 	vmov	r0, r1, d8
 8005a40:	f7fa fdda 	bl	80005f8 <__aeabi_dmul>
 8005a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a48:	1136      	asrs	r6, r6, #4
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2502      	movs	r5, #2
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d17e      	bne.n	8005b50 <_dtoa_r+0x4d8>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d0      	bne.n	80059f8 <_dtoa_r+0x380>
 8005a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8084 	beq.w	8005b6a <_dtoa_r+0x4f2>
 8005a62:	4b96      	ldr	r3, [pc, #600]	; (8005cbc <_dtoa_r+0x644>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	4640      	mov	r0, r8
 8005a68:	4649      	mov	r1, r9
 8005a6a:	f7fb f837 	bl	8000adc <__aeabi_dcmplt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d07b      	beq.n	8005b6a <_dtoa_r+0x4f2>
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d078      	beq.n	8005b6a <_dtoa_r+0x4f2>
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd39      	ble.n	8005af2 <_dtoa_r+0x47a>
 8005a7e:	4b90      	ldr	r3, [pc, #576]	; (8005cc0 <_dtoa_r+0x648>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a8e:	9e01      	ldr	r6, [sp, #4]
 8005a90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005a94:	3501      	adds	r5, #1
 8005a96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7fa fd42 	bl	8000524 <__aeabi_i2d>
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	f7fa fda8 	bl	80005f8 <__aeabi_dmul>
 8005aa8:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <_dtoa_r+0x64c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fbee 	bl	800028c <__adddf3>
 8005ab0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab8:	9303      	str	r3, [sp, #12]
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	d158      	bne.n	8005b70 <_dtoa_r+0x4f8>
 8005abe:	4b82      	ldr	r3, [pc, #520]	; (8005cc8 <_dtoa_r+0x650>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fa fbdf 	bl	8000288 <__aeabi_dsub>
 8005aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ace:	4680      	mov	r8, r0
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	f7fb f821 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f040 8296 	bne.w	8006008 <_dtoa_r+0x990>
 8005adc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fa fff8 	bl	8000adc <__aeabi_dcmplt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f040 8289 	bne.w	8006004 <_dtoa_r+0x98c>
 8005af2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f2c0 814e 	blt.w	8005d9a <_dtoa_r+0x722>
 8005afe:	f1bb 0f0e 	cmp.w	fp, #14
 8005b02:	f300 814a 	bgt.w	8005d9a <_dtoa_r+0x722>
 8005b06:	4b6b      	ldr	r3, [pc, #428]	; (8005cb4 <_dtoa_r+0x63c>)
 8005b08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f280 80dc 	bge.w	8005cd0 <_dtoa_r+0x658>
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f300 80d8 	bgt.w	8005cd0 <_dtoa_r+0x658>
 8005b20:	f040 826f 	bne.w	8006002 <_dtoa_r+0x98a>
 8005b24:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <_dtoa_r+0x650>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	f7fa fd64 	bl	80005f8 <__aeabi_dmul>
 8005b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b34:	f7fa ffe6 	bl	8000b04 <__aeabi_dcmpge>
 8005b38:	9e04      	ldr	r6, [sp, #16]
 8005b3a:	4637      	mov	r7, r6
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f040 8245 	bne.w	8005fcc <_dtoa_r+0x954>
 8005b42:	9d00      	ldr	r5, [sp, #0]
 8005b44:	2331      	movs	r3, #49	; 0x31
 8005b46:	f805 3b01 	strb.w	r3, [r5], #1
 8005b4a:	f10b 0b01 	add.w	fp, fp, #1
 8005b4e:	e241      	b.n	8005fd4 <_dtoa_r+0x95c>
 8005b50:	07f2      	lsls	r2, r6, #31
 8005b52:	d505      	bpl.n	8005b60 <_dtoa_r+0x4e8>
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	2301      	movs	r3, #1
 8005b60:	1076      	asrs	r6, r6, #1
 8005b62:	3708      	adds	r7, #8
 8005b64:	e773      	b.n	8005a4e <_dtoa_r+0x3d6>
 8005b66:	2502      	movs	r5, #2
 8005b68:	e775      	b.n	8005a56 <_dtoa_r+0x3de>
 8005b6a:	9e04      	ldr	r6, [sp, #16]
 8005b6c:	465f      	mov	r7, fp
 8005b6e:	e792      	b.n	8005a96 <_dtoa_r+0x41e>
 8005b70:	9900      	ldr	r1, [sp, #0]
 8005b72:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <_dtoa_r+0x63c>)
 8005b74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b78:	4431      	add	r1, r6
 8005b7a:	9102      	str	r1, [sp, #8]
 8005b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b7e:	eeb0 9a47 	vmov.f32	s18, s14
 8005b82:	eef0 9a67 	vmov.f32	s19, s15
 8005b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d044      	beq.n	8005c1c <_dtoa_r+0x5a4>
 8005b92:	494e      	ldr	r1, [pc, #312]	; (8005ccc <_dtoa_r+0x654>)
 8005b94:	2000      	movs	r0, #0
 8005b96:	f7fa fe59 	bl	800084c <__aeabi_ddiv>
 8005b9a:	ec53 2b19 	vmov	r2, r3, d9
 8005b9e:	f7fa fb73 	bl	8000288 <__aeabi_dsub>
 8005ba2:	9d00      	ldr	r5, [sp, #0]
 8005ba4:	ec41 0b19 	vmov	d9, r0, r1
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7fa ffd4 	bl	8000b58 <__aeabi_d2iz>
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	f7fa fcb7 	bl	8000524 <__aeabi_i2d>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fb63 	bl	8000288 <__aeabi_dsub>
 8005bc2:	3630      	adds	r6, #48	; 0x30
 8005bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc8:	ec53 2b19 	vmov	r2, r3, d9
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	f7fa ff84 	bl	8000adc <__aeabi_dcmplt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d164      	bne.n	8005ca2 <_dtoa_r+0x62a>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4937      	ldr	r1, [pc, #220]	; (8005cbc <_dtoa_r+0x644>)
 8005bde:	2000      	movs	r0, #0
 8005be0:	f7fa fb52 	bl	8000288 <__aeabi_dsub>
 8005be4:	ec53 2b19 	vmov	r2, r3, d9
 8005be8:	f7fa ff78 	bl	8000adc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f040 80b6 	bne.w	8005d5e <_dtoa_r+0x6e6>
 8005bf2:	9b02      	ldr	r3, [sp, #8]
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	f43f af7c 	beq.w	8005af2 <_dtoa_r+0x47a>
 8005bfa:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <_dtoa_r+0x648>)
 8005bfc:	ec51 0b19 	vmov	r0, r1, d9
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <_dtoa_r+0x648>)
 8005c08:	ec41 0b19 	vmov	d9, r0, r1
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fcf1 	bl	80005f8 <__aeabi_dmul>
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	e7c5      	b.n	8005ba8 <_dtoa_r+0x530>
 8005c1c:	ec51 0b17 	vmov	r0, r1, d7
 8005c20:	f7fa fcea 	bl	80005f8 <__aeabi_dmul>
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	9d00      	ldr	r5, [sp, #0]
 8005c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c2a:	ec41 0b19 	vmov	d9, r0, r1
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4640      	mov	r0, r8
 8005c32:	f7fa ff91 	bl	8000b58 <__aeabi_d2iz>
 8005c36:	4606      	mov	r6, r0
 8005c38:	f7fa fc74 	bl	8000524 <__aeabi_i2d>
 8005c3c:	3630      	adds	r6, #48	; 0x30
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7fa fb1f 	bl	8000288 <__aeabi_dsub>
 8005c4a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c4e:	9b02      	ldr	r3, [sp, #8]
 8005c50:	429d      	cmp	r5, r3
 8005c52:	4680      	mov	r8, r0
 8005c54:	4689      	mov	r9, r1
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	d124      	bne.n	8005ca6 <_dtoa_r+0x62e>
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <_dtoa_r+0x654>)
 8005c5e:	ec51 0b19 	vmov	r0, r1, d9
 8005c62:	f7fa fb13 	bl	800028c <__adddf3>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa ff53 	bl	8000b18 <__aeabi_dcmpgt>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d173      	bne.n	8005d5e <_dtoa_r+0x6e6>
 8005c76:	ec53 2b19 	vmov	r2, r3, d9
 8005c7a:	4914      	ldr	r1, [pc, #80]	; (8005ccc <_dtoa_r+0x654>)
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f7fa fb03 	bl	8000288 <__aeabi_dsub>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa ff27 	bl	8000adc <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f43f af2f 	beq.w	8005af2 <_dtoa_r+0x47a>
 8005c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c96:	1e6b      	subs	r3, r5, #1
 8005c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c9e:	2b30      	cmp	r3, #48	; 0x30
 8005ca0:	d0f8      	beq.n	8005c94 <_dtoa_r+0x61c>
 8005ca2:	46bb      	mov	fp, r7
 8005ca4:	e04a      	b.n	8005d3c <_dtoa_r+0x6c4>
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <_dtoa_r+0x648>)
 8005ca8:	f7fa fca6 	bl	80005f8 <__aeabi_dmul>
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	e7bd      	b.n	8005c2e <_dtoa_r+0x5b6>
 8005cb2:	bf00      	nop
 8005cb4:	080080c0 	.word	0x080080c0
 8005cb8:	08008098 	.word	0x08008098
 8005cbc:	3ff00000 	.word	0x3ff00000
 8005cc0:	40240000 	.word	0x40240000
 8005cc4:	401c0000 	.word	0x401c0000
 8005cc8:	40140000 	.word	0x40140000
 8005ccc:	3fe00000 	.word	0x3fe00000
 8005cd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cd4:	9d00      	ldr	r5, [sp, #0]
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	464b      	mov	r3, r9
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa fdb5 	bl	800084c <__aeabi_ddiv>
 8005ce2:	f7fa ff39 	bl	8000b58 <__aeabi_d2iz>
 8005ce6:	9001      	str	r0, [sp, #4]
 8005ce8:	f7fa fc1c 	bl	8000524 <__aeabi_i2d>
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	f7fa fc82 	bl	80005f8 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fac4 	bl	8000288 <__aeabi_dsub>
 8005d00:	9e01      	ldr	r6, [sp, #4]
 8005d02:	9f04      	ldr	r7, [sp, #16]
 8005d04:	3630      	adds	r6, #48	; 0x30
 8005d06:	f805 6b01 	strb.w	r6, [r5], #1
 8005d0a:	9e00      	ldr	r6, [sp, #0]
 8005d0c:	1bae      	subs	r6, r5, r6
 8005d0e:	42b7      	cmp	r7, r6
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	d134      	bne.n	8005d80 <_dtoa_r+0x708>
 8005d16:	f7fa fab9 	bl	800028c <__adddf3>
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	f7fa fef9 	bl	8000b18 <__aeabi_dcmpgt>
 8005d26:	b9c8      	cbnz	r0, 8005d5c <_dtoa_r+0x6e4>
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d34:	b110      	cbz	r0, 8005d3c <_dtoa_r+0x6c4>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	07db      	lsls	r3, r3, #31
 8005d3a:	d40f      	bmi.n	8005d5c <_dtoa_r+0x6e4>
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 fbcc 	bl	80064dc <_Bfree>
 8005d44:	2300      	movs	r3, #0
 8005d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d48:	702b      	strb	r3, [r5, #0]
 8005d4a:	f10b 0301 	add.w	r3, fp, #1
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f43f ace2 	beq.w	800571c <_dtoa_r+0xa4>
 8005d58:	601d      	str	r5, [r3, #0]
 8005d5a:	e4df      	b.n	800571c <_dtoa_r+0xa4>
 8005d5c:	465f      	mov	r7, fp
 8005d5e:	462b      	mov	r3, r5
 8005d60:	461d      	mov	r5, r3
 8005d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d66:	2a39      	cmp	r2, #57	; 0x39
 8005d68:	d106      	bne.n	8005d78 <_dtoa_r+0x700>
 8005d6a:	9a00      	ldr	r2, [sp, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d1f7      	bne.n	8005d60 <_dtoa_r+0x6e8>
 8005d70:	9900      	ldr	r1, [sp, #0]
 8005d72:	2230      	movs	r2, #48	; 0x30
 8005d74:	3701      	adds	r7, #1
 8005d76:	700a      	strb	r2, [r1, #0]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e790      	b.n	8005ca2 <_dtoa_r+0x62a>
 8005d80:	4ba3      	ldr	r3, [pc, #652]	; (8006010 <_dtoa_r+0x998>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	f7fa fc38 	bl	80005f8 <__aeabi_dmul>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	f7fa fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d09e      	beq.n	8005cd6 <_dtoa_r+0x65e>
 8005d98:	e7d0      	b.n	8005d3c <_dtoa_r+0x6c4>
 8005d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f000 80ca 	beq.w	8005f36 <_dtoa_r+0x8be>
 8005da2:	9a07      	ldr	r2, [sp, #28]
 8005da4:	2a01      	cmp	r2, #1
 8005da6:	f300 80ad 	bgt.w	8005f04 <_dtoa_r+0x88c>
 8005daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	f000 80a5 	beq.w	8005efc <_dtoa_r+0x884>
 8005db2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005db6:	9e08      	ldr	r6, [sp, #32]
 8005db8:	9d05      	ldr	r5, [sp, #20]
 8005dba:	9a05      	ldr	r2, [sp, #20]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	9205      	str	r2, [sp, #20]
 8005dc0:	9a06      	ldr	r2, [sp, #24]
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9206      	str	r2, [sp, #24]
 8005dca:	f000 fc3d 	bl	8006648 <__i2b>
 8005dce:	4607      	mov	r7, r0
 8005dd0:	b165      	cbz	r5, 8005dec <_dtoa_r+0x774>
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd09      	ble.n	8005dec <_dtoa_r+0x774>
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	9a05      	ldr	r2, [sp, #20]
 8005ddc:	bfa8      	it	ge
 8005dde:	462b      	movge	r3, r5
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	9205      	str	r2, [sp, #20]
 8005de4:	9a06      	ldr	r2, [sp, #24]
 8005de6:	1aed      	subs	r5, r5, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	b1f3      	cbz	r3, 8005e2e <_dtoa_r+0x7b6>
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80a3 	beq.w	8005f3e <_dtoa_r+0x8c6>
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	dd10      	ble.n	8005e1e <_dtoa_r+0x7a6>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 fce1 	bl	80067c8 <__pow5mult>
 8005e06:	4652      	mov	r2, sl
 8005e08:	4601      	mov	r1, r0
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 fc31 	bl	8006674 <__multiply>
 8005e12:	4651      	mov	r1, sl
 8005e14:	4680      	mov	r8, r0
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 fb60 	bl	80064dc <_Bfree>
 8005e1c:	46c2      	mov	sl, r8
 8005e1e:	9b08      	ldr	r3, [sp, #32]
 8005e20:	1b9a      	subs	r2, r3, r6
 8005e22:	d004      	beq.n	8005e2e <_dtoa_r+0x7b6>
 8005e24:	4651      	mov	r1, sl
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fcce 	bl	80067c8 <__pow5mult>
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 fc09 	bl	8006648 <__i2b>
 8005e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	f340 8081 	ble.w	8005f42 <_dtoa_r+0x8ca>
 8005e40:	461a      	mov	r2, r3
 8005e42:	4601      	mov	r1, r0
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fcbf 	bl	80067c8 <__pow5mult>
 8005e4a:	9b07      	ldr	r3, [sp, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	4606      	mov	r6, r0
 8005e50:	dd7a      	ble.n	8005f48 <_dtoa_r+0x8d0>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	6933      	ldr	r3, [r6, #16]
 8005e58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e5c:	6918      	ldr	r0, [r3, #16]
 8005e5e:	f000 fba5 	bl	80065ac <__hi0bits>
 8005e62:	f1c0 0020 	rsb	r0, r0, #32
 8005e66:	9b06      	ldr	r3, [sp, #24]
 8005e68:	4418      	add	r0, r3
 8005e6a:	f010 001f 	ands.w	r0, r0, #31
 8005e6e:	f000 8094 	beq.w	8005f9a <_dtoa_r+0x922>
 8005e72:	f1c0 0320 	rsb	r3, r0, #32
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	f340 8085 	ble.w	8005f86 <_dtoa_r+0x90e>
 8005e7c:	9b05      	ldr	r3, [sp, #20]
 8005e7e:	f1c0 001c 	rsb	r0, r0, #28
 8005e82:	4403      	add	r3, r0
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	4403      	add	r3, r0
 8005e8a:	4405      	add	r5, r0
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	9b05      	ldr	r3, [sp, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dd05      	ble.n	8005ea0 <_dtoa_r+0x828>
 8005e94:	4651      	mov	r1, sl
 8005e96:	461a      	mov	r2, r3
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fcef 	bl	800687c <__lshift>
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dd05      	ble.n	8005eb2 <_dtoa_r+0x83a>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fce6 	bl	800687c <__lshift>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d072      	beq.n	8005f9e <_dtoa_r+0x926>
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f000 fd4a 	bl	8006954 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	da6c      	bge.n	8005f9e <_dtoa_r+0x926>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	220a      	movs	r2, #10
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fb28 	bl	8006520 <__multadd>
 8005ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ed6:	4682      	mov	sl, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 81b0 	beq.w	800623e <_dtoa_r+0xbc6>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	220a      	movs	r2, #10
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fb1b 	bl	8006520 <__multadd>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	4607      	mov	r7, r0
 8005ef0:	f300 8096 	bgt.w	8006020 <_dtoa_r+0x9a8>
 8005ef4:	9b07      	ldr	r3, [sp, #28]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	dc59      	bgt.n	8005fae <_dtoa_r+0x936>
 8005efa:	e091      	b.n	8006020 <_dtoa_r+0x9a8>
 8005efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f02:	e758      	b.n	8005db6 <_dtoa_r+0x73e>
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	1e5e      	subs	r6, r3, #1
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	42b3      	cmp	r3, r6
 8005f0c:	bfbf      	itttt	lt
 8005f0e:	9b08      	ldrlt	r3, [sp, #32]
 8005f10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f12:	9608      	strlt	r6, [sp, #32]
 8005f14:	1af3      	sublt	r3, r6, r3
 8005f16:	bfb4      	ite	lt
 8005f18:	18d2      	addlt	r2, r2, r3
 8005f1a:	1b9e      	subge	r6, r3, r6
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	bfbc      	itt	lt
 8005f20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f22:	2600      	movlt	r6, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bfb7      	itett	lt
 8005f28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f30:	1a9d      	sublt	r5, r3, r2
 8005f32:	2300      	movlt	r3, #0
 8005f34:	e741      	b.n	8005dba <_dtoa_r+0x742>
 8005f36:	9e08      	ldr	r6, [sp, #32]
 8005f38:	9d05      	ldr	r5, [sp, #20]
 8005f3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f3c:	e748      	b.n	8005dd0 <_dtoa_r+0x758>
 8005f3e:	9a08      	ldr	r2, [sp, #32]
 8005f40:	e770      	b.n	8005e24 <_dtoa_r+0x7ac>
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	dc19      	bgt.n	8005f7c <_dtoa_r+0x904>
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	b9bb      	cbnz	r3, 8005f7c <_dtoa_r+0x904>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f52:	b99b      	cbnz	r3, 8005f7c <_dtoa_r+0x904>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f5a:	0d1b      	lsrs	r3, r3, #20
 8005f5c:	051b      	lsls	r3, r3, #20
 8005f5e:	b183      	cbz	r3, 8005f82 <_dtoa_r+0x90a>
 8005f60:	9b05      	ldr	r3, [sp, #20]
 8005f62:	3301      	adds	r3, #1
 8005f64:	9305      	str	r3, [sp, #20]
 8005f66:	9b06      	ldr	r3, [sp, #24]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	9306      	str	r3, [sp, #24]
 8005f6c:	f04f 0801 	mov.w	r8, #1
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f47f af6f 	bne.w	8005e56 <_dtoa_r+0x7de>
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e774      	b.n	8005e66 <_dtoa_r+0x7ee>
 8005f7c:	f04f 0800 	mov.w	r8, #0
 8005f80:	e7f6      	b.n	8005f70 <_dtoa_r+0x8f8>
 8005f82:	4698      	mov	r8, r3
 8005f84:	e7f4      	b.n	8005f70 <_dtoa_r+0x8f8>
 8005f86:	d082      	beq.n	8005e8e <_dtoa_r+0x816>
 8005f88:	9a05      	ldr	r2, [sp, #20]
 8005f8a:	331c      	adds	r3, #28
 8005f8c:	441a      	add	r2, r3
 8005f8e:	9205      	str	r2, [sp, #20]
 8005f90:	9a06      	ldr	r2, [sp, #24]
 8005f92:	441a      	add	r2, r3
 8005f94:	441d      	add	r5, r3
 8005f96:	9206      	str	r2, [sp, #24]
 8005f98:	e779      	b.n	8005e8e <_dtoa_r+0x816>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x910>
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc37      	bgt.n	8006014 <_dtoa_r+0x99c>
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dd34      	ble.n	8006014 <_dtoa_r+0x99c>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	b963      	cbnz	r3, 8005fcc <_dtoa_r+0x954>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 fab2 	bl	8006520 <__multadd>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	f000 fcc7 	bl	8006954 <__mcmp>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f73f adbb 	bgt.w	8005b42 <_dtoa_r+0x4ca>
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	9d00      	ldr	r5, [sp, #0]
 8005fd0:	ea6f 0b03 	mvn.w	fp, r3
 8005fd4:	f04f 0800 	mov.w	r8, #0
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fa7e 	bl	80064dc <_Bfree>
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	f43f aeab 	beq.w	8005d3c <_dtoa_r+0x6c4>
 8005fe6:	f1b8 0f00 	cmp.w	r8, #0
 8005fea:	d005      	beq.n	8005ff8 <_dtoa_r+0x980>
 8005fec:	45b8      	cmp	r8, r7
 8005fee:	d003      	beq.n	8005ff8 <_dtoa_r+0x980>
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fa72 	bl	80064dc <_Bfree>
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fa6e 	bl	80064dc <_Bfree>
 8006000:	e69c      	b.n	8005d3c <_dtoa_r+0x6c4>
 8006002:	2600      	movs	r6, #0
 8006004:	4637      	mov	r7, r6
 8006006:	e7e1      	b.n	8005fcc <_dtoa_r+0x954>
 8006008:	46bb      	mov	fp, r7
 800600a:	4637      	mov	r7, r6
 800600c:	e599      	b.n	8005b42 <_dtoa_r+0x4ca>
 800600e:	bf00      	nop
 8006010:	40240000 	.word	0x40240000
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80c8 	beq.w	80061ac <_dtoa_r+0xb34>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd05      	ble.n	8006030 <_dtoa_r+0x9b8>
 8006024:	4639      	mov	r1, r7
 8006026:	462a      	mov	r2, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fc27 	bl	800687c <__lshift>
 800602e:	4607      	mov	r7, r0
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d05b      	beq.n	80060ee <_dtoa_r+0xa76>
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fa0f 	bl	800645c <_Balloc>
 800603e:	4605      	mov	r5, r0
 8006040:	b928      	cbnz	r0, 800604e <_dtoa_r+0x9d6>
 8006042:	4b83      	ldr	r3, [pc, #524]	; (8006250 <_dtoa_r+0xbd8>)
 8006044:	4602      	mov	r2, r0
 8006046:	f240 21ef 	movw	r1, #751	; 0x2ef
 800604a:	f7ff bb2e 	b.w	80056aa <_dtoa_r+0x32>
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	f107 010c 	add.w	r1, r7, #12
 8006058:	300c      	adds	r0, #12
 800605a:	f001 f801 	bl	8007060 <memcpy>
 800605e:	2201      	movs	r2, #1
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fc0a 	bl	800687c <__lshift>
 8006068:	9b00      	ldr	r3, [sp, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006072:	4413      	add	r3, r2
 8006074:	9308      	str	r3, [sp, #32]
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	46b8      	mov	r8, r7
 800607e:	9306      	str	r3, [sp, #24]
 8006080:	4607      	mov	r7, r0
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	4631      	mov	r1, r6
 8006086:	3b01      	subs	r3, #1
 8006088:	4650      	mov	r0, sl
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f7ff fa69 	bl	8005562 <quorem>
 8006090:	4641      	mov	r1, r8
 8006092:	9002      	str	r0, [sp, #8]
 8006094:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006098:	4650      	mov	r0, sl
 800609a:	f000 fc5b 	bl	8006954 <__mcmp>
 800609e:	463a      	mov	r2, r7
 80060a0:	9005      	str	r0, [sp, #20]
 80060a2:	4631      	mov	r1, r6
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 fc71 	bl	800698c <__mdiff>
 80060aa:	68c2      	ldr	r2, [r0, #12]
 80060ac:	4605      	mov	r5, r0
 80060ae:	bb02      	cbnz	r2, 80060f2 <_dtoa_r+0xa7a>
 80060b0:	4601      	mov	r1, r0
 80060b2:	4650      	mov	r0, sl
 80060b4:	f000 fc4e 	bl	8006954 <__mcmp>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4629      	mov	r1, r5
 80060bc:	4620      	mov	r0, r4
 80060be:	9209      	str	r2, [sp, #36]	; 0x24
 80060c0:	f000 fa0c 	bl	80064dc <_Bfree>
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c8:	9d04      	ldr	r5, [sp, #16]
 80060ca:	ea43 0102 	orr.w	r1, r3, r2
 80060ce:	9b06      	ldr	r3, [sp, #24]
 80060d0:	4319      	orrs	r1, r3
 80060d2:	d110      	bne.n	80060f6 <_dtoa_r+0xa7e>
 80060d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060d8:	d029      	beq.n	800612e <_dtoa_r+0xab6>
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd02      	ble.n	80060e6 <_dtoa_r+0xa6e>
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	f883 9000 	strb.w	r9, [r3]
 80060ec:	e774      	b.n	8005fd8 <_dtoa_r+0x960>
 80060ee:	4638      	mov	r0, r7
 80060f0:	e7ba      	b.n	8006068 <_dtoa_r+0x9f0>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e7e1      	b.n	80060ba <_dtoa_r+0xa42>
 80060f6:	9b05      	ldr	r3, [sp, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db04      	blt.n	8006106 <_dtoa_r+0xa8e>
 80060fc:	9907      	ldr	r1, [sp, #28]
 80060fe:	430b      	orrs	r3, r1
 8006100:	9906      	ldr	r1, [sp, #24]
 8006102:	430b      	orrs	r3, r1
 8006104:	d120      	bne.n	8006148 <_dtoa_r+0xad0>
 8006106:	2a00      	cmp	r2, #0
 8006108:	dded      	ble.n	80060e6 <_dtoa_r+0xa6e>
 800610a:	4651      	mov	r1, sl
 800610c:	2201      	movs	r2, #1
 800610e:	4620      	mov	r0, r4
 8006110:	f000 fbb4 	bl	800687c <__lshift>
 8006114:	4631      	mov	r1, r6
 8006116:	4682      	mov	sl, r0
 8006118:	f000 fc1c 	bl	8006954 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dc03      	bgt.n	8006128 <_dtoa_r+0xab0>
 8006120:	d1e1      	bne.n	80060e6 <_dtoa_r+0xa6e>
 8006122:	f019 0f01 	tst.w	r9, #1
 8006126:	d0de      	beq.n	80060e6 <_dtoa_r+0xa6e>
 8006128:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800612c:	d1d8      	bne.n	80060e0 <_dtoa_r+0xa68>
 800612e:	9a01      	ldr	r2, [sp, #4]
 8006130:	2339      	movs	r3, #57	; 0x39
 8006132:	7013      	strb	r3, [r2, #0]
 8006134:	462b      	mov	r3, r5
 8006136:	461d      	mov	r5, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800613e:	2a39      	cmp	r2, #57	; 0x39
 8006140:	d06c      	beq.n	800621c <_dtoa_r+0xba4>
 8006142:	3201      	adds	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e747      	b.n	8005fd8 <_dtoa_r+0x960>
 8006148:	2a00      	cmp	r2, #0
 800614a:	dd07      	ble.n	800615c <_dtoa_r+0xae4>
 800614c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006150:	d0ed      	beq.n	800612e <_dtoa_r+0xab6>
 8006152:	9a01      	ldr	r2, [sp, #4]
 8006154:	f109 0301 	add.w	r3, r9, #1
 8006158:	7013      	strb	r3, [r2, #0]
 800615a:	e73d      	b.n	8005fd8 <_dtoa_r+0x960>
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	9a08      	ldr	r2, [sp, #32]
 8006160:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006164:	4293      	cmp	r3, r2
 8006166:	d043      	beq.n	80061f0 <_dtoa_r+0xb78>
 8006168:	4651      	mov	r1, sl
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f9d6 	bl	8006520 <__multadd>
 8006174:	45b8      	cmp	r8, r7
 8006176:	4682      	mov	sl, r0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f04f 020a 	mov.w	r2, #10
 8006180:	4641      	mov	r1, r8
 8006182:	4620      	mov	r0, r4
 8006184:	d107      	bne.n	8006196 <_dtoa_r+0xb1e>
 8006186:	f000 f9cb 	bl	8006520 <__multadd>
 800618a:	4680      	mov	r8, r0
 800618c:	4607      	mov	r7, r0
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	e775      	b.n	8006082 <_dtoa_r+0xa0a>
 8006196:	f000 f9c3 	bl	8006520 <__multadd>
 800619a:	4639      	mov	r1, r7
 800619c:	4680      	mov	r8, r0
 800619e:	2300      	movs	r3, #0
 80061a0:	220a      	movs	r2, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f9bc 	bl	8006520 <__multadd>
 80061a8:	4607      	mov	r7, r0
 80061aa:	e7f0      	b.n	800618e <_dtoa_r+0xb16>
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	9d00      	ldr	r5, [sp, #0]
 80061b2:	4631      	mov	r1, r6
 80061b4:	4650      	mov	r0, sl
 80061b6:	f7ff f9d4 	bl	8005562 <quorem>
 80061ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	f805 9b01 	strb.w	r9, [r5], #1
 80061c4:	1aea      	subs	r2, r5, r3
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	dd07      	ble.n	80061dc <_dtoa_r+0xb64>
 80061cc:	4651      	mov	r1, sl
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f9a4 	bl	8006520 <__multadd>
 80061d8:	4682      	mov	sl, r0
 80061da:	e7ea      	b.n	80061b2 <_dtoa_r+0xb3a>
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bfc8      	it	gt
 80061e2:	461d      	movgt	r5, r3
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	bfd8      	it	le
 80061e8:	2501      	movle	r5, #1
 80061ea:	441d      	add	r5, r3
 80061ec:	f04f 0800 	mov.w	r8, #0
 80061f0:	4651      	mov	r1, sl
 80061f2:	2201      	movs	r2, #1
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fb41 	bl	800687c <__lshift>
 80061fa:	4631      	mov	r1, r6
 80061fc:	4682      	mov	sl, r0
 80061fe:	f000 fba9 	bl	8006954 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	dc96      	bgt.n	8006134 <_dtoa_r+0xabc>
 8006206:	d102      	bne.n	800620e <_dtoa_r+0xb96>
 8006208:	f019 0f01 	tst.w	r9, #1
 800620c:	d192      	bne.n	8006134 <_dtoa_r+0xabc>
 800620e:	462b      	mov	r3, r5
 8006210:	461d      	mov	r5, r3
 8006212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006216:	2a30      	cmp	r2, #48	; 0x30
 8006218:	d0fa      	beq.n	8006210 <_dtoa_r+0xb98>
 800621a:	e6dd      	b.n	8005fd8 <_dtoa_r+0x960>
 800621c:	9a00      	ldr	r2, [sp, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d189      	bne.n	8006136 <_dtoa_r+0xabe>
 8006222:	f10b 0b01 	add.w	fp, fp, #1
 8006226:	2331      	movs	r3, #49	; 0x31
 8006228:	e796      	b.n	8006158 <_dtoa_r+0xae0>
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <_dtoa_r+0xbdc>)
 800622c:	f7ff ba99 	b.w	8005762 <_dtoa_r+0xea>
 8006230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f aa6d 	bne.w	8005712 <_dtoa_r+0x9a>
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <_dtoa_r+0xbe0>)
 800623a:	f7ff ba92 	b.w	8005762 <_dtoa_r+0xea>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dcb5      	bgt.n	80061b0 <_dtoa_r+0xb38>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	2b02      	cmp	r3, #2
 8006248:	f73f aeb1 	bgt.w	8005fae <_dtoa_r+0x936>
 800624c:	e7b0      	b.n	80061b0 <_dtoa_r+0xb38>
 800624e:	bf00      	nop
 8006250:	08008027 	.word	0x08008027
 8006254:	08007f87 	.word	0x08007f87
 8006258:	08007fab 	.word	0x08007fab

0800625c <_free_r>:
 800625c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625e:	2900      	cmp	r1, #0
 8006260:	d044      	beq.n	80062ec <_free_r+0x90>
 8006262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f1a1 0404 	sub.w	r4, r1, #4
 800626e:	bfb8      	it	lt
 8006270:	18e4      	addlt	r4, r4, r3
 8006272:	f000 f8e7 	bl	8006444 <__malloc_lock>
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <_free_r+0x94>)
 8006278:	9801      	ldr	r0, [sp, #4]
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x30>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	b003      	add	sp, #12
 8006284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006288:	f000 b8e2 	b.w	8006450 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x46>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1949      	addeq	r1, r1, r5
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x22>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x50>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x46>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1855      	adds	r5, r2, r1
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x70>
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	4421      	add	r1, r4
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x26>
 80062c0:	681c      	ldr	r4, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	440c      	add	r4, r1
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x26>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x78>
 80062ce:	230c      	movs	r3, #12
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x26>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7ca      	b.n	8006282 <_free_r+0x26>
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	20000418 	.word	0x20000418

080062f4 <malloc>:
 80062f4:	4b02      	ldr	r3, [pc, #8]	; (8006300 <malloc+0xc>)
 80062f6:	4601      	mov	r1, r0
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f000 b823 	b.w	8006344 <_malloc_r>
 80062fe:	bf00      	nop
 8006300:	20000068 	.word	0x20000068

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0e      	ldr	r6, [pc, #56]	; (8006340 <sbrk_aligned+0x3c>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 fe96 	bl	8007040 <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fe91 	bl	8007040 <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d00a      	beq.n	8006338 <sbrk_aligned+0x34>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d007      	beq.n	800633c <sbrk_aligned+0x38>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fe86 	bl	8007040 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d101      	bne.n	800633c <sbrk_aligned+0x38>
 8006338:	f04f 34ff 	mov.w	r4, #4294967295
 800633c:	4620      	mov	r0, r4
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	2000041c 	.word	0x2000041c

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4607      	mov	r7, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d905      	bls.n	800636c <_malloc_r+0x28>
 8006360:	230c      	movs	r3, #12
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2600      	movs	r6, #0
 8006366:	4630      	mov	r0, r6
 8006368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006440 <_malloc_r+0xfc>
 8006370:	f000 f868 	bl	8006444 <__malloc_lock>
 8006374:	f8d8 3000 	ldr.w	r3, [r8]
 8006378:	461c      	mov	r4, r3
 800637a:	bb5c      	cbnz	r4, 80063d4 <_malloc_r+0x90>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	f7ff ffc0 	bl	8006304 <sbrk_aligned>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	4604      	mov	r4, r0
 8006388:	d155      	bne.n	8006436 <_malloc_r+0xf2>
 800638a:	f8d8 4000 	ldr.w	r4, [r8]
 800638e:	4626      	mov	r6, r4
 8006390:	2e00      	cmp	r6, #0
 8006392:	d145      	bne.n	8006420 <_malloc_r+0xdc>
 8006394:	2c00      	cmp	r4, #0
 8006396:	d048      	beq.n	800642a <_malloc_r+0xe6>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	4631      	mov	r1, r6
 800639c:	4638      	mov	r0, r7
 800639e:	eb04 0903 	add.w	r9, r4, r3
 80063a2:	f000 fe4d 	bl	8007040 <_sbrk_r>
 80063a6:	4581      	cmp	r9, r0
 80063a8:	d13f      	bne.n	800642a <_malloc_r+0xe6>
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	1a6d      	subs	r5, r5, r1
 80063ae:	4629      	mov	r1, r5
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa7 	bl	8006304 <sbrk_aligned>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d037      	beq.n	800642a <_malloc_r+0xe6>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	442b      	add	r3, r5
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f8d8 3000 	ldr.w	r3, [r8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d038      	beq.n	800643a <_malloc_r+0xf6>
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	42a2      	cmp	r2, r4
 80063cc:	d12b      	bne.n	8006426 <_malloc_r+0xe2>
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xb0>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d41f      	bmi.n	800641a <_malloc_r+0xd6>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xca>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4638      	mov	r0, r7
 80063f6:	f104 060b 	add.w	r6, r4, #11
 80063fa:	f000 f829 	bl	8006450 <__malloc_unlock>
 80063fe:	f026 0607 	bic.w	r6, r6, #7
 8006402:	1d23      	adds	r3, r4, #4
 8006404:	1af2      	subs	r2, r6, r3
 8006406:	d0ae      	beq.n	8006366 <_malloc_r+0x22>
 8006408:	1b9b      	subs	r3, r3, r6
 800640a:	50a3      	str	r3, [r4, r2]
 800640c:	e7ab      	b.n	8006366 <_malloc_r+0x22>
 800640e:	42a3      	cmp	r3, r4
 8006410:	6862      	ldr	r2, [r4, #4]
 8006412:	d1dd      	bne.n	80063d0 <_malloc_r+0x8c>
 8006414:	f8c8 2000 	str.w	r2, [r8]
 8006418:	e7ec      	b.n	80063f4 <_malloc_r+0xb0>
 800641a:	4623      	mov	r3, r4
 800641c:	6864      	ldr	r4, [r4, #4]
 800641e:	e7ac      	b.n	800637a <_malloc_r+0x36>
 8006420:	4634      	mov	r4, r6
 8006422:	6876      	ldr	r6, [r6, #4]
 8006424:	e7b4      	b.n	8006390 <_malloc_r+0x4c>
 8006426:	4613      	mov	r3, r2
 8006428:	e7cc      	b.n	80063c4 <_malloc_r+0x80>
 800642a:	230c      	movs	r3, #12
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	4638      	mov	r0, r7
 8006430:	f000 f80e 	bl	8006450 <__malloc_unlock>
 8006434:	e797      	b.n	8006366 <_malloc_r+0x22>
 8006436:	6025      	str	r5, [r4, #0]
 8006438:	e7dc      	b.n	80063f4 <_malloc_r+0xb0>
 800643a:	605b      	str	r3, [r3, #4]
 800643c:	deff      	udf	#255	; 0xff
 800643e:	bf00      	nop
 8006440:	20000418 	.word	0x20000418

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__malloc_lock+0x8>)
 8006446:	f7ff b88a 	b.w	800555e <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000414 	.word	0x20000414

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff b885 	b.w	8005560 <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000414 	.word	0x20000414

0800645c <_Balloc>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	69c6      	ldr	r6, [r0, #28]
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	b976      	cbnz	r6, 8006484 <_Balloc+0x28>
 8006466:	2010      	movs	r0, #16
 8006468:	f7ff ff44 	bl	80062f4 <malloc>
 800646c:	4602      	mov	r2, r0
 800646e:	61e0      	str	r0, [r4, #28]
 8006470:	b920      	cbnz	r0, 800647c <_Balloc+0x20>
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <_Balloc+0x78>)
 8006474:	4818      	ldr	r0, [pc, #96]	; (80064d8 <_Balloc+0x7c>)
 8006476:	216b      	movs	r1, #107	; 0x6b
 8006478:	f000 fe00 	bl	800707c <__assert_func>
 800647c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006480:	6006      	str	r6, [r0, #0]
 8006482:	60c6      	str	r6, [r0, #12]
 8006484:	69e6      	ldr	r6, [r4, #28]
 8006486:	68f3      	ldr	r3, [r6, #12]
 8006488:	b183      	cbz	r3, 80064ac <_Balloc+0x50>
 800648a:	69e3      	ldr	r3, [r4, #28]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006492:	b9b8      	cbnz	r0, 80064c4 <_Balloc+0x68>
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f605 	lsl.w	r6, r1, r5
 800649a:	1d72      	adds	r2, r6, #5
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fe0a 	bl	80070b8 <_calloc_r>
 80064a4:	b160      	cbz	r0, 80064c0 <_Balloc+0x64>
 80064a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064aa:	e00e      	b.n	80064ca <_Balloc+0x6e>
 80064ac:	2221      	movs	r2, #33	; 0x21
 80064ae:	2104      	movs	r1, #4
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fe01 	bl	80070b8 <_calloc_r>
 80064b6:	69e3      	ldr	r3, [r4, #28]
 80064b8:	60f0      	str	r0, [r6, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e4      	bne.n	800648a <_Balloc+0x2e>
 80064c0:	2000      	movs	r0, #0
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	6802      	ldr	r2, [r0, #0]
 80064c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064d0:	e7f7      	b.n	80064c2 <_Balloc+0x66>
 80064d2:	bf00      	nop
 80064d4:	08007fb8 	.word	0x08007fb8
 80064d8:	08008038 	.word	0x08008038

080064dc <_Bfree>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	69c6      	ldr	r6, [r0, #28]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b976      	cbnz	r6, 8006504 <_Bfree+0x28>
 80064e6:	2010      	movs	r0, #16
 80064e8:	f7ff ff04 	bl	80062f4 <malloc>
 80064ec:	4602      	mov	r2, r0
 80064ee:	61e8      	str	r0, [r5, #28]
 80064f0:	b920      	cbnz	r0, 80064fc <_Bfree+0x20>
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <_Bfree+0x3c>)
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <_Bfree+0x40>)
 80064f6:	218f      	movs	r1, #143	; 0x8f
 80064f8:	f000 fdc0 	bl	800707c <__assert_func>
 80064fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006500:	6006      	str	r6, [r0, #0]
 8006502:	60c6      	str	r6, [r0, #12]
 8006504:	b13c      	cbz	r4, 8006516 <_Bfree+0x3a>
 8006506:	69eb      	ldr	r3, [r5, #28]
 8006508:	6862      	ldr	r2, [r4, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	08007fb8 	.word	0x08007fb8
 800651c:	08008038 	.word	0x08008038

08006520 <__multadd>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	690d      	ldr	r5, [r1, #16]
 8006526:	4607      	mov	r7, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461e      	mov	r6, r3
 800652c:	f101 0c14 	add.w	ip, r1, #20
 8006530:	2000      	movs	r0, #0
 8006532:	f8dc 3000 	ldr.w	r3, [ip]
 8006536:	b299      	uxth	r1, r3
 8006538:	fb02 6101 	mla	r1, r2, r1, r6
 800653c:	0c1e      	lsrs	r6, r3, #16
 800653e:	0c0b      	lsrs	r3, r1, #16
 8006540:	fb02 3306 	mla	r3, r2, r6, r3
 8006544:	b289      	uxth	r1, r1
 8006546:	3001      	adds	r0, #1
 8006548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800654c:	4285      	cmp	r5, r0
 800654e:	f84c 1b04 	str.w	r1, [ip], #4
 8006552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006556:	dcec      	bgt.n	8006532 <__multadd+0x12>
 8006558:	b30e      	cbz	r6, 800659e <__multadd+0x7e>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	42ab      	cmp	r3, r5
 800655e:	dc19      	bgt.n	8006594 <__multadd+0x74>
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	4638      	mov	r0, r7
 8006564:	3101      	adds	r1, #1
 8006566:	f7ff ff79 	bl	800645c <_Balloc>
 800656a:	4680      	mov	r8, r0
 800656c:	b928      	cbnz	r0, 800657a <__multadd+0x5a>
 800656e:	4602      	mov	r2, r0
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <__multadd+0x84>)
 8006572:	480d      	ldr	r0, [pc, #52]	; (80065a8 <__multadd+0x88>)
 8006574:	21ba      	movs	r1, #186	; 0xba
 8006576:	f000 fd81 	bl	800707c <__assert_func>
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	3202      	adds	r2, #2
 800657e:	f104 010c 	add.w	r1, r4, #12
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	300c      	adds	r0, #12
 8006586:	f000 fd6b 	bl	8007060 <memcpy>
 800658a:	4621      	mov	r1, r4
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <_Bfree>
 8006592:	4644      	mov	r4, r8
 8006594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006598:	3501      	adds	r5, #1
 800659a:	615e      	str	r6, [r3, #20]
 800659c:	6125      	str	r5, [r4, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	08008027 	.word	0x08008027
 80065a8:	08008038 	.word	0x08008038

080065ac <__hi0bits>:
 80065ac:	0c03      	lsrs	r3, r0, #16
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	b9d3      	cbnz	r3, 80065e8 <__hi0bits+0x3c>
 80065b2:	0400      	lsls	r0, r0, #16
 80065b4:	2310      	movs	r3, #16
 80065b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065ba:	bf04      	itt	eq
 80065bc:	0200      	lsleq	r0, r0, #8
 80065be:	3308      	addeq	r3, #8
 80065c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065c4:	bf04      	itt	eq
 80065c6:	0100      	lsleq	r0, r0, #4
 80065c8:	3304      	addeq	r3, #4
 80065ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065ce:	bf04      	itt	eq
 80065d0:	0080      	lsleq	r0, r0, #2
 80065d2:	3302      	addeq	r3, #2
 80065d4:	2800      	cmp	r0, #0
 80065d6:	db05      	blt.n	80065e4 <__hi0bits+0x38>
 80065d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065dc:	f103 0301 	add.w	r3, r3, #1
 80065e0:	bf08      	it	eq
 80065e2:	2320      	moveq	r3, #32
 80065e4:	4618      	mov	r0, r3
 80065e6:	4770      	bx	lr
 80065e8:	2300      	movs	r3, #0
 80065ea:	e7e4      	b.n	80065b6 <__hi0bits+0xa>

080065ec <__lo0bits>:
 80065ec:	6803      	ldr	r3, [r0, #0]
 80065ee:	f013 0207 	ands.w	r2, r3, #7
 80065f2:	d00c      	beq.n	800660e <__lo0bits+0x22>
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	d422      	bmi.n	800663e <__lo0bits+0x52>
 80065f8:	079a      	lsls	r2, r3, #30
 80065fa:	bf49      	itett	mi
 80065fc:	085b      	lsrmi	r3, r3, #1
 80065fe:	089b      	lsrpl	r3, r3, #2
 8006600:	6003      	strmi	r3, [r0, #0]
 8006602:	2201      	movmi	r2, #1
 8006604:	bf5c      	itt	pl
 8006606:	6003      	strpl	r3, [r0, #0]
 8006608:	2202      	movpl	r2, #2
 800660a:	4610      	mov	r0, r2
 800660c:	4770      	bx	lr
 800660e:	b299      	uxth	r1, r3
 8006610:	b909      	cbnz	r1, 8006616 <__lo0bits+0x2a>
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	2210      	movs	r2, #16
 8006616:	b2d9      	uxtb	r1, r3
 8006618:	b909      	cbnz	r1, 800661e <__lo0bits+0x32>
 800661a:	3208      	adds	r2, #8
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	0719      	lsls	r1, r3, #28
 8006620:	bf04      	itt	eq
 8006622:	091b      	lsreq	r3, r3, #4
 8006624:	3204      	addeq	r2, #4
 8006626:	0799      	lsls	r1, r3, #30
 8006628:	bf04      	itt	eq
 800662a:	089b      	lsreq	r3, r3, #2
 800662c:	3202      	addeq	r2, #2
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d403      	bmi.n	800663a <__lo0bits+0x4e>
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	f102 0201 	add.w	r2, r2, #1
 8006638:	d003      	beq.n	8006642 <__lo0bits+0x56>
 800663a:	6003      	str	r3, [r0, #0]
 800663c:	e7e5      	b.n	800660a <__lo0bits+0x1e>
 800663e:	2200      	movs	r2, #0
 8006640:	e7e3      	b.n	800660a <__lo0bits+0x1e>
 8006642:	2220      	movs	r2, #32
 8006644:	e7e1      	b.n	800660a <__lo0bits+0x1e>
	...

08006648 <__i2b>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	2101      	movs	r1, #1
 800664e:	f7ff ff05 	bl	800645c <_Balloc>
 8006652:	4602      	mov	r2, r0
 8006654:	b928      	cbnz	r0, 8006662 <__i2b+0x1a>
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <__i2b+0x24>)
 8006658:	4805      	ldr	r0, [pc, #20]	; (8006670 <__i2b+0x28>)
 800665a:	f240 1145 	movw	r1, #325	; 0x145
 800665e:	f000 fd0d 	bl	800707c <__assert_func>
 8006662:	2301      	movs	r3, #1
 8006664:	6144      	str	r4, [r0, #20]
 8006666:	6103      	str	r3, [r0, #16]
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	08008027 	.word	0x08008027
 8006670:	08008038 	.word	0x08008038

08006674 <__multiply>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4691      	mov	r9, r2
 800667a:	690a      	ldr	r2, [r1, #16]
 800667c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	bfb8      	it	lt
 8006684:	460b      	movlt	r3, r1
 8006686:	460c      	mov	r4, r1
 8006688:	bfbc      	itt	lt
 800668a:	464c      	movlt	r4, r9
 800668c:	4699      	movlt	r9, r3
 800668e:	6927      	ldr	r7, [r4, #16]
 8006690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	6861      	ldr	r1, [r4, #4]
 8006698:	eb07 060a 	add.w	r6, r7, sl
 800669c:	42b3      	cmp	r3, r6
 800669e:	b085      	sub	sp, #20
 80066a0:	bfb8      	it	lt
 80066a2:	3101      	addlt	r1, #1
 80066a4:	f7ff feda 	bl	800645c <_Balloc>
 80066a8:	b930      	cbnz	r0, 80066b8 <__multiply+0x44>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <__multiply+0x14c>)
 80066ae:	4845      	ldr	r0, [pc, #276]	; (80067c4 <__multiply+0x150>)
 80066b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066b4:	f000 fce2 	bl	800707c <__assert_func>
 80066b8:	f100 0514 	add.w	r5, r0, #20
 80066bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066c0:	462b      	mov	r3, r5
 80066c2:	2200      	movs	r2, #0
 80066c4:	4543      	cmp	r3, r8
 80066c6:	d321      	bcc.n	800670c <__multiply+0x98>
 80066c8:	f104 0314 	add.w	r3, r4, #20
 80066cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066d0:	f109 0314 	add.w	r3, r9, #20
 80066d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066d8:	9202      	str	r2, [sp, #8]
 80066da:	1b3a      	subs	r2, r7, r4
 80066dc:	3a15      	subs	r2, #21
 80066de:	f022 0203 	bic.w	r2, r2, #3
 80066e2:	3204      	adds	r2, #4
 80066e4:	f104 0115 	add.w	r1, r4, #21
 80066e8:	428f      	cmp	r7, r1
 80066ea:	bf38      	it	cc
 80066ec:	2204      	movcc	r2, #4
 80066ee:	9201      	str	r2, [sp, #4]
 80066f0:	9a02      	ldr	r2, [sp, #8]
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d80c      	bhi.n	8006712 <__multiply+0x9e>
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	dd03      	ble.n	8006704 <__multiply+0x90>
 80066fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006700:	2b00      	cmp	r3, #0
 8006702:	d05b      	beq.n	80067bc <__multiply+0x148>
 8006704:	6106      	str	r6, [r0, #16]
 8006706:	b005      	add	sp, #20
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	f843 2b04 	str.w	r2, [r3], #4
 8006710:	e7d8      	b.n	80066c4 <__multiply+0x50>
 8006712:	f8b3 a000 	ldrh.w	sl, [r3]
 8006716:	f1ba 0f00 	cmp.w	sl, #0
 800671a:	d024      	beq.n	8006766 <__multiply+0xf2>
 800671c:	f104 0e14 	add.w	lr, r4, #20
 8006720:	46a9      	mov	r9, r5
 8006722:	f04f 0c00 	mov.w	ip, #0
 8006726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800672a:	f8d9 1000 	ldr.w	r1, [r9]
 800672e:	fa1f fb82 	uxth.w	fp, r2
 8006732:	b289      	uxth	r1, r1
 8006734:	fb0a 110b 	mla	r1, sl, fp, r1
 8006738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800673c:	f8d9 2000 	ldr.w	r2, [r9]
 8006740:	4461      	add	r1, ip
 8006742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006746:	fb0a c20b 	mla	r2, sl, fp, ip
 800674a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800674e:	b289      	uxth	r1, r1
 8006750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006754:	4577      	cmp	r7, lr
 8006756:	f849 1b04 	str.w	r1, [r9], #4
 800675a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800675e:	d8e2      	bhi.n	8006726 <__multiply+0xb2>
 8006760:	9a01      	ldr	r2, [sp, #4]
 8006762:	f845 c002 	str.w	ip, [r5, r2]
 8006766:	9a03      	ldr	r2, [sp, #12]
 8006768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800676c:	3304      	adds	r3, #4
 800676e:	f1b9 0f00 	cmp.w	r9, #0
 8006772:	d021      	beq.n	80067b8 <__multiply+0x144>
 8006774:	6829      	ldr	r1, [r5, #0]
 8006776:	f104 0c14 	add.w	ip, r4, #20
 800677a:	46ae      	mov	lr, r5
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	f8bc b000 	ldrh.w	fp, [ip]
 8006784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006788:	fb09 220b 	mla	r2, r9, fp, r2
 800678c:	4452      	add	r2, sl
 800678e:	b289      	uxth	r1, r1
 8006790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006794:	f84e 1b04 	str.w	r1, [lr], #4
 8006798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800679c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067a0:	f8be 1000 	ldrh.w	r1, [lr]
 80067a4:	fb09 110a 	mla	r1, r9, sl, r1
 80067a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067ac:	4567      	cmp	r7, ip
 80067ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067b2:	d8e5      	bhi.n	8006780 <__multiply+0x10c>
 80067b4:	9a01      	ldr	r2, [sp, #4]
 80067b6:	50a9      	str	r1, [r5, r2]
 80067b8:	3504      	adds	r5, #4
 80067ba:	e799      	b.n	80066f0 <__multiply+0x7c>
 80067bc:	3e01      	subs	r6, #1
 80067be:	e79b      	b.n	80066f8 <__multiply+0x84>
 80067c0:	08008027 	.word	0x08008027
 80067c4:	08008038 	.word	0x08008038

080067c8 <__pow5mult>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4615      	mov	r5, r2
 80067ce:	f012 0203 	ands.w	r2, r2, #3
 80067d2:	4606      	mov	r6, r0
 80067d4:	460f      	mov	r7, r1
 80067d6:	d007      	beq.n	80067e8 <__pow5mult+0x20>
 80067d8:	4c25      	ldr	r4, [pc, #148]	; (8006870 <__pow5mult+0xa8>)
 80067da:	3a01      	subs	r2, #1
 80067dc:	2300      	movs	r3, #0
 80067de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067e2:	f7ff fe9d 	bl	8006520 <__multadd>
 80067e6:	4607      	mov	r7, r0
 80067e8:	10ad      	asrs	r5, r5, #2
 80067ea:	d03d      	beq.n	8006868 <__pow5mult+0xa0>
 80067ec:	69f4      	ldr	r4, [r6, #28]
 80067ee:	b97c      	cbnz	r4, 8006810 <__pow5mult+0x48>
 80067f0:	2010      	movs	r0, #16
 80067f2:	f7ff fd7f 	bl	80062f4 <malloc>
 80067f6:	4602      	mov	r2, r0
 80067f8:	61f0      	str	r0, [r6, #28]
 80067fa:	b928      	cbnz	r0, 8006808 <__pow5mult+0x40>
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <__pow5mult+0xac>)
 80067fe:	481e      	ldr	r0, [pc, #120]	; (8006878 <__pow5mult+0xb0>)
 8006800:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006804:	f000 fc3a 	bl	800707c <__assert_func>
 8006808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800680c:	6004      	str	r4, [r0, #0]
 800680e:	60c4      	str	r4, [r0, #12]
 8006810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006818:	b94c      	cbnz	r4, 800682e <__pow5mult+0x66>
 800681a:	f240 2171 	movw	r1, #625	; 0x271
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ff12 	bl	8006648 <__i2b>
 8006824:	2300      	movs	r3, #0
 8006826:	f8c8 0008 	str.w	r0, [r8, #8]
 800682a:	4604      	mov	r4, r0
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	07eb      	lsls	r3, r5, #31
 8006834:	d50a      	bpl.n	800684c <__pow5mult+0x84>
 8006836:	4639      	mov	r1, r7
 8006838:	4622      	mov	r2, r4
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ff1a 	bl	8006674 <__multiply>
 8006840:	4639      	mov	r1, r7
 8006842:	4680      	mov	r8, r0
 8006844:	4630      	mov	r0, r6
 8006846:	f7ff fe49 	bl	80064dc <_Bfree>
 800684a:	4647      	mov	r7, r8
 800684c:	106d      	asrs	r5, r5, #1
 800684e:	d00b      	beq.n	8006868 <__pow5mult+0xa0>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	b938      	cbnz	r0, 8006864 <__pow5mult+0x9c>
 8006854:	4622      	mov	r2, r4
 8006856:	4621      	mov	r1, r4
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff ff0b 	bl	8006674 <__multiply>
 800685e:	6020      	str	r0, [r4, #0]
 8006860:	f8c0 9000 	str.w	r9, [r0]
 8006864:	4604      	mov	r4, r0
 8006866:	e7e4      	b.n	8006832 <__pow5mult+0x6a>
 8006868:	4638      	mov	r0, r7
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	bf00      	nop
 8006870:	08008188 	.word	0x08008188
 8006874:	08007fb8 	.word	0x08007fb8
 8006878:	08008038 	.word	0x08008038

0800687c <__lshift>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	6849      	ldr	r1, [r1, #4]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	4607      	mov	r7, r0
 800688e:	4691      	mov	r9, r2
 8006890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006894:	f108 0601 	add.w	r6, r8, #1
 8006898:	42b3      	cmp	r3, r6
 800689a:	db0b      	blt.n	80068b4 <__lshift+0x38>
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff fddd 	bl	800645c <_Balloc>
 80068a2:	4605      	mov	r5, r0
 80068a4:	b948      	cbnz	r0, 80068ba <__lshift+0x3e>
 80068a6:	4602      	mov	r2, r0
 80068a8:	4b28      	ldr	r3, [pc, #160]	; (800694c <__lshift+0xd0>)
 80068aa:	4829      	ldr	r0, [pc, #164]	; (8006950 <__lshift+0xd4>)
 80068ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068b0:	f000 fbe4 	bl	800707c <__assert_func>
 80068b4:	3101      	adds	r1, #1
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	e7ee      	b.n	8006898 <__lshift+0x1c>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f100 0114 	add.w	r1, r0, #20
 80068c0:	f100 0210 	add.w	r2, r0, #16
 80068c4:	4618      	mov	r0, r3
 80068c6:	4553      	cmp	r3, sl
 80068c8:	db33      	blt.n	8006932 <__lshift+0xb6>
 80068ca:	6920      	ldr	r0, [r4, #16]
 80068cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068d0:	f104 0314 	add.w	r3, r4, #20
 80068d4:	f019 091f 	ands.w	r9, r9, #31
 80068d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068e0:	d02b      	beq.n	800693a <__lshift+0xbe>
 80068e2:	f1c9 0e20 	rsb	lr, r9, #32
 80068e6:	468a      	mov	sl, r1
 80068e8:	2200      	movs	r2, #0
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	fa00 f009 	lsl.w	r0, r0, r9
 80068f0:	4310      	orrs	r0, r2
 80068f2:	f84a 0b04 	str.w	r0, [sl], #4
 80068f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fa:	459c      	cmp	ip, r3
 80068fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006900:	d8f3      	bhi.n	80068ea <__lshift+0x6e>
 8006902:	ebac 0304 	sub.w	r3, ip, r4
 8006906:	3b15      	subs	r3, #21
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	3304      	adds	r3, #4
 800690e:	f104 0015 	add.w	r0, r4, #21
 8006912:	4584      	cmp	ip, r0
 8006914:	bf38      	it	cc
 8006916:	2304      	movcc	r3, #4
 8006918:	50ca      	str	r2, [r1, r3]
 800691a:	b10a      	cbz	r2, 8006920 <__lshift+0xa4>
 800691c:	f108 0602 	add.w	r6, r8, #2
 8006920:	3e01      	subs	r6, #1
 8006922:	4638      	mov	r0, r7
 8006924:	612e      	str	r6, [r5, #16]
 8006926:	4621      	mov	r1, r4
 8006928:	f7ff fdd8 	bl	80064dc <_Bfree>
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	f842 0f04 	str.w	r0, [r2, #4]!
 8006936:	3301      	adds	r3, #1
 8006938:	e7c5      	b.n	80068c6 <__lshift+0x4a>
 800693a:	3904      	subs	r1, #4
 800693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006940:	f841 2f04 	str.w	r2, [r1, #4]!
 8006944:	459c      	cmp	ip, r3
 8006946:	d8f9      	bhi.n	800693c <__lshift+0xc0>
 8006948:	e7ea      	b.n	8006920 <__lshift+0xa4>
 800694a:	bf00      	nop
 800694c:	08008027 	.word	0x08008027
 8006950:	08008038 	.word	0x08008038

08006954 <__mcmp>:
 8006954:	b530      	push	{r4, r5, lr}
 8006956:	6902      	ldr	r2, [r0, #16]
 8006958:	690c      	ldr	r4, [r1, #16]
 800695a:	1b12      	subs	r2, r2, r4
 800695c:	d10e      	bne.n	800697c <__mcmp+0x28>
 800695e:	f100 0314 	add.w	r3, r0, #20
 8006962:	3114      	adds	r1, #20
 8006964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800696c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006974:	42a5      	cmp	r5, r4
 8006976:	d003      	beq.n	8006980 <__mcmp+0x2c>
 8006978:	d305      	bcc.n	8006986 <__mcmp+0x32>
 800697a:	2201      	movs	r2, #1
 800697c:	4610      	mov	r0, r2
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	4283      	cmp	r3, r0
 8006982:	d3f3      	bcc.n	800696c <__mcmp+0x18>
 8006984:	e7fa      	b.n	800697c <__mcmp+0x28>
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	e7f7      	b.n	800697c <__mcmp+0x28>

0800698c <__mdiff>:
 800698c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	4606      	mov	r6, r0
 8006994:	4611      	mov	r1, r2
 8006996:	4620      	mov	r0, r4
 8006998:	4690      	mov	r8, r2
 800699a:	f7ff ffdb 	bl	8006954 <__mcmp>
 800699e:	1e05      	subs	r5, r0, #0
 80069a0:	d110      	bne.n	80069c4 <__mdiff+0x38>
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fd59 	bl	800645c <_Balloc>
 80069aa:	b930      	cbnz	r0, 80069ba <__mdiff+0x2e>
 80069ac:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <__mdiff+0x10c>)
 80069ae:	4602      	mov	r2, r0
 80069b0:	f240 2137 	movw	r1, #567	; 0x237
 80069b4:	4839      	ldr	r0, [pc, #228]	; (8006a9c <__mdiff+0x110>)
 80069b6:	f000 fb61 	bl	800707c <__assert_func>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	bfa4      	itt	ge
 80069c6:	4643      	movge	r3, r8
 80069c8:	46a0      	movge	r8, r4
 80069ca:	4630      	mov	r0, r6
 80069cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069d0:	bfa6      	itte	ge
 80069d2:	461c      	movge	r4, r3
 80069d4:	2500      	movge	r5, #0
 80069d6:	2501      	movlt	r5, #1
 80069d8:	f7ff fd40 	bl	800645c <_Balloc>
 80069dc:	b920      	cbnz	r0, 80069e8 <__mdiff+0x5c>
 80069de:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <__mdiff+0x10c>)
 80069e0:	4602      	mov	r2, r0
 80069e2:	f240 2145 	movw	r1, #581	; 0x245
 80069e6:	e7e5      	b.n	80069b4 <__mdiff+0x28>
 80069e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069ec:	6926      	ldr	r6, [r4, #16]
 80069ee:	60c5      	str	r5, [r0, #12]
 80069f0:	f104 0914 	add.w	r9, r4, #20
 80069f4:	f108 0514 	add.w	r5, r8, #20
 80069f8:	f100 0e14 	add.w	lr, r0, #20
 80069fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a04:	f108 0210 	add.w	r2, r8, #16
 8006a08:	46f2      	mov	sl, lr
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a14:	fa11 f88b 	uxtah	r8, r1, fp
 8006a18:	b299      	uxth	r1, r3
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	eba8 0801 	sub.w	r8, r8, r1
 8006a20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a28:	fa1f f888 	uxth.w	r8, r8
 8006a2c:	1419      	asrs	r1, r3, #16
 8006a2e:	454e      	cmp	r6, r9
 8006a30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a34:	f84a 3b04 	str.w	r3, [sl], #4
 8006a38:	d8e8      	bhi.n	8006a0c <__mdiff+0x80>
 8006a3a:	1b33      	subs	r3, r6, r4
 8006a3c:	3b15      	subs	r3, #21
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	3304      	adds	r3, #4
 8006a44:	3415      	adds	r4, #21
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	bf38      	it	cc
 8006a4a:	2304      	movcc	r3, #4
 8006a4c:	441d      	add	r5, r3
 8006a4e:	4473      	add	r3, lr
 8006a50:	469e      	mov	lr, r3
 8006a52:	462e      	mov	r6, r5
 8006a54:	4566      	cmp	r6, ip
 8006a56:	d30e      	bcc.n	8006a76 <__mdiff+0xea>
 8006a58:	f10c 0203 	add.w	r2, ip, #3
 8006a5c:	1b52      	subs	r2, r2, r5
 8006a5e:	f022 0203 	bic.w	r2, r2, #3
 8006a62:	3d03      	subs	r5, #3
 8006a64:	45ac      	cmp	ip, r5
 8006a66:	bf38      	it	cc
 8006a68:	2200      	movcc	r2, #0
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a70:	b17a      	cbz	r2, 8006a92 <__mdiff+0x106>
 8006a72:	6107      	str	r7, [r0, #16]
 8006a74:	e7a4      	b.n	80069c0 <__mdiff+0x34>
 8006a76:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a7a:	fa11 f288 	uxtah	r2, r1, r8
 8006a7e:	1414      	asrs	r4, r2, #16
 8006a80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a84:	b292      	uxth	r2, r2
 8006a86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a8a:	f84e 2b04 	str.w	r2, [lr], #4
 8006a8e:	1421      	asrs	r1, r4, #16
 8006a90:	e7e0      	b.n	8006a54 <__mdiff+0xc8>
 8006a92:	3f01      	subs	r7, #1
 8006a94:	e7ea      	b.n	8006a6c <__mdiff+0xe0>
 8006a96:	bf00      	nop
 8006a98:	08008027 	.word	0x08008027
 8006a9c:	08008038 	.word	0x08008038

08006aa0 <__d2b>:
 8006aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	ec59 8b10 	vmov	r8, r9, d0
 8006aac:	4616      	mov	r6, r2
 8006aae:	f7ff fcd5 	bl	800645c <_Balloc>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	b930      	cbnz	r0, 8006ac4 <__d2b+0x24>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <__d2b+0xac>)
 8006aba:	4825      	ldr	r0, [pc, #148]	; (8006b50 <__d2b+0xb0>)
 8006abc:	f240 310f 	movw	r1, #783	; 0x30f
 8006ac0:	f000 fadc 	bl	800707c <__assert_func>
 8006ac4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006acc:	bb2d      	cbnz	r5, 8006b1a <__d2b+0x7a>
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ad4:	d026      	beq.n	8006b24 <__d2b+0x84>
 8006ad6:	4668      	mov	r0, sp
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	f7ff fd87 	bl	80065ec <__lo0bits>
 8006ade:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ae2:	b1e8      	cbz	r0, 8006b20 <__d2b+0x80>
 8006ae4:	f1c0 0320 	rsb	r3, r0, #32
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	430b      	orrs	r3, r1
 8006aee:	40c2      	lsrs	r2, r0
 8006af0:	6163      	str	r3, [r4, #20]
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2202      	movne	r2, #2
 8006afe:	2201      	moveq	r2, #1
 8006b00:	6122      	str	r2, [r4, #16]
 8006b02:	b1bd      	cbz	r5, 8006b34 <__d2b+0x94>
 8006b04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b08:	4405      	add	r5, r0
 8006b0a:	603d      	str	r5, [r7, #0]
 8006b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b10:	6030      	str	r0, [r6, #0]
 8006b12:	4620      	mov	r0, r4
 8006b14:	b003      	add	sp, #12
 8006b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1e:	e7d6      	b.n	8006ace <__d2b+0x2e>
 8006b20:	6161      	str	r1, [r4, #20]
 8006b22:	e7e7      	b.n	8006af4 <__d2b+0x54>
 8006b24:	a801      	add	r0, sp, #4
 8006b26:	f7ff fd61 	bl	80065ec <__lo0bits>
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	6163      	str	r3, [r4, #20]
 8006b2e:	3020      	adds	r0, #32
 8006b30:	2201      	movs	r2, #1
 8006b32:	e7e5      	b.n	8006b00 <__d2b+0x60>
 8006b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b3c:	6038      	str	r0, [r7, #0]
 8006b3e:	6918      	ldr	r0, [r3, #16]
 8006b40:	f7ff fd34 	bl	80065ac <__hi0bits>
 8006b44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b48:	e7e2      	b.n	8006b10 <__d2b+0x70>
 8006b4a:	bf00      	nop
 8006b4c:	08008027 	.word	0x08008027
 8006b50:	08008038 	.word	0x08008038

08006b54 <__sfputc_r>:
 8006b54:	6893      	ldr	r3, [r2, #8]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	b410      	push	{r4}
 8006b5c:	6093      	str	r3, [r2, #8]
 8006b5e:	da08      	bge.n	8006b72 <__sfputc_r+0x1e>
 8006b60:	6994      	ldr	r4, [r2, #24]
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	db01      	blt.n	8006b6a <__sfputc_r+0x16>
 8006b66:	290a      	cmp	r1, #10
 8006b68:	d103      	bne.n	8006b72 <__sfputc_r+0x1e>
 8006b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6e:	f7fe bbe4 	b.w	800533a <__swbuf_r>
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	1c58      	adds	r0, r3, #1
 8006b76:	6010      	str	r0, [r2, #0]
 8006b78:	7019      	strb	r1, [r3, #0]
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <__sfputs_r>:
 8006b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	18d5      	adds	r5, r2, r3
 8006b8c:	42ac      	cmp	r4, r5
 8006b8e:	d101      	bne.n	8006b94 <__sfputs_r+0x12>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e007      	b.n	8006ba4 <__sfputs_r+0x22>
 8006b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ffda 	bl	8006b54 <__sfputc_r>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d1f3      	bne.n	8006b8c <__sfputs_r+0xa>
 8006ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ba8 <_vfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	460d      	mov	r5, r1
 8006bae:	b09d      	sub	sp, #116	; 0x74
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4698      	mov	r8, r3
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	b118      	cbz	r0, 8006bc0 <_vfiprintf_r+0x18>
 8006bb8:	6a03      	ldr	r3, [r0, #32]
 8006bba:	b90b      	cbnz	r3, 8006bc0 <_vfiprintf_r+0x18>
 8006bbc:	f7fe fad6 	bl	800516c <__sinit>
 8006bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d405      	bmi.n	8006bd2 <_vfiprintf_r+0x2a>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	059a      	lsls	r2, r3, #22
 8006bca:	d402      	bmi.n	8006bd2 <_vfiprintf_r+0x2a>
 8006bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bce:	f7fe fcc6 	bl	800555e <__retarget_lock_acquire_recursive>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	071b      	lsls	r3, r3, #28
 8006bd6:	d501      	bpl.n	8006bdc <_vfiprintf_r+0x34>
 8006bd8:	692b      	ldr	r3, [r5, #16]
 8006bda:	b99b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x5c>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7fe fbe8 	bl	80053b4 <__swsetup_r>
 8006be4:	b170      	cbz	r0, 8006c04 <_vfiprintf_r+0x5c>
 8006be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006be8:	07dc      	lsls	r4, r3, #31
 8006bea:	d504      	bpl.n	8006bf6 <_vfiprintf_r+0x4e>
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	b01d      	add	sp, #116	; 0x74
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d4f7      	bmi.n	8006bec <_vfiprintf_r+0x44>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfe:	f7fe fcaf 	bl	8005560 <__retarget_lock_release_recursive>
 8006c02:	e7f3      	b.n	8006bec <_vfiprintf_r+0x44>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9309      	str	r3, [sp, #36]	; 0x24
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c12:	2330      	movs	r3, #48	; 0x30
 8006c14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006dc8 <_vfiprintf_r+0x220>
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	f04f 0901 	mov.w	r9, #1
 8006c20:	4623      	mov	r3, r4
 8006c22:	469a      	mov	sl, r3
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	b10a      	cbz	r2, 8006c2e <_vfiprintf_r+0x86>
 8006c2a:	2a25      	cmp	r2, #37	; 0x25
 8006c2c:	d1f9      	bne.n	8006c22 <_vfiprintf_r+0x7a>
 8006c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c32:	d00b      	beq.n	8006c4c <_vfiprintf_r+0xa4>
 8006c34:	465b      	mov	r3, fp
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ffa1 	bl	8006b82 <__sfputs_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	f000 80a9 	beq.w	8006d98 <_vfiprintf_r+0x1f0>
 8006c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c48:	445a      	add	r2, fp
 8006c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a1 	beq.w	8006d98 <_vfiprintf_r+0x1f0>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6e:	4654      	mov	r4, sl
 8006c70:	2205      	movs	r2, #5
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4854      	ldr	r0, [pc, #336]	; (8006dc8 <_vfiprintf_r+0x220>)
 8006c78:	f7f9 faaa 	bl	80001d0 <memchr>
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	b9d8      	cbnz	r0, 8006cb8 <_vfiprintf_r+0x110>
 8006c80:	06d1      	lsls	r1, r2, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2320      	movmi	r3, #32
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	0713      	lsls	r3, r2, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	232b      	movmi	r3, #43	; 0x2b
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d015      	beq.n	8006cc8 <_vfiprintf_r+0x120>
 8006c9c:	9a07      	ldr	r2, [sp, #28]
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f04f 0c0a 	mov.w	ip, #10
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cac:	3b30      	subs	r3, #48	; 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d94d      	bls.n	8006d4e <_vfiprintf_r+0x1a6>
 8006cb2:	b1b0      	cbz	r0, 8006ce2 <_vfiprintf_r+0x13a>
 8006cb4:	9207      	str	r2, [sp, #28]
 8006cb6:	e014      	b.n	8006ce2 <_vfiprintf_r+0x13a>
 8006cb8:	eba0 0308 	sub.w	r3, r0, r8
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	e7d2      	b.n	8006c6e <_vfiprintf_r+0xc6>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d19      	adds	r1, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbb      	ittet	lt
 8006cd4:	425b      	neglt	r3, r3
 8006cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cda:	9307      	strge	r3, [sp, #28]
 8006cdc:	9307      	strlt	r3, [sp, #28]
 8006cde:	bfb8      	it	lt
 8006ce0:	9204      	strlt	r2, [sp, #16]
 8006ce2:	7823      	ldrb	r3, [r4, #0]
 8006ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce6:	d10c      	bne.n	8006d02 <_vfiprintf_r+0x15a>
 8006ce8:	7863      	ldrb	r3, [r4, #1]
 8006cea:	2b2a      	cmp	r3, #42	; 0x2a
 8006cec:	d134      	bne.n	8006d58 <_vfiprintf_r+0x1b0>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cfe:	3402      	adds	r4, #2
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006dd8 <_vfiprintf_r+0x230>
 8006d06:	7821      	ldrb	r1, [r4, #0]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	f7f9 fa60 	bl	80001d0 <memchr>
 8006d10:	b138      	cbz	r0, 8006d22 <_vfiprintf_r+0x17a>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	2240      	movs	r2, #64	; 0x40
 8006d1a:	4082      	lsls	r2, r0
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	3401      	adds	r4, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	4829      	ldr	r0, [pc, #164]	; (8006dcc <_vfiprintf_r+0x224>)
 8006d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2c:	2206      	movs	r2, #6
 8006d2e:	f7f9 fa4f 	bl	80001d0 <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d03f      	beq.n	8006db6 <_vfiprintf_r+0x20e>
 8006d36:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <_vfiprintf_r+0x228>)
 8006d38:	bb1b      	cbnz	r3, 8006d82 <_vfiprintf_r+0x1da>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	3308      	adds	r3, #8
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d48:	443b      	add	r3, r7
 8006d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4c:	e768      	b.n	8006c20 <_vfiprintf_r+0x78>
 8006d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d52:	460c      	mov	r4, r1
 8006d54:	2001      	movs	r0, #1
 8006d56:	e7a6      	b.n	8006ca6 <_vfiprintf_r+0xfe>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f04f 0c0a 	mov.w	ip, #10
 8006d64:	4620      	mov	r0, r4
 8006d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6a:	3a30      	subs	r2, #48	; 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d903      	bls.n	8006d78 <_vfiprintf_r+0x1d0>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c6      	beq.n	8006d02 <_vfiprintf_r+0x15a>
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	e7c4      	b.n	8006d02 <_vfiprintf_r+0x15a>
 8006d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7f0      	b.n	8006d64 <_vfiprintf_r+0x1bc>
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	462a      	mov	r2, r5
 8006d88:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <_vfiprintf_r+0x22c>)
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7fd fd9b 	bl	80048c8 <_printf_float>
 8006d92:	4607      	mov	r7, r0
 8006d94:	1c78      	adds	r0, r7, #1
 8006d96:	d1d6      	bne.n	8006d46 <_vfiprintf_r+0x19e>
 8006d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9a:	07d9      	lsls	r1, r3, #31
 8006d9c:	d405      	bmi.n	8006daa <_vfiprintf_r+0x202>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	059a      	lsls	r2, r3, #22
 8006da2:	d402      	bmi.n	8006daa <_vfiprintf_r+0x202>
 8006da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da6:	f7fe fbdb 	bl	8005560 <__retarget_lock_release_recursive>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	065b      	lsls	r3, r3, #25
 8006dae:	f53f af1d 	bmi.w	8006bec <_vfiprintf_r+0x44>
 8006db2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db4:	e71c      	b.n	8006bf0 <_vfiprintf_r+0x48>
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <_vfiprintf_r+0x22c>)
 8006dbe:	a904      	add	r1, sp, #16
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7fe f825 	bl	8004e10 <_printf_i>
 8006dc6:	e7e4      	b.n	8006d92 <_vfiprintf_r+0x1ea>
 8006dc8:	08008194 	.word	0x08008194
 8006dcc:	0800819e 	.word	0x0800819e
 8006dd0:	080048c9 	.word	0x080048c9
 8006dd4:	08006b83 	.word	0x08006b83
 8006dd8:	0800819a 	.word	0x0800819a

08006ddc <__sflush_r>:
 8006ddc:	898a      	ldrh	r2, [r1, #12]
 8006dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	4605      	mov	r5, r0
 8006de4:	0710      	lsls	r0, r2, #28
 8006de6:	460c      	mov	r4, r1
 8006de8:	d458      	bmi.n	8006e9c <__sflush_r+0xc0>
 8006dea:	684b      	ldr	r3, [r1, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dc05      	bgt.n	8006dfc <__sflush_r+0x20>
 8006df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dc02      	bgt.n	8006dfc <__sflush_r+0x20>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	d0f9      	beq.n	8006df6 <__sflush_r+0x1a>
 8006e02:	2300      	movs	r3, #0
 8006e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e08:	682f      	ldr	r7, [r5, #0]
 8006e0a:	6a21      	ldr	r1, [r4, #32]
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	d032      	beq.n	8006e76 <__sflush_r+0x9a>
 8006e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	075a      	lsls	r2, r3, #29
 8006e16:	d505      	bpl.n	8006e24 <__sflush_r+0x48>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	1ac0      	subs	r0, r0, r3
 8006e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e1e:	b10b      	cbz	r3, 8006e24 <__sflush_r+0x48>
 8006e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e22:	1ac0      	subs	r0, r0, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	4602      	mov	r2, r0
 8006e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e2a:	6a21      	ldr	r1, [r4, #32]
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b0      	blx	r6
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	d106      	bne.n	8006e44 <__sflush_r+0x68>
 8006e36:	6829      	ldr	r1, [r5, #0]
 8006e38:	291d      	cmp	r1, #29
 8006e3a:	d82b      	bhi.n	8006e94 <__sflush_r+0xb8>
 8006e3c:	4a29      	ldr	r2, [pc, #164]	; (8006ee4 <__sflush_r+0x108>)
 8006e3e:	410a      	asrs	r2, r1
 8006e40:	07d6      	lsls	r6, r2, #31
 8006e42:	d427      	bmi.n	8006e94 <__sflush_r+0xb8>
 8006e44:	2200      	movs	r2, #0
 8006e46:	6062      	str	r2, [r4, #4]
 8006e48:	04d9      	lsls	r1, r3, #19
 8006e4a:	6922      	ldr	r2, [r4, #16]
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	d504      	bpl.n	8006e5a <__sflush_r+0x7e>
 8006e50:	1c42      	adds	r2, r0, #1
 8006e52:	d101      	bne.n	8006e58 <__sflush_r+0x7c>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b903      	cbnz	r3, 8006e5a <__sflush_r+0x7e>
 8006e58:	6560      	str	r0, [r4, #84]	; 0x54
 8006e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e5c:	602f      	str	r7, [r5, #0]
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d0c9      	beq.n	8006df6 <__sflush_r+0x1a>
 8006e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e66:	4299      	cmp	r1, r3
 8006e68:	d002      	beq.n	8006e70 <__sflush_r+0x94>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7ff f9f6 	bl	800625c <_free_r>
 8006e70:	2000      	movs	r0, #0
 8006e72:	6360      	str	r0, [r4, #52]	; 0x34
 8006e74:	e7c0      	b.n	8006df8 <__sflush_r+0x1c>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b0      	blx	r6
 8006e7c:	1c41      	adds	r1, r0, #1
 8006e7e:	d1c8      	bne.n	8006e12 <__sflush_r+0x36>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0c5      	beq.n	8006e12 <__sflush_r+0x36>
 8006e86:	2b1d      	cmp	r3, #29
 8006e88:	d001      	beq.n	8006e8e <__sflush_r+0xb2>
 8006e8a:	2b16      	cmp	r3, #22
 8006e8c:	d101      	bne.n	8006e92 <__sflush_r+0xb6>
 8006e8e:	602f      	str	r7, [r5, #0]
 8006e90:	e7b1      	b.n	8006df6 <__sflush_r+0x1a>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	e7ad      	b.n	8006df8 <__sflush_r+0x1c>
 8006e9c:	690f      	ldr	r7, [r1, #16]
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	d0a9      	beq.n	8006df6 <__sflush_r+0x1a>
 8006ea2:	0793      	lsls	r3, r2, #30
 8006ea4:	680e      	ldr	r6, [r1, #0]
 8006ea6:	bf08      	it	eq
 8006ea8:	694b      	ldreq	r3, [r1, #20]
 8006eaa:	600f      	str	r7, [r1, #0]
 8006eac:	bf18      	it	ne
 8006eae:	2300      	movne	r3, #0
 8006eb0:	eba6 0807 	sub.w	r8, r6, r7
 8006eb4:	608b      	str	r3, [r1, #8]
 8006eb6:	f1b8 0f00 	cmp.w	r8, #0
 8006eba:	dd9c      	ble.n	8006df6 <__sflush_r+0x1a>
 8006ebc:	6a21      	ldr	r1, [r4, #32]
 8006ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ec0:	4643      	mov	r3, r8
 8006ec2:	463a      	mov	r2, r7
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b0      	blx	r6
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dc06      	bgt.n	8006eda <__sflush_r+0xfe>
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed8:	e78e      	b.n	8006df8 <__sflush_r+0x1c>
 8006eda:	4407      	add	r7, r0
 8006edc:	eba8 0800 	sub.w	r8, r8, r0
 8006ee0:	e7e9      	b.n	8006eb6 <__sflush_r+0xda>
 8006ee2:	bf00      	nop
 8006ee4:	dfbffffe 	.word	0xdfbffffe

08006ee8 <_fflush_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	690b      	ldr	r3, [r1, #16]
 8006eec:	4605      	mov	r5, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	b913      	cbnz	r3, 8006ef8 <_fflush_r+0x10>
 8006ef2:	2500      	movs	r5, #0
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	b118      	cbz	r0, 8006f02 <_fflush_r+0x1a>
 8006efa:	6a03      	ldr	r3, [r0, #32]
 8006efc:	b90b      	cbnz	r3, 8006f02 <_fflush_r+0x1a>
 8006efe:	f7fe f935 	bl	800516c <__sinit>
 8006f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f3      	beq.n	8006ef2 <_fflush_r+0xa>
 8006f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f0c:	07d0      	lsls	r0, r2, #31
 8006f0e:	d404      	bmi.n	8006f1a <_fflush_r+0x32>
 8006f10:	0599      	lsls	r1, r3, #22
 8006f12:	d402      	bmi.n	8006f1a <_fflush_r+0x32>
 8006f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f16:	f7fe fb22 	bl	800555e <__retarget_lock_acquire_recursive>
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	f7ff ff5d 	bl	8006ddc <__sflush_r>
 8006f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f24:	07da      	lsls	r2, r3, #31
 8006f26:	4605      	mov	r5, r0
 8006f28:	d4e4      	bmi.n	8006ef4 <_fflush_r+0xc>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	059b      	lsls	r3, r3, #22
 8006f2e:	d4e1      	bmi.n	8006ef4 <_fflush_r+0xc>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f7fe fb15 	bl	8005560 <__retarget_lock_release_recursive>
 8006f36:	e7dd      	b.n	8006ef4 <_fflush_r+0xc>

08006f38 <__swhatbuf_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	2900      	cmp	r1, #0
 8006f42:	b096      	sub	sp, #88	; 0x58
 8006f44:	4615      	mov	r5, r2
 8006f46:	461e      	mov	r6, r3
 8006f48:	da0d      	bge.n	8006f66 <__swhatbuf_r+0x2e>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	bf0c      	ite	eq
 8006f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f5a:	2340      	movne	r3, #64	; 0x40
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	6031      	str	r1, [r6, #0]
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	b016      	add	sp, #88	; 0x58
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	466a      	mov	r2, sp
 8006f68:	f000 f848 	bl	8006ffc <_fstat_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	dbec      	blt.n	8006f4a <__swhatbuf_r+0x12>
 8006f70:	9901      	ldr	r1, [sp, #4]
 8006f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f7a:	4259      	negs	r1, r3
 8006f7c:	4159      	adcs	r1, r3
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	e7eb      	b.n	8006f5c <__swhatbuf_r+0x24>

08006f84 <__smakebuf_r>:
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f88:	079d      	lsls	r5, r3, #30
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	d507      	bpl.n	8006fa0 <__smakebuf_r+0x1c>
 8006f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	6163      	str	r3, [r4, #20]
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	ab01      	add	r3, sp, #4
 8006fa2:	466a      	mov	r2, sp
 8006fa4:	f7ff ffc8 	bl	8006f38 <__swhatbuf_r>
 8006fa8:	9900      	ldr	r1, [sp, #0]
 8006faa:	4605      	mov	r5, r0
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff f9c9 	bl	8006344 <_malloc_r>
 8006fb2:	b948      	cbnz	r0, 8006fc8 <__smakebuf_r+0x44>
 8006fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb8:	059a      	lsls	r2, r3, #22
 8006fba:	d4ef      	bmi.n	8006f9c <__smakebuf_r+0x18>
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	e7e3      	b.n	8006f90 <__smakebuf_r+0xc>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	6020      	str	r0, [r4, #0]
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	6120      	str	r0, [r4, #16]
 8006fda:	b15b      	cbz	r3, 8006ff4 <__smakebuf_r+0x70>
 8006fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f81d 	bl	8007020 <_isatty_r>
 8006fe6:	b128      	cbz	r0, 8006ff4 <__smakebuf_r+0x70>
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	431d      	orrs	r5, r3
 8006ff8:	81a5      	strh	r5, [r4, #12]
 8006ffa:	e7cf      	b.n	8006f9c <__smakebuf_r+0x18>

08006ffc <_fstat_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_fstat_r+0x20>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fb f98c 	bl	8002326 <_fstat>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_fstat_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_fstat_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	20000410 	.word	0x20000410

08007020 <_isatty_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_isatty_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fb f98b 	bl	8002346 <_isatty>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_isatty_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_isatty_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000410 	.word	0x20000410

08007040 <_sbrk_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d06      	ldr	r5, [pc, #24]	; (800705c <_sbrk_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	f7fb f994 	bl	8002378 <_sbrk>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_sbrk_r+0x1a>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_sbrk_r+0x1a>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000410 	.word	0x20000410

08007060 <memcpy>:
 8007060:	440a      	add	r2, r1
 8007062:	4291      	cmp	r1, r2
 8007064:	f100 33ff 	add.w	r3, r0, #4294967295
 8007068:	d100      	bne.n	800706c <memcpy+0xc>
 800706a:	4770      	bx	lr
 800706c:	b510      	push	{r4, lr}
 800706e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007076:	4291      	cmp	r1, r2
 8007078:	d1f9      	bne.n	800706e <memcpy+0xe>
 800707a:	bd10      	pop	{r4, pc}

0800707c <__assert_func>:
 800707c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800707e:	4614      	mov	r4, r2
 8007080:	461a      	mov	r2, r3
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <__assert_func+0x2c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	68d8      	ldr	r0, [r3, #12]
 800708a:	b14c      	cbz	r4, 80070a0 <__assert_func+0x24>
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <__assert_func+0x30>)
 800708e:	9100      	str	r1, [sp, #0]
 8007090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007094:	4906      	ldr	r1, [pc, #24]	; (80070b0 <__assert_func+0x34>)
 8007096:	462b      	mov	r3, r5
 8007098:	f000 f844 	bl	8007124 <fiprintf>
 800709c:	f000 f854 	bl	8007148 <abort>
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <__assert_func+0x38>)
 80070a2:	461c      	mov	r4, r3
 80070a4:	e7f3      	b.n	800708e <__assert_func+0x12>
 80070a6:	bf00      	nop
 80070a8:	20000068 	.word	0x20000068
 80070ac:	080081af 	.word	0x080081af
 80070b0:	080081bc 	.word	0x080081bc
 80070b4:	080081ea 	.word	0x080081ea

080070b8 <_calloc_r>:
 80070b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ba:	fba1 2402 	umull	r2, r4, r1, r2
 80070be:	b94c      	cbnz	r4, 80070d4 <_calloc_r+0x1c>
 80070c0:	4611      	mov	r1, r2
 80070c2:	9201      	str	r2, [sp, #4]
 80070c4:	f7ff f93e 	bl	8006344 <_malloc_r>
 80070c8:	9a01      	ldr	r2, [sp, #4]
 80070ca:	4605      	mov	r5, r0
 80070cc:	b930      	cbnz	r0, 80070dc <_calloc_r+0x24>
 80070ce:	4628      	mov	r0, r5
 80070d0:	b003      	add	sp, #12
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	220c      	movs	r2, #12
 80070d6:	6002      	str	r2, [r0, #0]
 80070d8:	2500      	movs	r5, #0
 80070da:	e7f8      	b.n	80070ce <_calloc_r+0x16>
 80070dc:	4621      	mov	r1, r4
 80070de:	f7fe f9c1 	bl	8005464 <memset>
 80070e2:	e7f4      	b.n	80070ce <_calloc_r+0x16>

080070e4 <__ascii_mbtowc>:
 80070e4:	b082      	sub	sp, #8
 80070e6:	b901      	cbnz	r1, 80070ea <__ascii_mbtowc+0x6>
 80070e8:	a901      	add	r1, sp, #4
 80070ea:	b142      	cbz	r2, 80070fe <__ascii_mbtowc+0x1a>
 80070ec:	b14b      	cbz	r3, 8007102 <__ascii_mbtowc+0x1e>
 80070ee:	7813      	ldrb	r3, [r2, #0]
 80070f0:	600b      	str	r3, [r1, #0]
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	1e10      	subs	r0, r2, #0
 80070f6:	bf18      	it	ne
 80070f8:	2001      	movne	r0, #1
 80070fa:	b002      	add	sp, #8
 80070fc:	4770      	bx	lr
 80070fe:	4610      	mov	r0, r2
 8007100:	e7fb      	b.n	80070fa <__ascii_mbtowc+0x16>
 8007102:	f06f 0001 	mvn.w	r0, #1
 8007106:	e7f8      	b.n	80070fa <__ascii_mbtowc+0x16>

08007108 <__ascii_wctomb>:
 8007108:	b149      	cbz	r1, 800711e <__ascii_wctomb+0x16>
 800710a:	2aff      	cmp	r2, #255	; 0xff
 800710c:	bf85      	ittet	hi
 800710e:	238a      	movhi	r3, #138	; 0x8a
 8007110:	6003      	strhi	r3, [r0, #0]
 8007112:	700a      	strbls	r2, [r1, #0]
 8007114:	f04f 30ff 	movhi.w	r0, #4294967295
 8007118:	bf98      	it	ls
 800711a:	2001      	movls	r0, #1
 800711c:	4770      	bx	lr
 800711e:	4608      	mov	r0, r1
 8007120:	4770      	bx	lr
	...

08007124 <fiprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b503      	push	{r0, r1, lr}
 8007128:	4601      	mov	r1, r0
 800712a:	ab03      	add	r3, sp, #12
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <fiprintf+0x20>)
 800712e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f7ff fd37 	bl	8006ba8 <_vfiprintf_r>
 800713a:	b002      	add	sp, #8
 800713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007140:	b003      	add	sp, #12
 8007142:	4770      	bx	lr
 8007144:	20000068 	.word	0x20000068

08007148 <abort>:
 8007148:	b508      	push	{r3, lr}
 800714a:	2006      	movs	r0, #6
 800714c:	f000 f82c 	bl	80071a8 <raise>
 8007150:	2001      	movs	r0, #1
 8007152:	f7fb f899 	bl	8002288 <_exit>

08007156 <_raise_r>:
 8007156:	291f      	cmp	r1, #31
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
 800715c:	460d      	mov	r5, r1
 800715e:	d904      	bls.n	800716a <_raise_r+0x14>
 8007160:	2316      	movs	r3, #22
 8007162:	6003      	str	r3, [r0, #0]
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	bd38      	pop	{r3, r4, r5, pc}
 800716a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800716c:	b112      	cbz	r2, 8007174 <_raise_r+0x1e>
 800716e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007172:	b94b      	cbnz	r3, 8007188 <_raise_r+0x32>
 8007174:	4620      	mov	r0, r4
 8007176:	f000 f831 	bl	80071dc <_getpid_r>
 800717a:	462a      	mov	r2, r5
 800717c:	4601      	mov	r1, r0
 800717e:	4620      	mov	r0, r4
 8007180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007184:	f000 b818 	b.w	80071b8 <_kill_r>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d00a      	beq.n	80071a2 <_raise_r+0x4c>
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	d103      	bne.n	8007198 <_raise_r+0x42>
 8007190:	2316      	movs	r3, #22
 8007192:	6003      	str	r3, [r0, #0]
 8007194:	2001      	movs	r0, #1
 8007196:	e7e7      	b.n	8007168 <_raise_r+0x12>
 8007198:	2400      	movs	r4, #0
 800719a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800719e:	4628      	mov	r0, r5
 80071a0:	4798      	blx	r3
 80071a2:	2000      	movs	r0, #0
 80071a4:	e7e0      	b.n	8007168 <_raise_r+0x12>
	...

080071a8 <raise>:
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <raise+0xc>)
 80071aa:	4601      	mov	r1, r0
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	f7ff bfd2 	b.w	8007156 <_raise_r>
 80071b2:	bf00      	nop
 80071b4:	20000068 	.word	0x20000068

080071b8 <_kill_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4d07      	ldr	r5, [pc, #28]	; (80071d8 <_kill_r+0x20>)
 80071bc:	2300      	movs	r3, #0
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	f7fb f84f 	bl	8002268 <_kill>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d102      	bne.n	80071d4 <_kill_r+0x1c>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	b103      	cbz	r3, 80071d4 <_kill_r+0x1c>
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	20000410 	.word	0x20000410

080071dc <_getpid_r>:
 80071dc:	f7fb b83c 	b.w	8002258 <_getpid>

080071e0 <asinf>:
 80071e0:	b508      	push	{r3, lr}
 80071e2:	ed2d 8b02 	vpush	{d8}
 80071e6:	eeb0 8a40 	vmov.f32	s16, s0
 80071ea:	f000 f899 	bl	8007320 <__ieee754_asinf>
 80071ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80071f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f6:	eef0 8a40 	vmov.f32	s17, s0
 80071fa:	d615      	bvs.n	8007228 <asinf+0x48>
 80071fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007200:	f000 f873 	bl	80072ea <fabsf>
 8007204:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007208:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007210:	dd0a      	ble.n	8007228 <asinf+0x48>
 8007212:	f7fe f979 	bl	8005508 <__errno>
 8007216:	ecbd 8b02 	vpop	{d8}
 800721a:	2321      	movs	r3, #33	; 0x21
 800721c:	6003      	str	r3, [r0, #0]
 800721e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007222:	4804      	ldr	r0, [pc, #16]	; (8007234 <asinf+0x54>)
 8007224:	f000 b876 	b.w	8007314 <nanf>
 8007228:	eeb0 0a68 	vmov.f32	s0, s17
 800722c:	ecbd 8b02 	vpop	{d8}
 8007230:	bd08      	pop	{r3, pc}
 8007232:	bf00      	nop
 8007234:	080081ea 	.word	0x080081ea

08007238 <atan2f>:
 8007238:	f000 b958 	b.w	80074ec <__ieee754_atan2f>

0800723c <powf>:
 800723c:	b508      	push	{r3, lr}
 800723e:	ed2d 8b04 	vpush	{d8-d9}
 8007242:	eeb0 8a60 	vmov.f32	s16, s1
 8007246:	eeb0 9a40 	vmov.f32	s18, s0
 800724a:	f000 f9ef 	bl	800762c <__ieee754_powf>
 800724e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007256:	eef0 8a40 	vmov.f32	s17, s0
 800725a:	d63e      	bvs.n	80072da <powf+0x9e>
 800725c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007264:	d112      	bne.n	800728c <powf+0x50>
 8007266:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	d039      	beq.n	80072e4 <powf+0xa8>
 8007270:	eeb0 0a48 	vmov.f32	s0, s16
 8007274:	f000 f840 	bl	80072f8 <finitef>
 8007278:	b378      	cbz	r0, 80072da <powf+0x9e>
 800727a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007282:	d52a      	bpl.n	80072da <powf+0x9e>
 8007284:	f7fe f940 	bl	8005508 <__errno>
 8007288:	2322      	movs	r3, #34	; 0x22
 800728a:	e014      	b.n	80072b6 <powf+0x7a>
 800728c:	f000 f834 	bl	80072f8 <finitef>
 8007290:	b998      	cbnz	r0, 80072ba <powf+0x7e>
 8007292:	eeb0 0a49 	vmov.f32	s0, s18
 8007296:	f000 f82f 	bl	80072f8 <finitef>
 800729a:	b170      	cbz	r0, 80072ba <powf+0x7e>
 800729c:	eeb0 0a48 	vmov.f32	s0, s16
 80072a0:	f000 f82a 	bl	80072f8 <finitef>
 80072a4:	b148      	cbz	r0, 80072ba <powf+0x7e>
 80072a6:	eef4 8a68 	vcmp.f32	s17, s17
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d7e9      	bvc.n	8007284 <powf+0x48>
 80072b0:	f7fe f92a 	bl	8005508 <__errno>
 80072b4:	2321      	movs	r3, #33	; 0x21
 80072b6:	6003      	str	r3, [r0, #0]
 80072b8:	e00f      	b.n	80072da <powf+0x9e>
 80072ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	d10a      	bne.n	80072da <powf+0x9e>
 80072c4:	eeb0 0a49 	vmov.f32	s0, s18
 80072c8:	f000 f816 	bl	80072f8 <finitef>
 80072cc:	b128      	cbz	r0, 80072da <powf+0x9e>
 80072ce:	eeb0 0a48 	vmov.f32	s0, s16
 80072d2:	f000 f811 	bl	80072f8 <finitef>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d1d4      	bne.n	8007284 <powf+0x48>
 80072da:	eeb0 0a68 	vmov.f32	s0, s17
 80072de:	ecbd 8b04 	vpop	{d8-d9}
 80072e2:	bd08      	pop	{r3, pc}
 80072e4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80072e8:	e7f7      	b.n	80072da <powf+0x9e>

080072ea <fabsf>:
 80072ea:	ee10 3a10 	vmov	r3, s0
 80072ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f2:	ee00 3a10 	vmov	s0, r3
 80072f6:	4770      	bx	lr

080072f8 <finitef>:
 80072f8:	b082      	sub	sp, #8
 80072fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80072fe:	9801      	ldr	r0, [sp, #4]
 8007300:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007304:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007308:	bfac      	ite	ge
 800730a:	2000      	movge	r0, #0
 800730c:	2001      	movlt	r0, #1
 800730e:	b002      	add	sp, #8
 8007310:	4770      	bx	lr
	...

08007314 <nanf>:
 8007314:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800731c <nanf+0x8>
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	7fc00000 	.word	0x7fc00000

08007320 <__ieee754_asinf>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	ee10 5a10 	vmov	r5, s0
 8007326:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800732a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800732e:	ed2d 8b04 	vpush	{d8-d9}
 8007332:	d10c      	bne.n	800734e <__ieee754_asinf+0x2e>
 8007334:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80074ac <__ieee754_asinf+0x18c>
 8007338:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80074b0 <__ieee754_asinf+0x190>
 800733c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007340:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007344:	eeb0 0a67 	vmov.f32	s0, s15
 8007348:	ecbd 8b04 	vpop	{d8-d9}
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	dd04      	ble.n	800735a <__ieee754_asinf+0x3a>
 8007350:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007354:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007358:	e7f6      	b.n	8007348 <__ieee754_asinf+0x28>
 800735a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800735e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007362:	da0b      	bge.n	800737c <__ieee754_asinf+0x5c>
 8007364:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007368:	da52      	bge.n	8007410 <__ieee754_asinf+0xf0>
 800736a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80074b4 <__ieee754_asinf+0x194>
 800736e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007372:	eef4 7ae8 	vcmpe.f32	s15, s17
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	dce5      	bgt.n	8007348 <__ieee754_asinf+0x28>
 800737c:	f7ff ffb5 	bl	80072ea <fabsf>
 8007380:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8007384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007388:	ee20 8a27 	vmul.f32	s16, s0, s15
 800738c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80074b8 <__ieee754_asinf+0x198>
 8007390:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80074bc <__ieee754_asinf+0x19c>
 8007394:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80074c0 <__ieee754_asinf+0x1a0>
 8007398:	eea8 7a27 	vfma.f32	s14, s16, s15
 800739c:	eddf 7a49 	vldr	s15, [pc, #292]	; 80074c4 <__ieee754_asinf+0x1a4>
 80073a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80073a4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80074c8 <__ieee754_asinf+0x1a8>
 80073a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80073ac:	eddf 7a47 	vldr	s15, [pc, #284]	; 80074cc <__ieee754_asinf+0x1ac>
 80073b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80073b4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80074d0 <__ieee754_asinf+0x1b0>
 80073b8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80073bc:	eddf 7a45 	vldr	s15, [pc, #276]	; 80074d4 <__ieee754_asinf+0x1b4>
 80073c0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80073c4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80074d8 <__ieee754_asinf+0x1b8>
 80073c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80073cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80074dc <__ieee754_asinf+0x1bc>
 80073d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80073d4:	eeb0 0a48 	vmov.f32	s0, s16
 80073d8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80073dc:	f000 fd4c 	bl	8007e78 <__ieee754_sqrtf>
 80073e0:	4b3f      	ldr	r3, [pc, #252]	; (80074e0 <__ieee754_asinf+0x1c0>)
 80073e2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80073e6:	429c      	cmp	r4, r3
 80073e8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80073ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80073f0:	dd3d      	ble.n	800746e <__ieee754_asinf+0x14e>
 80073f2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80073f6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80074e4 <__ieee754_asinf+0x1c4>
 80073fa:	eee0 7a26 	vfma.f32	s15, s0, s13
 80073fe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80074b0 <__ieee754_asinf+0x190>
 8007402:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007406:	2d00      	cmp	r5, #0
 8007408:	bfd8      	it	le
 800740a:	eeb1 0a40 	vnegle.f32	s0, s0
 800740e:	e79b      	b.n	8007348 <__ieee754_asinf+0x28>
 8007410:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007414:	eddf 6a29 	vldr	s13, [pc, #164]	; 80074bc <__ieee754_asinf+0x19c>
 8007418:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80074b8 <__ieee754_asinf+0x198>
 800741c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80074d0 <__ieee754_asinf+0x1b0>
 8007420:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007424:	eddf 6a27 	vldr	s13, [pc, #156]	; 80074c4 <__ieee754_asinf+0x1a4>
 8007428:	eee7 6a27 	vfma.f32	s13, s14, s15
 800742c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80074c8 <__ieee754_asinf+0x1a8>
 8007430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007434:	eddf 6a25 	vldr	s13, [pc, #148]	; 80074cc <__ieee754_asinf+0x1ac>
 8007438:	eee7 6a27 	vfma.f32	s13, s14, s15
 800743c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80074c0 <__ieee754_asinf+0x1a0>
 8007440:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007444:	eddf 6a23 	vldr	s13, [pc, #140]	; 80074d4 <__ieee754_asinf+0x1b4>
 8007448:	eee7 6a86 	vfma.f32	s13, s15, s12
 800744c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80074d8 <__ieee754_asinf+0x1b8>
 8007450:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007454:	eddf 6a21 	vldr	s13, [pc, #132]	; 80074dc <__ieee754_asinf+0x1bc>
 8007458:	eee6 6a27 	vfma.f32	s13, s12, s15
 800745c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007460:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8007464:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8007468:	eea0 0a27 	vfma.f32	s0, s0, s15
 800746c:	e76c      	b.n	8007348 <__ieee754_asinf+0x28>
 800746e:	ee10 3a10 	vmov	r3, s0
 8007472:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007476:	f023 030f 	bic.w	r3, r3, #15
 800747a:	ee07 3a10 	vmov	s14, r3
 800747e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8007482:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007486:	ee30 0a00 	vadd.f32	s0, s0, s0
 800748a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800748e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80074ac <__ieee754_asinf+0x18c>
 8007492:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8007496:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800749a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80074e8 <__ieee754_asinf+0x1c8>
 800749e:	eeb0 6a40 	vmov.f32	s12, s0
 80074a2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80074a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80074aa:	e7aa      	b.n	8007402 <__ieee754_asinf+0xe2>
 80074ac:	b33bbd2e 	.word	0xb33bbd2e
 80074b0:	3fc90fdb 	.word	0x3fc90fdb
 80074b4:	7149f2ca 	.word	0x7149f2ca
 80074b8:	3a4f7f04 	.word	0x3a4f7f04
 80074bc:	3811ef08 	.word	0x3811ef08
 80074c0:	3e2aaaab 	.word	0x3e2aaaab
 80074c4:	bd241146 	.word	0xbd241146
 80074c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80074cc:	bea6b090 	.word	0xbea6b090
 80074d0:	3d9dc62e 	.word	0x3d9dc62e
 80074d4:	bf303361 	.word	0xbf303361
 80074d8:	4001572d 	.word	0x4001572d
 80074dc:	c019d139 	.word	0xc019d139
 80074e0:	3f799999 	.word	0x3f799999
 80074e4:	333bbd2e 	.word	0x333bbd2e
 80074e8:	3f490fdb 	.word	0x3f490fdb

080074ec <__ieee754_atan2f>:
 80074ec:	ee10 2a90 	vmov	r2, s1
 80074f0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80074f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80074f8:	b510      	push	{r4, lr}
 80074fa:	eef0 7a40 	vmov.f32	s15, s0
 80074fe:	dc06      	bgt.n	800750e <__ieee754_atan2f+0x22>
 8007500:	ee10 0a10 	vmov	r0, s0
 8007504:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007508:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800750c:	dd04      	ble.n	8007518 <__ieee754_atan2f+0x2c>
 800750e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007512:	eeb0 0a67 	vmov.f32	s0, s15
 8007516:	bd10      	pop	{r4, pc}
 8007518:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800751c:	d103      	bne.n	8007526 <__ieee754_atan2f+0x3a>
 800751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007522:	f000 bb4d 	b.w	8007bc0 <atanf>
 8007526:	1794      	asrs	r4, r2, #30
 8007528:	f004 0402 	and.w	r4, r4, #2
 800752c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007530:	b943      	cbnz	r3, 8007544 <__ieee754_atan2f+0x58>
 8007532:	2c02      	cmp	r4, #2
 8007534:	d05e      	beq.n	80075f4 <__ieee754_atan2f+0x108>
 8007536:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007608 <__ieee754_atan2f+0x11c>
 800753a:	2c03      	cmp	r4, #3
 800753c:	bf08      	it	eq
 800753e:	eef0 7a47 	vmoveq.f32	s15, s14
 8007542:	e7e6      	b.n	8007512 <__ieee754_atan2f+0x26>
 8007544:	b941      	cbnz	r1, 8007558 <__ieee754_atan2f+0x6c>
 8007546:	eddf 7a31 	vldr	s15, [pc, #196]	; 800760c <__ieee754_atan2f+0x120>
 800754a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007610 <__ieee754_atan2f+0x124>
 800754e:	2800      	cmp	r0, #0
 8007550:	bfb8      	it	lt
 8007552:	eef0 7a47 	vmovlt.f32	s15, s14
 8007556:	e7dc      	b.n	8007512 <__ieee754_atan2f+0x26>
 8007558:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800755c:	d110      	bne.n	8007580 <__ieee754_atan2f+0x94>
 800755e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007562:	f104 34ff 	add.w	r4, r4, #4294967295
 8007566:	d107      	bne.n	8007578 <__ieee754_atan2f+0x8c>
 8007568:	2c02      	cmp	r4, #2
 800756a:	d846      	bhi.n	80075fa <__ieee754_atan2f+0x10e>
 800756c:	4b29      	ldr	r3, [pc, #164]	; (8007614 <__ieee754_atan2f+0x128>)
 800756e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007572:	edd3 7a00 	vldr	s15, [r3]
 8007576:	e7cc      	b.n	8007512 <__ieee754_atan2f+0x26>
 8007578:	2c02      	cmp	r4, #2
 800757a:	d841      	bhi.n	8007600 <__ieee754_atan2f+0x114>
 800757c:	4b26      	ldr	r3, [pc, #152]	; (8007618 <__ieee754_atan2f+0x12c>)
 800757e:	e7f6      	b.n	800756e <__ieee754_atan2f+0x82>
 8007580:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007584:	d0df      	beq.n	8007546 <__ieee754_atan2f+0x5a>
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800758c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007590:	da1a      	bge.n	80075c8 <__ieee754_atan2f+0xdc>
 8007592:	2a00      	cmp	r2, #0
 8007594:	da01      	bge.n	800759a <__ieee754_atan2f+0xae>
 8007596:	313c      	adds	r1, #60	; 0x3c
 8007598:	db19      	blt.n	80075ce <__ieee754_atan2f+0xe2>
 800759a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800759e:	f7ff fea4 	bl	80072ea <fabsf>
 80075a2:	f000 fb0d 	bl	8007bc0 <atanf>
 80075a6:	eef0 7a40 	vmov.f32	s15, s0
 80075aa:	2c01      	cmp	r4, #1
 80075ac:	d012      	beq.n	80075d4 <__ieee754_atan2f+0xe8>
 80075ae:	2c02      	cmp	r4, #2
 80075b0:	d017      	beq.n	80075e2 <__ieee754_atan2f+0xf6>
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d0ad      	beq.n	8007512 <__ieee754_atan2f+0x26>
 80075b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800761c <__ieee754_atan2f+0x130>
 80075ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007620 <__ieee754_atan2f+0x134>
 80075c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075c6:	e7a4      	b.n	8007512 <__ieee754_atan2f+0x26>
 80075c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800760c <__ieee754_atan2f+0x120>
 80075cc:	e7ed      	b.n	80075aa <__ieee754_atan2f+0xbe>
 80075ce:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007624 <__ieee754_atan2f+0x138>
 80075d2:	e7ea      	b.n	80075aa <__ieee754_atan2f+0xbe>
 80075d4:	ee17 3a90 	vmov	r3, s15
 80075d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	e797      	b.n	8007512 <__ieee754_atan2f+0x26>
 80075e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800761c <__ieee754_atan2f+0x130>
 80075e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007620 <__ieee754_atan2f+0x134>
 80075ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075f2:	e78e      	b.n	8007512 <__ieee754_atan2f+0x26>
 80075f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007620 <__ieee754_atan2f+0x134>
 80075f8:	e78b      	b.n	8007512 <__ieee754_atan2f+0x26>
 80075fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007628 <__ieee754_atan2f+0x13c>
 80075fe:	e788      	b.n	8007512 <__ieee754_atan2f+0x26>
 8007600:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007624 <__ieee754_atan2f+0x138>
 8007604:	e785      	b.n	8007512 <__ieee754_atan2f+0x26>
 8007606:	bf00      	nop
 8007608:	c0490fdb 	.word	0xc0490fdb
 800760c:	3fc90fdb 	.word	0x3fc90fdb
 8007610:	bfc90fdb 	.word	0xbfc90fdb
 8007614:	080082ec 	.word	0x080082ec
 8007618:	080082f8 	.word	0x080082f8
 800761c:	33bbbd2e 	.word	0x33bbbd2e
 8007620:	40490fdb 	.word	0x40490fdb
 8007624:	00000000 	.word	0x00000000
 8007628:	3f490fdb 	.word	0x3f490fdb

0800762c <__ieee754_powf>:
 800762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007630:	ee10 4a90 	vmov	r4, s1
 8007634:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007638:	ed2d 8b02 	vpush	{d8}
 800763c:	ee10 7a10 	vmov	r7, s0
 8007640:	eeb0 8a40 	vmov.f32	s16, s0
 8007644:	eef0 8a60 	vmov.f32	s17, s1
 8007648:	d10c      	bne.n	8007664 <__ieee754_powf+0x38>
 800764a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800764e:	007f      	lsls	r7, r7, #1
 8007650:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007654:	f240 8292 	bls.w	8007b7c <__ieee754_powf+0x550>
 8007658:	ee38 0a28 	vadd.f32	s0, s16, s17
 800765c:	ecbd 8b02 	vpop	{d8}
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8007668:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800766c:	dcf4      	bgt.n	8007658 <__ieee754_powf+0x2c>
 800766e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007672:	dd08      	ble.n	8007686 <__ieee754_powf+0x5a>
 8007674:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007678:	d1ee      	bne.n	8007658 <__ieee754_powf+0x2c>
 800767a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800767e:	0064      	lsls	r4, r4, #1
 8007680:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007684:	e7e6      	b.n	8007654 <__ieee754_powf+0x28>
 8007686:	2f00      	cmp	r7, #0
 8007688:	da20      	bge.n	80076cc <__ieee754_powf+0xa0>
 800768a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800768e:	da2d      	bge.n	80076ec <__ieee754_powf+0xc0>
 8007690:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007694:	f2c0 827b 	blt.w	8007b8e <__ieee754_powf+0x562>
 8007698:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800769c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80076a0:	fa48 f603 	asr.w	r6, r8, r3
 80076a4:	fa06 f303 	lsl.w	r3, r6, r3
 80076a8:	4543      	cmp	r3, r8
 80076aa:	f040 8270 	bne.w	8007b8e <__ieee754_powf+0x562>
 80076ae:	f006 0601 	and.w	r6, r6, #1
 80076b2:	f1c6 0602 	rsb	r6, r6, #2
 80076b6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80076ba:	d11f      	bne.n	80076fc <__ieee754_powf+0xd0>
 80076bc:	2c00      	cmp	r4, #0
 80076be:	f280 8263 	bge.w	8007b88 <__ieee754_powf+0x55c>
 80076c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076c6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80076ca:	e7c7      	b.n	800765c <__ieee754_powf+0x30>
 80076cc:	2600      	movs	r6, #0
 80076ce:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80076d2:	d1f0      	bne.n	80076b6 <__ieee754_powf+0x8a>
 80076d4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80076d8:	f000 8250 	beq.w	8007b7c <__ieee754_powf+0x550>
 80076dc:	dd08      	ble.n	80076f0 <__ieee754_powf+0xc4>
 80076de:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80079e4 <__ieee754_powf+0x3b8>
 80076e2:	2c00      	cmp	r4, #0
 80076e4:	bfa8      	it	ge
 80076e6:	eeb0 0a68 	vmovge.f32	s0, s17
 80076ea:	e7b7      	b.n	800765c <__ieee754_powf+0x30>
 80076ec:	2602      	movs	r6, #2
 80076ee:	e7ee      	b.n	80076ce <__ieee754_powf+0xa2>
 80076f0:	2c00      	cmp	r4, #0
 80076f2:	f280 8246 	bge.w	8007b82 <__ieee754_powf+0x556>
 80076f6:	eeb1 0a68 	vneg.f32	s0, s17
 80076fa:	e7af      	b.n	800765c <__ieee754_powf+0x30>
 80076fc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007700:	d102      	bne.n	8007708 <__ieee754_powf+0xdc>
 8007702:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007706:	e7a9      	b.n	800765c <__ieee754_powf+0x30>
 8007708:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800770c:	eeb0 0a48 	vmov.f32	s0, s16
 8007710:	d107      	bne.n	8007722 <__ieee754_powf+0xf6>
 8007712:	2f00      	cmp	r7, #0
 8007714:	db05      	blt.n	8007722 <__ieee754_powf+0xf6>
 8007716:	ecbd 8b02 	vpop	{d8}
 800771a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	f000 bbab 	b.w	8007e78 <__ieee754_sqrtf>
 8007722:	f7ff fde2 	bl	80072ea <fabsf>
 8007726:	b125      	cbz	r5, 8007732 <__ieee754_powf+0x106>
 8007728:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800772c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007730:	d115      	bne.n	800775e <__ieee754_powf+0x132>
 8007732:	2c00      	cmp	r4, #0
 8007734:	bfbc      	itt	lt
 8007736:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800773a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800773e:	2f00      	cmp	r7, #0
 8007740:	da8c      	bge.n	800765c <__ieee754_powf+0x30>
 8007742:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8007746:	4335      	orrs	r5, r6
 8007748:	d104      	bne.n	8007754 <__ieee754_powf+0x128>
 800774a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800774e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007752:	e783      	b.n	800765c <__ieee754_powf+0x30>
 8007754:	2e01      	cmp	r6, #1
 8007756:	d181      	bne.n	800765c <__ieee754_powf+0x30>
 8007758:	eeb1 0a40 	vneg.f32	s0, s0
 800775c:	e77e      	b.n	800765c <__ieee754_powf+0x30>
 800775e:	0ff8      	lsrs	r0, r7, #31
 8007760:	3801      	subs	r0, #1
 8007762:	ea56 0300 	orrs.w	r3, r6, r0
 8007766:	d104      	bne.n	8007772 <__ieee754_powf+0x146>
 8007768:	ee38 8a48 	vsub.f32	s16, s16, s16
 800776c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007770:	e774      	b.n	800765c <__ieee754_powf+0x30>
 8007772:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007776:	dd73      	ble.n	8007860 <__ieee754_powf+0x234>
 8007778:	4b9b      	ldr	r3, [pc, #620]	; (80079e8 <__ieee754_powf+0x3bc>)
 800777a:	429d      	cmp	r5, r3
 800777c:	dc08      	bgt.n	8007790 <__ieee754_powf+0x164>
 800777e:	2c00      	cmp	r4, #0
 8007780:	da0b      	bge.n	800779a <__ieee754_powf+0x16e>
 8007782:	2000      	movs	r0, #0
 8007784:	ecbd 8b02 	vpop	{d8}
 8007788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	f000 bb6e 	b.w	8007e6c <__math_oflowf>
 8007790:	4b96      	ldr	r3, [pc, #600]	; (80079ec <__ieee754_powf+0x3c0>)
 8007792:	429d      	cmp	r5, r3
 8007794:	dd08      	ble.n	80077a8 <__ieee754_powf+0x17c>
 8007796:	2c00      	cmp	r4, #0
 8007798:	dcf3      	bgt.n	8007782 <__ieee754_powf+0x156>
 800779a:	2000      	movs	r0, #0
 800779c:	ecbd 8b02 	vpop	{d8}
 80077a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	f000 bb5c 	b.w	8007e60 <__math_uflowf>
 80077a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077b0:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80079f0 <__ieee754_powf+0x3c4>
 80077b4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80077b8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80077bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077c0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80077c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80077c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077cc:	eddf 7a89 	vldr	s15, [pc, #548]	; 80079f4 <__ieee754_powf+0x3c8>
 80077d0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80077d4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80079f8 <__ieee754_powf+0x3cc>
 80077d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077dc:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80079fc <__ieee754_powf+0x3d0>
 80077e0:	eef0 6a67 	vmov.f32	s13, s15
 80077e4:	eee0 6a07 	vfma.f32	s13, s0, s14
 80077e8:	ee16 3a90 	vmov	r3, s13
 80077ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077f0:	f023 030f 	bic.w	r3, r3, #15
 80077f4:	ee06 3a90 	vmov	s13, r3
 80077f8:	eee0 6a47 	vfms.f32	s13, s0, s14
 80077fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007800:	3e01      	subs	r6, #1
 8007802:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007806:	4306      	orrs	r6, r0
 8007808:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800780c:	f024 040f 	bic.w	r4, r4, #15
 8007810:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007814:	bf08      	it	eq
 8007816:	eeb0 8a47 	vmoveq.f32	s16, s14
 800781a:	ee07 4a10 	vmov	s14, r4
 800781e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007822:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800782e:	ee07 4a10 	vmov	s14, r4
 8007832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007836:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800783a:	ee17 1a10 	vmov	r1, s14
 800783e:	2900      	cmp	r1, #0
 8007840:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007844:	f340 817c 	ble.w	8007b40 <__ieee754_powf+0x514>
 8007848:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800784c:	f340 80f8 	ble.w	8007a40 <__ieee754_powf+0x414>
 8007850:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007858:	bf4c      	ite	mi
 800785a:	2001      	movmi	r0, #1
 800785c:	2000      	movpl	r0, #0
 800785e:	e791      	b.n	8007784 <__ieee754_powf+0x158>
 8007860:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8007864:	bf01      	itttt	eq
 8007866:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8007a00 <__ieee754_powf+0x3d4>
 800786a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800786e:	f06f 0317 	mvneq.w	r3, #23
 8007872:	ee17 5a90 	vmoveq	r5, s15
 8007876:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800787a:	bf18      	it	ne
 800787c:	2300      	movne	r3, #0
 800787e:	3a7f      	subs	r2, #127	; 0x7f
 8007880:	441a      	add	r2, r3
 8007882:	4b60      	ldr	r3, [pc, #384]	; (8007a04 <__ieee754_powf+0x3d8>)
 8007884:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007888:	429d      	cmp	r5, r3
 800788a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800788e:	dd06      	ble.n	800789e <__ieee754_powf+0x272>
 8007890:	4b5d      	ldr	r3, [pc, #372]	; (8007a08 <__ieee754_powf+0x3dc>)
 8007892:	429d      	cmp	r5, r3
 8007894:	f340 80a4 	ble.w	80079e0 <__ieee754_powf+0x3b4>
 8007898:	3201      	adds	r2, #1
 800789a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800789e:	2500      	movs	r5, #0
 80078a0:	4b5a      	ldr	r3, [pc, #360]	; (8007a0c <__ieee754_powf+0x3e0>)
 80078a2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80078a6:	ee07 1a10 	vmov	s14, r1
 80078aa:	edd3 5a00 	vldr	s11, [r3]
 80078ae:	4b58      	ldr	r3, [pc, #352]	; (8007a10 <__ieee754_powf+0x3e4>)
 80078b0:	ee75 7a87 	vadd.f32	s15, s11, s14
 80078b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80078bc:	1049      	asrs	r1, r1, #1
 80078be:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80078c2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80078c6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80078ca:	ee37 6a65 	vsub.f32	s12, s14, s11
 80078ce:	ee07 1a90 	vmov	s15, r1
 80078d2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80078d6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80078da:	ee15 7a10 	vmov	r7, s10
 80078de:	401f      	ands	r7, r3
 80078e0:	ee06 7a90 	vmov	s13, r7
 80078e4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80078e8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80078ec:	ee65 7a05 	vmul.f32	s15, s10, s10
 80078f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80078f4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8007a14 <__ieee754_powf+0x3e8>
 80078f8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007a18 <__ieee754_powf+0x3ec>
 80078fc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007900:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007a1c <__ieee754_powf+0x3f0>
 8007904:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007908:	eddf 5a39 	vldr	s11, [pc, #228]	; 80079f0 <__ieee754_powf+0x3c4>
 800790c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007910:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007a20 <__ieee754_powf+0x3f4>
 8007914:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007918:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007a24 <__ieee754_powf+0x3f8>
 800791c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007920:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007924:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007928:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800792c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007930:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8007934:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007938:	eef0 5a67 	vmov.f32	s11, s15
 800793c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007940:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007944:	ee15 1a90 	vmov	r1, s11
 8007948:	4019      	ands	r1, r3
 800794a:	ee05 1a90 	vmov	s11, r1
 800794e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007952:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800795e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007962:	eeb0 6a67 	vmov.f32	s12, s15
 8007966:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800796a:	ee16 1a10 	vmov	r1, s12
 800796e:	4019      	ands	r1, r3
 8007970:	ee07 1a10 	vmov	s14, r1
 8007974:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007978:	ee06 1a10 	vmov	s12, r1
 800797c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007980:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007a28 <__ieee754_powf+0x3fc>
 8007984:	4929      	ldr	r1, [pc, #164]	; (8007a2c <__ieee754_powf+0x400>)
 8007986:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8007a30 <__ieee754_powf+0x404>
 800798a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800798e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007a34 <__ieee754_powf+0x408>
 8007992:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007996:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800799a:	ed91 7a00 	vldr	s14, [r1]
 800799e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079a2:	ee07 2a10 	vmov	s14, r2
 80079a6:	eef0 6a67 	vmov.f32	s13, s15
 80079aa:	4a23      	ldr	r2, [pc, #140]	; (8007a38 <__ieee754_powf+0x40c>)
 80079ac:	eee6 6a25 	vfma.f32	s13, s12, s11
 80079b0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80079b4:	ed92 5a00 	vldr	s10, [r2]
 80079b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80079bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80079c0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80079c4:	ee16 2a90 	vmov	r2, s13
 80079c8:	4013      	ands	r3, r2
 80079ca:	ee06 3a90 	vmov	s13, r3
 80079ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80079d2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80079d6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80079da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079de:	e70f      	b.n	8007800 <__ieee754_powf+0x1d4>
 80079e0:	2501      	movs	r5, #1
 80079e2:	e75d      	b.n	80078a0 <__ieee754_powf+0x274>
 80079e4:	00000000 	.word	0x00000000
 80079e8:	3f7ffff3 	.word	0x3f7ffff3
 80079ec:	3f800007 	.word	0x3f800007
 80079f0:	3eaaaaab 	.word	0x3eaaaaab
 80079f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80079f8:	36eca570 	.word	0x36eca570
 80079fc:	3fb8aa00 	.word	0x3fb8aa00
 8007a00:	4b800000 	.word	0x4b800000
 8007a04:	001cc471 	.word	0x001cc471
 8007a08:	005db3d6 	.word	0x005db3d6
 8007a0c:	08008304 	.word	0x08008304
 8007a10:	fffff000 	.word	0xfffff000
 8007a14:	3e6c3255 	.word	0x3e6c3255
 8007a18:	3e53f142 	.word	0x3e53f142
 8007a1c:	3e8ba305 	.word	0x3e8ba305
 8007a20:	3edb6db7 	.word	0x3edb6db7
 8007a24:	3f19999a 	.word	0x3f19999a
 8007a28:	3f76384f 	.word	0x3f76384f
 8007a2c:	08008314 	.word	0x08008314
 8007a30:	3f763800 	.word	0x3f763800
 8007a34:	369dc3a0 	.word	0x369dc3a0
 8007a38:	0800830c 	.word	0x0800830c
 8007a3c:	3338aa3c 	.word	0x3338aa3c
 8007a40:	f040 8093 	bne.w	8007b6a <__ieee754_powf+0x53e>
 8007a44:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007a3c <__ieee754_powf+0x410>
 8007a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a4c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007a50:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	f73f aefa 	bgt.w	8007850 <__ieee754_powf+0x224>
 8007a5c:	15db      	asrs	r3, r3, #23
 8007a5e:	3b7e      	subs	r3, #126	; 0x7e
 8007a60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007a64:	4118      	asrs	r0, r3
 8007a66:	4408      	add	r0, r1
 8007a68:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007a6c:	4a49      	ldr	r2, [pc, #292]	; (8007b94 <__ieee754_powf+0x568>)
 8007a6e:	3b7f      	subs	r3, #127	; 0x7f
 8007a70:	411a      	asrs	r2, r3
 8007a72:	4002      	ands	r2, r0
 8007a74:	ee07 2a10 	vmov	s14, r2
 8007a78:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007a80:	f1c3 0317 	rsb	r3, r3, #23
 8007a84:	4118      	asrs	r0, r3
 8007a86:	2900      	cmp	r1, #0
 8007a88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a8c:	bfb8      	it	lt
 8007a8e:	4240      	neglt	r0, r0
 8007a90:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007a94:	eddf 6a40 	vldr	s13, [pc, #256]	; 8007b98 <__ieee754_powf+0x56c>
 8007a98:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007b9c <__ieee754_powf+0x570>
 8007a9c:	ee17 3a10 	vmov	r3, s14
 8007aa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007aa4:	f023 030f 	bic.w	r3, r3, #15
 8007aa8:	ee07 3a10 	vmov	s14, r3
 8007aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ab4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007ab8:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007ba0 <__ieee754_powf+0x574>
 8007abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007ac4:	eef0 6a67 	vmov.f32	s13, s15
 8007ac8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007acc:	eef0 5a66 	vmov.f32	s11, s13
 8007ad0:	eee7 5a46 	vfms.f32	s11, s14, s12
 8007ad4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007ad8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007adc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8007ba4 <__ieee754_powf+0x578>
 8007ae0:	eddf 5a31 	vldr	s11, [pc, #196]	; 8007ba8 <__ieee754_powf+0x57c>
 8007ae4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007ae8:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007bac <__ieee754_powf+0x580>
 8007aec:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007af0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007bb0 <__ieee754_powf+0x584>
 8007af4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007af8:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bb4 <__ieee754_powf+0x588>
 8007afc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007b00:	eeb0 6a66 	vmov.f32	s12, s13
 8007b04:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007b08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b0c:	ee66 5a86 	vmul.f32	s11, s13, s12
 8007b10:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007b14:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007b18:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8007b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b24:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b28:	ee10 3a10 	vmov	r3, s0
 8007b2c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b34:	da1f      	bge.n	8007b76 <__ieee754_powf+0x54a>
 8007b36:	f000 f917 	bl	8007d68 <scalbnf>
 8007b3a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007b3e:	e58d      	b.n	800765c <__ieee754_powf+0x30>
 8007b40:	4a1d      	ldr	r2, [pc, #116]	; (8007bb8 <__ieee754_powf+0x58c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	dd07      	ble.n	8007b56 <__ieee754_powf+0x52a>
 8007b46:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4e:	bf4c      	ite	mi
 8007b50:	2001      	movmi	r0, #1
 8007b52:	2000      	movpl	r0, #0
 8007b54:	e622      	b.n	800779c <__ieee754_powf+0x170>
 8007b56:	d108      	bne.n	8007b6a <__ieee754_powf+0x53e>
 8007b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b5c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	f6ff af7a 	blt.w	8007a5c <__ieee754_powf+0x430>
 8007b68:	e7ed      	b.n	8007b46 <__ieee754_powf+0x51a>
 8007b6a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007b6e:	f73f af75 	bgt.w	8007a5c <__ieee754_powf+0x430>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e78c      	b.n	8007a90 <__ieee754_powf+0x464>
 8007b76:	ee00 3a10 	vmov	s0, r3
 8007b7a:	e7de      	b.n	8007b3a <__ieee754_powf+0x50e>
 8007b7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b80:	e56c      	b.n	800765c <__ieee754_powf+0x30>
 8007b82:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007bbc <__ieee754_powf+0x590>
 8007b86:	e569      	b.n	800765c <__ieee754_powf+0x30>
 8007b88:	eeb0 0a48 	vmov.f32	s0, s16
 8007b8c:	e566      	b.n	800765c <__ieee754_powf+0x30>
 8007b8e:	2600      	movs	r6, #0
 8007b90:	e591      	b.n	80076b6 <__ieee754_powf+0x8a>
 8007b92:	bf00      	nop
 8007b94:	ff800000 	.word	0xff800000
 8007b98:	3f317218 	.word	0x3f317218
 8007b9c:	3f317200 	.word	0x3f317200
 8007ba0:	35bfbe8c 	.word	0x35bfbe8c
 8007ba4:	b5ddea0e 	.word	0xb5ddea0e
 8007ba8:	3331bb4c 	.word	0x3331bb4c
 8007bac:	388ab355 	.word	0x388ab355
 8007bb0:	bb360b61 	.word	0xbb360b61
 8007bb4:	3e2aaaab 	.word	0x3e2aaaab
 8007bb8:	43160000 	.word	0x43160000
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <atanf>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	ee10 5a10 	vmov	r5, s0
 8007bc6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007bca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007bce:	eef0 7a40 	vmov.f32	s15, s0
 8007bd2:	db10      	blt.n	8007bf6 <atanf+0x36>
 8007bd4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007bd8:	dd04      	ble.n	8007be4 <atanf+0x24>
 8007bda:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007bde:	eeb0 0a67 	vmov.f32	s0, s15
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007d1c <atanf+0x15c>
 8007be8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007d20 <atanf+0x160>
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	bfd8      	it	le
 8007bf0:	eef0 7a47 	vmovle.f32	s15, s14
 8007bf4:	e7f3      	b.n	8007bde <atanf+0x1e>
 8007bf6:	4b4b      	ldr	r3, [pc, #300]	; (8007d24 <atanf+0x164>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	dc10      	bgt.n	8007c1e <atanf+0x5e>
 8007bfc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007c00:	da0a      	bge.n	8007c18 <atanf+0x58>
 8007c02:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007d28 <atanf+0x168>
 8007c06:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	dce2      	bgt.n	8007bde <atanf+0x1e>
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1c:	e013      	b.n	8007c46 <atanf+0x86>
 8007c1e:	f7ff fb64 	bl	80072ea <fabsf>
 8007c22:	4b42      	ldr	r3, [pc, #264]	; (8007d2c <atanf+0x16c>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	dc4f      	bgt.n	8007cc8 <atanf+0x108>
 8007c28:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	dc41      	bgt.n	8007cb4 <atanf+0xf4>
 8007c30:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007c34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007c38:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007c4c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007d30 <atanf+0x170>
 8007c50:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007d34 <atanf+0x174>
 8007c54:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007d38 <atanf+0x178>
 8007c58:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007c5c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007c60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007d3c <atanf+0x17c>
 8007c64:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c68:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007d40 <atanf+0x180>
 8007c6c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007c70:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007d44 <atanf+0x184>
 8007c74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d48 <atanf+0x188>
 8007c7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007c80:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007d4c <atanf+0x18c>
 8007c84:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007c88:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007d50 <atanf+0x190>
 8007c8c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c90:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007d54 <atanf+0x194>
 8007c94:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007c98:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007d58 <atanf+0x198>
 8007c9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007ca0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007ca4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007ca8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007cac:	d121      	bne.n	8007cf2 <atanf+0x132>
 8007cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cb2:	e794      	b.n	8007bde <atanf+0x1e>
 8007cb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cb8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cc6:	e7be      	b.n	8007c46 <atanf+0x86>
 8007cc8:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <atanf+0x19c>)
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	dc0b      	bgt.n	8007ce6 <atanf+0x126>
 8007cce:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007cda:	2302      	movs	r3, #2
 8007cdc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce4:	e7af      	b.n	8007c46 <atanf+0x86>
 8007ce6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007cea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e7a9      	b.n	8007c46 <atanf+0x86>
 8007cf2:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <atanf+0x1a0>)
 8007cf4:	491b      	ldr	r1, [pc, #108]	; (8007d64 <atanf+0x1a4>)
 8007cf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007cfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007cfe:	edd3 6a00 	vldr	s13, [r3]
 8007d02:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d0c:	edd2 7a00 	vldr	s15, [r2]
 8007d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d14:	bfb8      	it	lt
 8007d16:	eef1 7a67 	vneglt.f32	s15, s15
 8007d1a:	e760      	b.n	8007bde <atanf+0x1e>
 8007d1c:	3fc90fdb 	.word	0x3fc90fdb
 8007d20:	bfc90fdb 	.word	0xbfc90fdb
 8007d24:	3edfffff 	.word	0x3edfffff
 8007d28:	7149f2ca 	.word	0x7149f2ca
 8007d2c:	3f97ffff 	.word	0x3f97ffff
 8007d30:	3c8569d7 	.word	0x3c8569d7
 8007d34:	3d4bda59 	.word	0x3d4bda59
 8007d38:	bd6ef16b 	.word	0xbd6ef16b
 8007d3c:	3d886b35 	.word	0x3d886b35
 8007d40:	3dba2e6e 	.word	0x3dba2e6e
 8007d44:	3e124925 	.word	0x3e124925
 8007d48:	3eaaaaab 	.word	0x3eaaaaab
 8007d4c:	bd15a221 	.word	0xbd15a221
 8007d50:	bd9d8795 	.word	0xbd9d8795
 8007d54:	bde38e38 	.word	0xbde38e38
 8007d58:	be4ccccd 	.word	0xbe4ccccd
 8007d5c:	401bffff 	.word	0x401bffff
 8007d60:	0800831c 	.word	0x0800831c
 8007d64:	0800832c 	.word	0x0800832c

08007d68 <scalbnf>:
 8007d68:	ee10 3a10 	vmov	r3, s0
 8007d6c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d70:	d02b      	beq.n	8007dca <scalbnf+0x62>
 8007d72:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d76:	d302      	bcc.n	8007d7e <scalbnf+0x16>
 8007d78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d7c:	4770      	bx	lr
 8007d7e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d82:	d123      	bne.n	8007dcc <scalbnf+0x64>
 8007d84:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <scalbnf+0xb0>)
 8007d86:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007e1c <scalbnf+0xb4>
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d90:	db17      	blt.n	8007dc2 <scalbnf+0x5a>
 8007d92:	ee10 3a10 	vmov	r3, s0
 8007d96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d9a:	3a19      	subs	r2, #25
 8007d9c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007da0:	4288      	cmp	r0, r1
 8007da2:	dd15      	ble.n	8007dd0 <scalbnf+0x68>
 8007da4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007e20 <scalbnf+0xb8>
 8007da8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007e24 <scalbnf+0xbc>
 8007dac:	ee10 3a10 	vmov	r3, s0
 8007db0:	eeb0 7a67 	vmov.f32	s14, s15
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bfb8      	it	lt
 8007db8:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dbc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007dc0:	4770      	bx	lr
 8007dc2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007e28 <scalbnf+0xc0>
 8007dc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007dca:	4770      	bx	lr
 8007dcc:	0dd2      	lsrs	r2, r2, #23
 8007dce:	e7e5      	b.n	8007d9c <scalbnf+0x34>
 8007dd0:	4410      	add	r0, r2
 8007dd2:	28fe      	cmp	r0, #254	; 0xfe
 8007dd4:	dce6      	bgt.n	8007da4 <scalbnf+0x3c>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	dd06      	ble.n	8007de8 <scalbnf+0x80>
 8007dda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007dde:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007de2:	ee00 3a10 	vmov	s0, r3
 8007de6:	4770      	bx	lr
 8007de8:	f110 0f16 	cmn.w	r0, #22
 8007dec:	da09      	bge.n	8007e02 <scalbnf+0x9a>
 8007dee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007e28 <scalbnf+0xc0>
 8007df2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007e2c <scalbnf+0xc4>
 8007df6:	ee10 3a10 	vmov	r3, s0
 8007dfa:	eeb0 7a67 	vmov.f32	s14, s15
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	e7d9      	b.n	8007db6 <scalbnf+0x4e>
 8007e02:	3019      	adds	r0, #25
 8007e04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e08:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007e0c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007e30 <scalbnf+0xc8>
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	e7d7      	b.n	8007dc6 <scalbnf+0x5e>
 8007e16:	bf00      	nop
 8007e18:	ffff3cb0 	.word	0xffff3cb0
 8007e1c:	4c000000 	.word	0x4c000000
 8007e20:	7149f2ca 	.word	0x7149f2ca
 8007e24:	f149f2ca 	.word	0xf149f2ca
 8007e28:	0da24260 	.word	0x0da24260
 8007e2c:	8da24260 	.word	0x8da24260
 8007e30:	33000000 	.word	0x33000000

08007e34 <with_errnof>:
 8007e34:	b513      	push	{r0, r1, r4, lr}
 8007e36:	4604      	mov	r4, r0
 8007e38:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007e3c:	f7fd fb64 	bl	8005508 <__errno>
 8007e40:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007e44:	6004      	str	r4, [r0, #0]
 8007e46:	b002      	add	sp, #8
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <xflowf>:
 8007e4a:	b130      	cbz	r0, 8007e5a <xflowf+0x10>
 8007e4c:	eef1 7a40 	vneg.f32	s15, s0
 8007e50:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e54:	2022      	movs	r0, #34	; 0x22
 8007e56:	f7ff bfed 	b.w	8007e34 <with_errnof>
 8007e5a:	eef0 7a40 	vmov.f32	s15, s0
 8007e5e:	e7f7      	b.n	8007e50 <xflowf+0x6>

08007e60 <__math_uflowf>:
 8007e60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e68 <__math_uflowf+0x8>
 8007e64:	f7ff bff1 	b.w	8007e4a <xflowf>
 8007e68:	10000000 	.word	0x10000000

08007e6c <__math_oflowf>:
 8007e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e74 <__math_oflowf+0x8>
 8007e70:	f7ff bfeb 	b.w	8007e4a <xflowf>
 8007e74:	70000000 	.word	0x70000000

08007e78 <__ieee754_sqrtf>:
 8007e78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007e7c:	4770      	bx	lr
	...

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
